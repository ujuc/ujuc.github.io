<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>잘 밤에 쓸데없는 생각하기...</title><link href="https://ujuc.github.io/" rel="alternate"></link><link href="https://ujuc.github.io/feeds/all.atom.xml" rel="self"></link><id>https://ujuc.github.io/</id><updated>2019-08-15T08:51:09+09:00</updated><subtitle>Anythink, Everythink!</subtitle><entry><title>Writing poetry script</title><link href="https://ujuc.github.io/2019/08/15/writing_poetry_script/" rel="alternate"></link><published>2019-08-15T08:51:09+09:00</published><updated>2019-08-15T08:51:09+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-08-15:/2019/08/15/writing_poetry_script/</id><summary type="html">&lt;p&gt;&lt;code&gt;poetry&lt;/code&gt;를 사용하면서 사용하고 싶었던 &lt;code&gt;[tool.poetry.scripts]&lt;/code&gt; 사용법을&amp;nbsp;남긴다.&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;이 문서에서 &lt;code&gt;invoke&lt;/code&gt; 라이브러리를&amp;nbsp;사용한다.&lt;/li&gt;
&lt;li&gt;실제 코드는 &lt;a href="https://github.com/ujuc/ujuc.github.io"&gt;https://github.com/ujuc/ujuc.github.io&lt;/a&gt; 에서 확인이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;명령어&amp;nbsp;작성&lt;/h2&gt;
&lt;p&gt;블로그 새 글을 만들 수 있는 명령어를&amp;nbsp;작성한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kroman&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pendulum&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;CONTENT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Post title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Post format. if false, make markdown format&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make post template&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pendulum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kroman&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_date_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;post_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;file_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{date}-{slug}&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{file_title}.md&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title: {title}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date: {post_date}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Category: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Tags: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Slug: {slug}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Summary: &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{file_title}.rst&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;hashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{title}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{hashes}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:date: {post_date}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:category: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:tags: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:slug: {slug}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:summary: &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;blog_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONTENT_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;blog_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;blog_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;post_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blog_path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;post_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;post_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;post_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File created -&amp;gt; {post_path}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;task를 등록해 주고 명령을 확인하면 다음 같이&amp;nbsp;보인다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ inv --list

Available tasks:

  clean      Clean up this dir
  fix        Execute black
  preview    Start preview web page server
  pub        Publish to github main page
  cli.post   Make post template
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;명령어를 실행해&amp;nbsp;보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ inv --help cli.post
Usage: inv&lt;span class="o"&gt;[&lt;/span&gt;oke&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--core-opts&lt;span class="o"&gt;]&lt;/span&gt; cli.post &lt;span class="o"&gt;[&lt;/span&gt;--options&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;other tasks here ...&lt;span class="o"&gt;]&lt;/span&gt;

Docstring:
  Make post template

Options:
  -r, --rst                   Post format. &lt;span class="k"&gt;if&lt;/span&gt; false, make markdown format
  -t STRING, --title&lt;span class="o"&gt;=&lt;/span&gt;STRING   Post title

&lt;span class="c1"&gt;# Test create post&lt;/span&gt;
$ inv cli.post -t &lt;span class="s2"&gt;&amp;quot;포스트 테스트&amp;quot;&lt;/span&gt;
File created -&amp;gt; /Users/ujuc/repos/ujuc.github.io/content/blog/2019-08-14-po-seu-teu_te-seu-teu.md

&lt;span class="c1"&gt;# Cat post file&lt;/span&gt;
$ cat content/blog/2019-08-14-po-seu-teu_te-seu-teu.md
Title: 포스트 테스트
Date: &lt;span class="m"&gt;2019&lt;/span&gt;-08-14 &lt;span class="m"&gt;23&lt;/span&gt;:49:02
Category: 
Tags: 
Slug: po-seu-teu_te-seu-teu
Summary:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;여기까지 &lt;a href="https://github.com/ujuc/ujuc.github.io/commit/8e4fa75978c249192c203658dace4949a7956936"&gt;code commit&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이제 만들어지는 걸 확인했으니&amp;hellip; &lt;code&gt;poetry run cli&lt;/code&gt;  명령을 이용해서도 만들 수 있게 코드를&amp;nbsp;수정하자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli/main.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Package로 추가해야 되어 &lt;code&gt;cli&lt;/code&gt; 폴더를&amp;nbsp;만들었다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdispater/poetry/issues/577"&gt;Poetry run: ModuleOrPackageNotFound with implicit namespace packages (&lt;span class="caps"&gt;PEP420&lt;/span&gt;)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Import Program class&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[tool.poetry]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;[tool.poetry.scripts]&lt;/span&gt;
&lt;span class="n"&gt;cli&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cli.main:run&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이제 실행해&amp;nbsp;보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ poetry run cli --list
Subcommands:

  post   Make post template

&lt;span class="c1"&gt;# Test create post&lt;/span&gt;
$ poetry run cli post -t &lt;span class="s2"&gt;&amp;quot;포스트 테스트&amp;quot;&lt;/span&gt;
File created -&amp;gt; /Users/ujuc/repos/ujuc.github.io/content/blog/2019-08-15-po-seu-teu_te-seu-teu.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;잘된다.&lt;/p&gt;
&lt;p&gt;여기까지 &lt;a href="https://github.com/ujuc/ujuc.github.io/commit/ded484d94cec63e684d1f8fab2ea0b8006ceab63"&gt;code commit&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이렇게 하면 간단한 cli 툴을 실행할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;문제는 build를 하게되면 해당 명령 셋이 등록이 되니&amp;hellip; build용이 아닌 상태로&amp;nbsp;사용하자.&lt;/p&gt;
&lt;p&gt;build일때는&amp;nbsp;고민을&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sdispater/poetry/blob/master/pyproject.toml#L69"&gt;poetry 레포&lt;/a&gt;를 보면 해당 &lt;code&gt;pyproject.toml&lt;/code&gt;에 실행하는 코드가 들어가있는 것을 확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이제 나머지 명령어&amp;nbsp;옮기러가야겠다.&lt;/p&gt;</content><category term="poetry"></category><category term="script"></category><category term="invoke"></category></entry><entry><title>Rust 개발 환경 구성</title><link href="https://ujuc.github.io/2019/08/06/rust_gae-bar_hwan-gyeong_gu-seong/" rel="alternate"></link><published>2019-08-06T08:58:16+09:00</published><updated>2019-08-06T08:58:16+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-08-06:/2019/08/06/rust_gae-bar_hwan-gyeong_gu-seong/</id><summary type="html">&lt;p&gt;Rust 개발을&amp;nbsp;해볼까나~&lt;/p&gt;</summary><content type="html">&lt;p&gt;그냥 공부할 목적으로 Rust를 하기로 하였다.&lt;br&gt;
요즘에 참 잘 나간다고도&amp;nbsp;했고&amp;hellip;&lt;/p&gt;
&lt;h2 id="rustup-rust"&gt;Rustup으로 Rust&amp;nbsp;설치&lt;/h2&gt;
&lt;p&gt;처음에는 rustup을 이용해서 설치한게 아니라 brow를 이용해서 설치를 했었다.&lt;br&gt;
coc.nvim에서 rust 플러그인을 쓸려고하니&amp;hellip; 안된다고 해서&amp;nbsp;설치.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl --proto &lt;span class="s1"&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs &lt;span class="p"&gt;|&lt;/span&gt; sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;명령어를 확인했는데 이거 괜찮은 툴이다.&lt;br&gt;
나중에 따로&amp;nbsp;정리해야지.&lt;/p&gt;
&lt;h2 id="vim"&gt;Vim&amp;nbsp;환경&lt;/h2&gt;
&lt;h3 id="cocnvim"&gt;coc.nvim 플러그인&amp;nbsp;설치&lt;/h3&gt;
&lt;p&gt;원래 목적인 coc.nvim 플러그인을 설치하자.&lt;br&gt;
vim에서 명령을&amp;nbsp;날린다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;CocInstall&lt;/span&gt; &lt;span class="n"&gt;coc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;환경&amp;nbsp;끝.&lt;/p&gt;
&lt;h2 id="idea"&gt;&lt;span class="caps"&gt;IDEA&lt;/span&gt;&lt;/h2&gt;
&lt;h3 id="clion"&gt;CLion&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CLion을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;li&gt;Rust 플러그인을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;li&gt;Rust를 가지고서&amp;nbsp;개발한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;환경&amp;nbsp;끝.&lt;/p&gt;</content><category term="rust"></category><category term="rustup"></category><category term="develop"></category><category term="env"></category></entry><entry><title>Task 실행 라이브러리 - Invoke</title><link href="https://ujuc.github.io/2019/07/21/task_sir-haeng_ra-i-beu-reo-ri_-_invoke/" rel="alternate"></link><published>2019-07-21T16:20:49+09:00</published><updated>2019-07-21T16:20:49+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-07-21:/2019/07/21/task_sir-haeng_ra-i-beu-reo-ri_-_invoke/</id><summary type="html">&lt;p&gt;Task 실행 라이브러리인 &lt;code&gt;Invoke&lt;/code&gt;를&amp;nbsp;확인한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican 에서 Makefile를 이용해서 빌드하고 있었는데.&lt;br&gt;
4.0.0 버전으로 올라오면서 &lt;code&gt;Invoke&lt;/code&gt; 라이브러리를 사용하게 되었음을 확인.&lt;br&gt;
그러니&amp;nbsp;사용해봐야징&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pyinvoke.org/"&gt;Home&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-invoke"&gt;What is&amp;nbsp;Invoke?&lt;/h2&gt;
&lt;p&gt;Python (2.7, 3.4+) 태스크 실행 툴이자&amp;nbsp;라이브러리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[tasks.py](http://tasks.py)&lt;/code&gt; 파일에 태스크를 명시하여 진행&lt;ul&gt;
&lt;li&gt;물론 &lt;code&gt;tasks/*.py&lt;/code&gt; 형식으로 만들어서 정의할 수도&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Make 처럼, 명령을 나열할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ invoke clean build
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="caps"&gt;REPL&lt;/span&gt; 쪽에서 사용이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unix &lt;span class="caps"&gt;CLI&lt;/span&gt; 와 같이 flag-based style 명령어를 만들 수 있다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ab&lt;/code&gt; , &lt;code&gt;-d&lt;/code&gt; 이런거&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tasks.py&lt;/code&gt; - &lt;a href="https://github.com/ujuc/ujuc.github.io/blob/develop/tasks.py"&gt;ujuc.github.io -&amp;nbsp;tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CONF_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelicanconf.py&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PUBLISH_CONF_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;publishconf.py&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Start preview web page server&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -s {CONF_FILE}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Clean up this dir&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rm -rf {OUTPUT_PATH} {BASE_PATH}/__pycache__ {BASE_PATH}/cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Publish to github main page&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -s {PUBLISH_CONF_FILE}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ghp-import -m &amp;#39;Generate Pelican site&amp;#39; -b master {OUTPUT_PATH}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git push origin master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Execute black&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black -l 80 .&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목록은&amp;nbsp;이렇게&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ inv --list

Available tasks:

  clean     Clean up this dir
  fix       Execute black
  preview   Start preview web page server
  pub       Publish to github main page
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;help는&amp;nbsp;이렇게&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ inv pub -h

Usage: inv&lt;span class="o"&gt;[&lt;/span&gt;oke&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;--core-opts&lt;span class="o"&gt;]&lt;/span&gt; pub &lt;span class="o"&gt;[&lt;/span&gt;other tasks here ...&lt;span class="o"&gt;]&lt;/span&gt;

Docstring:
  Publish to github main page

Options:
  none
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;자세한건 &lt;a href="http://docs.pyinvoke.org/en/stable"&gt;Docs&lt;/a&gt; 에서 읽어가면서&amp;nbsp;확인&lt;/p&gt;</content></entry><entry><title>Pelican 4.1.0 Release Note</title><link href="https://ujuc.github.io/2019/07/21/pelican_4.1.0_release_note/" rel="alternate"></link><published>2019-07-21T15:23:10+09:00</published><updated>2019-07-21T15:23:10+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-07-21:/2019/07/21/pelican_4.1.0_release_note/</id><summary type="html">&lt;p&gt;pelican 4.1.0 이 업글이&amp;nbsp;되었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;블로그 정리하다가 업그레이드가 된 걸&amp;nbsp;알았다.&lt;/p&gt;
&lt;h3 id="410-2019-07-14"&gt;&lt;a href="https://docs.getpelican.com/en/stable/changelog.html#id1"&gt;4.1.0 -&amp;nbsp;2019-07-14&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;변경된 파일이 있으면 reload 가능 (Invoke 태스크를 통해 제공됨)&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/tools/templates/tasks.py.jinja2#L93"&gt;github - &lt;code&gt;task.py.jinja2&lt;/code&gt;&lt;/a&gt; 에서 확인하면 &lt;code&gt;livereload&lt;/code&gt; 패키지를 사용하여 새롭게 띄울 수 있도록 작업을&amp;nbsp;해뒀다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Poetry를 사용하여 패키지 관리&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; 를 이용하게&amp;nbsp;됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m pelican&lt;/code&gt; 형태로 호출 가능&lt;ul&gt;
&lt;li&gt;env 환경에서&amp;nbsp;굳이&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;콘텐츠 상대 소스 경로 속성&amp;nbsp;추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt; 디렉토리&amp;nbsp;허용&lt;/li&gt;
&lt;li&gt;템플릿에서 사용 가능한 &lt;code&gt;all_articles&lt;/code&gt; 변수가 추가됨.&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.getpelican.com/en/stable/themes.html?highlight=all_articles#common-variables"&gt;Common variables&lt;/a&gt; 항목 확인&amp;nbsp;가능&lt;/li&gt;
&lt;li&gt;최근 소식 전달을 위한 기능&amp;nbsp;용&amp;hellip;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디버그 모드에서 출력 화면&amp;nbsp;향상&lt;/li&gt;
&lt;li&gt;Atom 피드에서 비었거나 중복된 summary 항목&amp;nbsp;삭제&lt;/li&gt;
&lt;li&gt;페이지네이션, pelican-import, pelican-quickstart, 피드 임포터 버그&amp;nbsp;수정&lt;/li&gt;
&lt;/ul&gt;</content><category term="pelican"></category><category term="static blogging tools"></category><category term="python"></category></entry><entry><title>Docker container 사용자 설정</title><link href="https://ujuc.github.io/2019/05/25/docker_container_sa-yong-ja_seor-jeong/" rel="alternate"></link><published>2019-05-25T12:38:45+09:00</published><updated>2019-05-25T12:38:45+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-05-25:/2019/05/25/docker_container_sa-yong-ja_seor-jeong/</id><summary type="html">&lt;p&gt;Docker container를 사용할때 발생한 에러에 대해서&amp;nbsp;작성하였다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;회사에서 개발한 소스들을 Docker 이미지를 만들어서 ubuntu 18.04에서 작업을 할 수 있도록 구성을&amp;nbsp;했다.&lt;/p&gt;
&lt;p&gt;인프라 작업을 하고 있지만, OS나 인프라는 매번 내가 생각했던 대로 잘 안&amp;nbsp;해준다.&lt;/p&gt;
&lt;p&gt;이번에도 에러가&amp;nbsp;났다&amp;hellip;&lt;/p&gt;
&lt;h3 id="_1"&gt;문제&lt;/h3&gt;
&lt;p&gt;실행중인 Docker container에 접속해서 그 폴더를 사용하는 스크립트를 만든 다음 실행하였더니 Docker container에서 mount 해서 사용하는 볼륨 권한&amp;nbsp;문제.&lt;/p&gt;
&lt;p&gt;폴더에 접근할 방법이&amp;nbsp;없단다.&lt;/p&gt;
&lt;p&gt;Docker container에서 사용하는 사용자는 root. 이 root는 패이크 루트라서 GID는 호스트의 root와 동일하지만, container에서만 root이지 실제로 호스트에서는 제대로 작동하지&amp;nbsp;않는다.&lt;/p&gt;
&lt;p&gt;해당 내용을 다른 분들에게 물었더니 그 폴더 권한을 &lt;code&gt;0777&lt;/code&gt; 로 변경해서 작업을 하라고 해서&amp;nbsp;기각.&lt;/p&gt;
&lt;p&gt;어떤 넘이 어떻게 들어올 줄 모르는데 모든 걸&amp;nbsp;열라니!!!&lt;/p&gt;
&lt;h3 id="_2"&gt;해결&lt;/h3&gt;
&lt;p&gt;그래서 딴짓을&amp;nbsp;했다.&lt;/p&gt;
&lt;p&gt;우선 호스트에서 필요한 dir을 생성했다. → 그러면 해당 폴더의 &lt;code&gt;gid&lt;/code&gt;와 &lt;code&gt;uid&lt;/code&gt;는 호스트 사용자의 &lt;code&gt;uid/gid&lt;/code&gt;를 사용하게&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;그리고 Docker에게서 새로운 사용자를 만들고 그에게 호스트 사용자와 동일한 &lt;code&gt;gid/uid&lt;/code&gt; 를 가질 수 있도록&amp;nbsp;하였다.&lt;/p&gt;
&lt;p&gt;이건 Ubuntu에 하나의 유저만 있는 상태에서 가능한 설정이다. 만약 호스트에서 여러 사용자를 만들어서 사용한다면, 이 설정은 힘들다. &lt;code&gt;gid/uid&lt;/code&gt;가 다를 수 있다. Container 에서의 사용자는 root이외에 &lt;code&gt;www-data&lt;/code&gt; 와 같은 시스템 User 등급만 있지 실제 User 등급은 없어서 &lt;code&gt;gid : 1000&lt;/code&gt;, &lt;code&gt;uid : 1000&lt;/code&gt;을&amp;nbsp;가져가게된다.&lt;/p&gt;
&lt;p&gt;다른 사용자가 있다면&amp;hellip; 다른 작업을 하도록&amp;nbsp;하자.&lt;/p&gt;
&lt;p&gt;뒤지다 뒤지다 발견한 하나의&amp;nbsp;글.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://codeyarns.com/2017/07/21/how-to-set-user-of-docker-container/"&gt;How to set user of Docker&amp;nbsp;container&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 글의 문제점은 Docker다. 난 Docker-compose를 사용하고 있어서 다른 작업이&amp;nbsp;필요했다.&lt;/li&gt;
&lt;li&gt;내 생각에는 이 옵션에 대한 Docker-compose 옵션이 있을 꺼라 생각하는데. 나중에 다른 작업할때&amp;nbsp;찾아봐야겠다.&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="container"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>Docker Image 옮기기 (without DockerHub)</title><link href="https://ujuc.github.io/2019/05/18/docker_image_orm-gi-gi_(without_dockerhub)/" rel="alternate"></link><published>2019-05-18T11:59:45+09:00</published><updated>2019-05-18T11:59:45+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-05-18:/2019/05/18/docker_image_orm-gi-gi_(without_dockerhub)/</id><summary type="html">&lt;p&gt;반강제 폐쇄망에 이미지를&amp;nbsp;올리자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;외부로 나가서는 안되는 Docker 이미지를 만들게 되었다. 그러다보니 Docker Hub를 사용하거나 &lt;span class="caps"&gt;AWS&lt;/span&gt; ECR을 사용하는건&amp;nbsp;제외. &lt;/p&gt;
&lt;p&gt;개발 과정에서 실제 OS에서 작동하는지 확인을 위한것이라 올리고 인증하고&amp;nbsp;귀찮다.&lt;/p&gt;
&lt;p&gt;뭘로 검색했는지는 기억이 없지만 다음과 같은 글을 확인했고, 다음과 같은 명령을 사용하면 인터넷이나 Docker 레포없이 작업이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;출처: &lt;a href="https://stackoverflow.com/questions/23935141/how-to-copy-docker-images-from-one-host-to-another-without-using-a-repository"&gt;How to copy Docker images from one host to another without using a&amp;nbsp;repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 로컬에서 Docker 이미지를 빌드한다. 명령어는 알꺼니&amp;nbsp;넘어가자.&lt;/p&gt;
&lt;p&gt;다름 명령을 이용해서 tar 파일을&amp;nbsp;만들자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker save -o &amp;lt;path &lt;span class="k"&gt;for&lt;/span&gt; generated tar file&amp;gt; &amp;lt;imange name&amp;gt;:&amp;lt;tag&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;만들어진 tar 파일을 원하는 곳에 업로드&amp;nbsp;시킨다.&lt;/p&gt;
&lt;p&gt;이제 올린 노드에서 사용할 수 있도록 이미지를 docker에 등록해주면&amp;nbsp;끝.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker load -i &amp;lt;path to image tar file&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_1"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/save/"&gt;docker&amp;nbsp;save&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/engine/reference/commandline/load/"&gt;docker&amp;nbsp;load&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="docker"></category><category term="docker image"></category></entry><entry><title>Boilerplate shell scripts template 글 소개</title><link href="https://ujuc.github.io/2019/03/19/boilerplate_shell_scripts_template_geur_so-gae/" rel="alternate"></link><published>2019-03-19T06:59:31+09:00</published><updated>2019-03-19T06:59:31+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-03-19:/2019/03/19/boilerplate_shell_scripts_template_geur_so-gae/</id><summary type="html">&lt;p&gt;간단한 shell 스크립트를 template으로 만들어둔 것이 있어&amp;nbsp;소개한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://natelandau.com/boilerplate-shell-script-template/"&gt;Boilerplate Shell Script&amp;nbsp;Template&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;번역을 하려고 5개월전에 리플을 달아뒀었는데. 번역은 안된다는 답변이&amp;nbsp;왔다.&lt;/p&gt;
&lt;p&gt;그래서 그냥 소개 하는 것으로&amp;nbsp;대체한다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/natelandau/shell-scripts"&gt;natelandau/shell-scripts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;업데이트가 되지 않고 있고, 설정이 잘못된 부분이 있을 수 있다지만. 그래도 처음 Shell 접근하면서 필요한 내용들은 존재한다. 읽어보고 취사 선택하기 좋은&amp;nbsp;repo.&lt;/p&gt;
&lt;p&gt;해당 소스를 작성자가 목표로 삼은 것은&amp;nbsp;4가지.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Architect a&amp;nbsp;framework&lt;/li&gt;
&lt;li&gt;Focus on&amp;nbsp;simplicity&lt;/li&gt;
&lt;li&gt;Build to my own&amp;nbsp;needs&lt;/li&gt;
&lt;li&gt;Comment and document the&amp;nbsp;code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;동일한 사람이 작성한 &lt;a href="https://natelandau.com/bash-scripting-utilities/"&gt;Bash Shell Scripting Utilities&lt;/a&gt; 도&amp;nbsp;좋다.&lt;/p&gt;</content><category term="shell"></category><category term="template"></category><category term="boilerplate"></category></entry><entry><title>[번역] PSR-2: Coding Style Guide</title><link href="https://ujuc.github.io/2019/02/05/psr-2:_coding_style_guide/" rel="alternate"></link><published>2019-02-05T02:02:45+09:00</published><updated>2019-03-23T16:45:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-02-05:/2019/02/05/psr-2:_coding_style_guide/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-2, 코딩 스타일 가이드. &lt;span class="caps"&gt;PSR&lt;/span&gt;-1 내용에서 확장하여 정리하고&amp;nbsp;있다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.php-fig.org/psr/psr-2/"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-2: Coding Style Guide - &lt;span class="caps"&gt;PHP&lt;/span&gt;-&lt;span class="caps"&gt;FIG&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이 가이드는 기본 코딩 표준인 &lt;span class="caps"&gt;PSR&lt;/span&gt;-1을 확장하여&amp;nbsp;설명합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide extends and expands on &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1&lt;/a&gt;, the basic coding&amp;nbsp;standard.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 가이드의 목표는 다른 개발자가 코드를 읽을 때, 인지 마찰을 줄이는 것입니다. 그 방법으로 &lt;span class="caps"&gt;PHP&lt;/span&gt; 코드 형식을 지정하는 방법에 대한 규칙과 예외 사항을 열거하는&amp;nbsp;것입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The intent of this guide is to reduce cognitive friction when scanning code from different authors. It does so by enumerating a shared set of rules and expectations about how to format &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 스타일 규칙들은 여러 커뮤니티 회원들의 프로젝트들 간의 공통점을 정리하였습니다. 다양한 개발자들이 여러 프로젝트에서 공통 작업을 할 때, 모든 프로젝트에서 사용하는 묶음 지침을 사용하는 것이 편합니다. 따라서 이 가이드의 좋은 점은 규칙 자체가 아니라 이 규칙들을 공유하는 것에 의의를&amp;nbsp;둡니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The style rules herein are derived from commonalities among the various member projects. When various authors collaborate across multiple projects, it helps to have one set of guidelines to be used among all those projects. Thus, the benefit of this guide is not in the rules themselves, but in the sharing of those&amp;nbsp;rules.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 문서에서 사용하는 키워드 &amp;ldquo;&lt;span class="caps"&gt;MUST&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;REQUIRED&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHALL&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHALL&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHOULD&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;RECOMMENDED&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;MAY&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;&amp;rdquo;은 &lt;a href="https://techhtml.github.io/rfc/RFC2119.html"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119&lt;/a&gt;에서 설명하는 대로&amp;nbsp;해석한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key words “&lt;span class="caps"&gt;MUST&lt;/span&gt;”, “&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;REQUIRED&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;SHOULD&lt;/span&gt;”,“&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;RECOMMENDED&lt;/span&gt;”, “&lt;span class="caps"&gt;MAY&lt;/span&gt;”, and “&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;” in this document are to be interpreted as described in &lt;a href="http://www.ietf.org/rfc/rfc2119.txt"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="1"&gt;1.&amp;nbsp;개요&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 코드는 &lt;span class="caps"&gt;PSR&lt;/span&gt; &amp;ldquo;코딩 스타일 가이드&amp;rdquo; [&lt;span class="caps"&gt;PSR&lt;/span&gt;-1]에&amp;nbsp;따릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code &lt;span class="caps"&gt;MUST&lt;/span&gt; follow a “coding style guide” &lt;span class="caps"&gt;PSR&lt;/span&gt; [&lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1&lt;/a&gt;].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 코드는 인던트를 스페이스 4를 사용합니다. 탭을 사용하지&amp;nbsp;않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code &lt;span class="caps"&gt;MUST&lt;/span&gt; use 4 spaces for indenting, not&amp;nbsp;tabs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 줄 길이에 대한 엄격한 제한이 있어서는 안 됩니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 가벼운 제한은 반드시 120자여야 합니다; [&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 라인의 길이는 80자 이하여야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a hard limit on line length; the soft limit &lt;span class="caps"&gt;MUST&lt;/span&gt; be 120 characters; lines &lt;span class="caps"&gt;SHOULD&lt;/span&gt; be 80 characters or&amp;nbsp;less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;namespace&lt;/code&gt; 선언 다음에는 빈 줄이 하나 있어야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;use&lt;/code&gt; 선언한 블록 다음에는 빈 줄이 하나 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; be one blank line after the &lt;code&gt;namespace&lt;/code&gt; declaration, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be one blank line after the block of &lt;code&gt;use&lt;/code&gt; declarations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클래스 여는 중괄호는 반드시 다음 줄로 가야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 중괄호는 본문 뒤에 오는 다음 줄로 가야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opening braces for classes &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line, and closing braces &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line after the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 메서드를 여는 중괄호는 반드시 다음 줄로 가야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 중괄호는 반드시 본문 맨 끝에서 다음 줄로 가야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opening braces for methods &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line, and closing braces &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line after the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 가시성 (Visibility)는 모든 속성과 메서드에서 반드시 선언되어야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;abstract&lt;/code&gt; 와 &lt;code&gt;final&lt;/code&gt; 은 가시성 이전에 반드시 선언되어야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;static&lt;/code&gt; 은 반드시 가시성 뒤에 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Visibility &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared on all properties and methods; &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared before the visibility; &lt;code&gt;static&lt;/code&gt; &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared after the&amp;nbsp;visibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 제어 구조 키워드 뒤에는 반드시 공백을 가져야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 메서드와 펑션 사용할 때는 공백을 추가해서는&amp;nbsp;안됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Control structure keywords &lt;span class="caps"&gt;MUST&lt;/span&gt; have one space after them; method and function calls &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 제어 구조에서 여는 중괄호는 반드시 같은 줄에 있어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 괄호는 반드시 본문 뒤의 다음 줄로 가야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opening braces for control structures &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the same line, and closing braces &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line after the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 제어 구조에서 여는 괄호 뒤에는 공백이 없어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 제어 구조에서 닫는 괄호 전에는 공백이 없어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opening parentheses for control structures &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; have a space after them, and closing parentheses for control structures &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; have a space&amp;nbsp;before.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="11"&gt;1.1&amp;nbsp;예제&lt;/h2&gt;
&lt;p&gt;아래의 예는 위의 규칙 중 일부를 간략하게&amp;nbsp;설명합니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This example encompasses some of the rules below as a quick&amp;nbsp;overview:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;FooInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;BarClass&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;FooInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;sampleMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;BazClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// method body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="2"&gt;2. 일반적인&amp;nbsp;것들&lt;/h1&gt;
&lt;h2 id="21"&gt;2.1. 기본 코딩&amp;nbsp;표준&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 코드는 반드시 &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1&lt;/a&gt;에 표기된 모든 규칙을 따라야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code &lt;span class="caps"&gt;MUST&lt;/span&gt; follow all rules outlined in &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="22"&gt;2.2.&amp;nbsp;파일&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 모든 &lt;span class="caps"&gt;PHP&lt;/span&gt; 파일은 반드시 Unix &lt;span class="caps"&gt;LF&lt;/span&gt; (linefeed) 줄 끝 문자를 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All &lt;span class="caps"&gt;PHP&lt;/span&gt; files &lt;span class="caps"&gt;MUST&lt;/span&gt; use the Unix &lt;span class="caps"&gt;LF&lt;/span&gt; (linefeed) line&amp;nbsp;ending.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 모든 &lt;span class="caps"&gt;PHP&lt;/span&gt; 파일은 반드시 하나의 빈 줄로 끝나야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All &lt;span class="caps"&gt;PHP&lt;/span&gt; files &lt;span class="caps"&gt;MUST&lt;/span&gt; end with a single blank&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 태그인 &lt;code&gt;?&amp;gt;&lt;/code&gt; 태그는 PHP만 포함된 파일에서는 생각해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The closing &lt;code&gt;?&amp;gt;&lt;/code&gt; tag &lt;span class="caps"&gt;MUST&lt;/span&gt; be omitted from files containing only &lt;span class="caps"&gt;PHP&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="23"&gt;2.3.&amp;nbsp;줄&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 라인 길이에는 엄격한 제한이 있어서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a hard limit on line&amp;nbsp;length.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 줄 길이에 대한 가벼운 제한은 120자입니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 자동화된 스타일 체커는 반드시 경고해야 합니다만 [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 가벼운 제한을 오류로 표현해서는&amp;nbsp;안됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The soft limit on line length &lt;span class="caps"&gt;MUST&lt;/span&gt; be 120 characters; automated style checkers &lt;span class="caps"&gt;MUST&lt;/span&gt; warn but &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; error at the soft&amp;nbsp;limit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOLD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 행은 80자를 넘지 않아야 합니다; [&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 그보다 긴 행은 각각 80자 이하의 여러 행으로 나눠야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lines &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be longer than 80 characters; lines longer than that &lt;span class="caps"&gt;SHOULD&lt;/span&gt; be split into multiple subsequent lines of no more than 80 characters&amp;nbsp;each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 비어 있지 않은 줄 끝에는 공백 문자가 없어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be trailing whitespace at the end of non-blank&amp;nbsp;lines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] 가독성을 높이고 관련 코드 블록을 나타내기 위해 빈 줄을 추가할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Blank lines &lt;span class="caps"&gt;MAY&lt;/span&gt; be added to improve readability and to indicate related blocks of&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 한 줄에 하나 이상의 문장이 있어서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be more than one statement per&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="24"&gt;2.4.&amp;nbsp;들여쓰기&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 코드는 반드시 4개의 스페이스로 들여 쓰기를 허용해야 하며, [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 들여 쓰기에 탭을 사용하지 않아야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code &lt;span class="caps"&gt;MUST&lt;/span&gt; use an indent of 4 spaces, and &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; use tabs for&amp;nbsp;indenting.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;주의하세요: 탭과 스페이스를 섞어 쓰지 않고 스페이스만 사용한다면, diff, 패치, 이력, 주석에서 발생하는 문제를 피할 수 있습니다. 스페이스를 이용하면 행간 정렬을 위해 세분화된 하위 들여 쓰기를 쉽게 추가할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;N.b.: Using only spaces, and not mixing spaces with tabs, helps to avoid problems with diffs, patches, history, and annotations. The use of spaces also makes it easy to insert fine-grained sub-indentation for inter-line&amp;nbsp;alignment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="25-truefalsenull"&gt;2.5. 키워드와&amp;nbsp;True/False/Null&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;span class="caps"&gt;PHP&lt;/span&gt; &lt;a href="http://php.net/manual/en/reserved.keywords.php"&gt;키워드&lt;/a&gt;는 반드시 소문자로&amp;nbsp;표기합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; &lt;a href="http://php.net/manual/en/reserved.keywords.php"&gt;keywords&lt;/a&gt; &lt;span class="caps"&gt;MUST&lt;/span&gt; be in lower&amp;nbsp;case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;span class="caps"&gt;PHP&lt;/span&gt; 상수인 &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; 은 반드시 소문자로&amp;nbsp;표기합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;span class="caps"&gt;PHP&lt;/span&gt; constants &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt; &lt;span class="caps"&gt;MUST&lt;/span&gt; be in lower&amp;nbsp;case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="3-namespace"&gt;3. Namespace와 사용&amp;nbsp;선언&lt;/h1&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] Namespace가 존재하는 경우, &lt;code&gt;namespace&lt;/code&gt; 정의된 다음에 한 줄은 비워 둬야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When present, there &lt;span class="caps"&gt;MUST&lt;/span&gt; be one blank line after the &lt;code&gt;namespace&lt;/code&gt; declaration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] Namespace가 존재하는 경우, &lt;code&gt;namespace&lt;/code&gt; 정의된 이후 라인에 모든 &lt;code&gt;use&lt;/code&gt; 가 정의되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When present, all &lt;code&gt;use&lt;/code&gt; declarations &lt;span class="caps"&gt;MUST&lt;/span&gt; go after the &lt;code&gt;namespace&lt;/code&gt; declaration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;use&lt;/code&gt; 키워드는 정의마다 하나씩 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; be one &lt;code&gt;use&lt;/code&gt; keyword per&amp;nbsp;declaration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;use&lt;/code&gt; 블록 다음에 한 줄을 비워 둬야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; be one blank line after the &lt;code&gt;use&lt;/code&gt; block.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를&amp;nbsp;들어:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For&amp;nbsp;example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;namesapce&lt;/span&gt; &lt;span class="nx"&gt;Vender\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;FooClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;BarClass&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;OhterVender\OtherPackage\BazClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ... additinal PHP code ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="4"&gt;4. 클래스, 속성,&amp;nbsp;메서드&lt;/h1&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;class&amp;rdquo;라는 용어는 모든 클래스, 인터페이스, 특성을&amp;nbsp;나타냅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The term “class” refers to all classes, interfaces, and&amp;nbsp;traits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="41"&gt;4.1. 확장과&amp;nbsp;구현&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;extends&lt;/code&gt; 와 &lt;code&gt;implements&lt;/code&gt; 키워드는 클래스 이름과 같은 줄에서 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;implements&lt;/code&gt; keywords &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared on the same line as the class&amp;nbsp;name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 해당 클래스를 여는 중괄호는 홀로 다음 줄에 있어야 합니다; [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클래스 닫는 중괄호는 본문 끝 다음 줄에 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The opening brace for the class &lt;span class="caps"&gt;MUST&lt;/span&gt; go on its own line; the closing brace for the class &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line after the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;FooClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;BarClass&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ParentClass&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;\ArrayAccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;\Countable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// constants, properties, methods&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] &lt;code&gt;implements&lt;/code&gt; 목록은 여러 줄에 걸쳐 나눠질 수 있으며, 각 줄은 한 번만 들여 써질 수 있습니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 그렇게 표현할 때, 목록의 첫 번째 항목은 다음 줄에 있어야 하며, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 한 줄에 하나의 인터페이스만 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lists of &lt;code&gt;implements&lt;/code&gt; &lt;span class="caps"&gt;MAY&lt;/span&gt; be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list &lt;span class="caps"&gt;MUST&lt;/span&gt; be on the next line, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be only one interface per&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;FooClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;BarClass&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;ParentClass&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt;&lt;span class="nx"&gt;\ArrayAccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;\Countable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;\Serializable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// constants, properties, methods&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="42"&gt;4.2.&amp;nbsp;속성&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 모든 속성에서 가시성을 반드시 선언해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Visibility &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared on all&amp;nbsp;properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 속성을 선언하는데 &lt;code&gt;var&lt;/code&gt; 키워드를 사용하면 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be used to declare a&amp;nbsp;property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 명령문마다 하나 이상의 속성이 선언해서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be more than one property declared per&amp;nbsp;statement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] protected 나 private 가시성을 나타내기 위해 &lt;code&gt;_&lt;/code&gt; 로 속성 이름을 시작하면 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Property names &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be prefixed with a single underscore to indicate protected or private&amp;nbsp;visibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;속성 선언은 다음과&amp;nbsp;같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A property declaration looks like the&amp;nbsp;following.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="43"&gt;4.3.&amp;nbsp;메서드&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 모든 메서드는 가시성을 선언해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Visibility &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared on all&amp;nbsp;methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] protected 나 private 가시성을 나타내기 위해 &lt;code&gt;_&lt;/code&gt; 로 메서드 이름을 시작하면 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Method names &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be prefixed with a single underscore to indicate protected or private&amp;nbsp;visibility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 메서드 이름 뒤에 스페이스를 추가해서는 안 됩니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 여는 중괄호는 반드시 메서드 선언 다음 줄에 있어야 하고, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 중괄호는 그 다음 줄에 있어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 여는 중괄호 뒤에 스페이스가 있어서 안되며, [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 닫는 괄호 앞에 스페이스가 있어서는&amp;nbsp;안됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Method names &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be declared with a space after the method name. The opening brace &lt;span class="caps"&gt;MUST&lt;/span&gt; go on its own line, and the closing brace &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line following the body. There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space after the opening parenthesis, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before the closing&amp;nbsp;parenthesis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;메서드 선언은 다음과 같습니다. 괄호, 쉼표, 스페이스, 중괄호의 배치에 조심해서&amp;nbsp;사용합니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A method declaration looks like the following. Note the placement of parentheses, commas, spaces, and&amp;nbsp;braces:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;fooBarBaz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// method body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="44"&gt;4.4. 메서드&amp;nbsp;인수&lt;/h2&gt;
&lt;p&gt;인수 목록에서는 [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 쉼표 앞에 공백이 있으면 됩니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;]  쉼표 뒤에 공백을 두어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the argument list, there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before each comma, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be one space after each&amp;nbsp;comma.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 기본 값을 가진 메서드 인수는 인수 목록의 마지막에 위치해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Method arguments with default values &lt;span class="caps"&gt;MUST&lt;/span&gt; go at the end of the argument&amp;nbsp;list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// method body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] 인수 목록은 여러 줄에 걸쳐 나눌 수 있으며, 각 줄은 한 번만 들여 쓰기 할 수 있습니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 여러 줄로 나눠 표기할 때는 첫 번째 항목은 다음 줄에 있어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 한 줄에 하나의 인수만 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Argument lists &lt;span class="caps"&gt;MAY&lt;/span&gt; be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list &lt;span class="caps"&gt;MUST&lt;/span&gt; be on the next line, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be only one argument per&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 인수 목록이 여러 줄에 걸쳐 분할되어 있으면, 닫는 괄호와 여는 괄호는 스페이스 하나로 하나의 라인에 같이 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the argument list is split across multiple lines, the closing parenthesis and opening brace &lt;span class="caps"&gt;MUST&lt;/span&gt; be placed together on their own line with one space between&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;aVeryLongMethodName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;ClassTypeHint&lt;/span&gt; &lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$arg3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// method body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="45-abstract-final-static"&gt;4.5. abstract, final,&amp;nbsp;static&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;abstract&lt;/code&gt; 와 &lt;code&gt;final&lt;/code&gt; 선언은 가시성 선언 앞에 와야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When present, the &lt;code&gt;abstract&lt;/code&gt; and &lt;code&gt;final&lt;/code&gt; declarations &lt;span class="caps"&gt;MUST&lt;/span&gt; precede the visibility&amp;nbsp;declaration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;static&lt;/code&gt; 선언은 가시성 선언 뒤에 와야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When present, the &lt;code&gt;static&lt;/code&gt; declaration &lt;span class="caps"&gt;MUST&lt;/span&gt; come after the visibility&amp;nbsp;declaration.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Package&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClassName&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;zim&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// method body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="46"&gt;4.6. 메서드와 펑션&amp;nbsp;사용&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 메서드나 함수 호출을 할 경우, 메서드 상에 공백이 없어야 합니다. 또는 [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 함수 이름과 여는 괄호 뒤에는 공백이 있어서는 안 됩니다. 그리고 [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 닫는 괄호 앞에는 공백이 없어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 인수 목록에는 쉼표 앞에 공백이 있어서 안되며, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 쉼표 뒤에 공백이 와야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When making a method or function call, there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space between the method or function name and the opening parenthesis, there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space after the opening parenthesis, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before the closing parenthesis. In the argument list, there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before each comma, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be one space after each&amp;nbsp;comma.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] 인수 목록은 여러 줄에 걸쳐 나눠질 수 있으며, 각 줄은 한번 들여 쓰일 수 있습니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 이렇게 할&lt;br&gt;
 때 목록의 첫 번째 항목은 다음 줄에 있어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 한 줄에 하나의 인수만 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Argument lists &lt;span class="caps"&gt;MAY&lt;/span&gt; be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list &lt;span class="caps"&gt;MUST&lt;/span&gt; be on the next line, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be only one argument per&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="5"&gt;5.&amp;nbsp;제어문&lt;/h1&gt;
&lt;p&gt;제어문에 대한 일반적인 스타일 규칙은 다음과&amp;nbsp;같습니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The general style rules for control structures are as&amp;nbsp;follows:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 제어문 키워드 다음에 스페이스가 하나 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; be one space after the control structure&amp;nbsp;keyword&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 여는 괄호 뒤에 스페이스가 있어서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space after the opening&amp;nbsp;parenthesis&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 닫는 괄호 앞에 스페이스가 있어서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before the closing&amp;nbsp;parenthesis&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 괄호와 여는 중괄호 사이에 스페이스가 하나 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; be one space between the closing parenthesis and the opening&amp;nbsp;brace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 제어문 내부는 반드시 한번 들여 쓰기 해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The structure body &lt;span class="caps"&gt;MUST&lt;/span&gt; be indented&amp;nbsp;once&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 중괄호는 제어문이 끝나는 다음 줄에 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The closing brace &lt;span class="caps"&gt;MUST&lt;/span&gt; be on the next line after the&amp;nbsp;body&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 제어문 본체는 중괄호로 묶어야 합니다. 중괄호를 이용하여 제어문이 어떻게 보여줄지를 표준화하고, 개행이 되었을 때, 오류가 발생할 가능성을 줄여&amp;nbsp;줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The body of each structure &lt;span class="caps"&gt;MUST&lt;/span&gt; be enclosed by braces. This standardizes how the structures look, and reduces the likelihood of introducing errors as new lines get added to the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="51-if-elseif-else"&gt;5.1. if, elseif,&amp;nbsp;else&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; 문 구조는 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길 바랍니다. &lt;code&gt;else&lt;/code&gt; 와 &lt;code&gt;elseif&lt;/code&gt; 는 이전 문구의 닫는 중괄호와 같은 줄에&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An &lt;code&gt;if&lt;/code&gt; structure looks like the following. Note the placement of parentheses, spaces, and braces; and that &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;elseif&lt;/code&gt; are on the same line as the closing brace from the earlier&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// elseif body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// else body;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] &lt;code&gt;else if&lt;/code&gt; 대신 &lt;code&gt;elseif&lt;/code&gt; 키워드를 사용하여 모든 제어 키워드가 단일 단어처럼 보이도록 해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The keyword &lt;code&gt;elseif&lt;/code&gt; &lt;span class="caps"&gt;SHOULD&lt;/span&gt; be used instead of &lt;code&gt;else if&lt;/code&gt; so that all control keywords look like single&amp;nbsp;words.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="52-switch-case"&gt;5.2. switch,&amp;nbsp;case&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;switch&lt;/code&gt; 문의 구조는 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길 바랍니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;case&lt;/code&gt; 문은 &lt;code&gt;switch&lt;/code&gt; 보다 한번 들여 쓰기가 되어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;code&gt;break&lt;/code&gt; 키워드 (또는 다른 종료 키워드)는 &lt;code&gt;case&lt;/code&gt; 문과 같은 수준에서 들여 쓰기가 되어야 합니다. [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 비어 있지 않은 &lt;code&gt;case&lt;/code&gt; 문에서 다음 문으로 넘어가야 될 경우, &lt;code&gt;// no break&lt;/code&gt; 와 같은 주석이 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; structure looks like the following. Note the placement of parentheses, spaces, and braces. The &lt;code&gt;case&lt;/code&gt; statement &lt;span class="caps"&gt;MUST&lt;/span&gt; be indented once from &lt;code&gt;switch&lt;/code&gt;, and the &lt;code&gt;break&lt;/code&gt; keyword (or other terminating keyword) &lt;span class="caps"&gt;MUST&lt;/span&gt; be indented at the same level as the &lt;code&gt;case&lt;/code&gt; body. There &lt;span class="caps"&gt;MUST&lt;/span&gt; be a comment such as &lt;code&gt;// no break&lt;/code&gt; when fall-through is intentional in a non-empty &lt;code&gt;case&lt;/code&gt; body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;First case, with a break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Second case, which falls through&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// no break&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Third case, return instead of break&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Default case&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="53-while-do-while"&gt;&lt;strong&gt;5.3. while, do&amp;nbsp;while&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; 문은 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;while&lt;/code&gt; statement looks like the following. Note the placement of parentheses, spaces, and&amp;nbsp;braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// structure body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;마찬가지로 &lt;code&gt;do while&lt;/code&gt; 문은 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Similarly, a &lt;code&gt;do while&lt;/code&gt; statement looks like the following. Note the placement of parentheses, spaces, and&amp;nbsp;braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// structure body;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$expr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="54-for"&gt;&lt;strong&gt;5.4.&amp;nbsp;for&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; 문은 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;for&lt;/code&gt; statement looks like the following. Note the placement of parentheses, spaces, and&amp;nbsp;braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// for body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="55-foreach"&gt;&lt;strong&gt;5.5.&amp;nbsp;foreach&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;foreach&lt;/code&gt; 문은 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;foreach&lt;/code&gt; statement looks like the following. Note the placement of parentheses, spaces, and&amp;nbsp;braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$iterable&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// foreach body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="56-try-catch"&gt;&lt;strong&gt;5.6. try,&amp;nbsp;catch&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;try catch&lt;/code&gt; 블록은 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;try catch&lt;/code&gt; block looks like the following. Note the placement of parentheses, spaces, and&amp;nbsp;braces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// try body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FirstExceptionType&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// catch body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OtherExceptionType&lt;/span&gt; &lt;span class="nv"&gt;$e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// catch body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="6-closures"&gt;6.&amp;nbsp;Closures&lt;/h1&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클로저는 &lt;code&gt;function&lt;/code&gt; 키워드 뒤에 공백과 &lt;code&gt;use&lt;/code&gt; 키워드 앞뒤 공백으로 선언해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Closures &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared with a space after the &lt;code&gt;function&lt;/code&gt; keyword, and a space before and after the &lt;code&gt;use&lt;/code&gt; keyword.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 여는 중괄호는 반드시 같은 줄에 있어야 하며, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 닫는 중괄호는 반드시 그다음 줄에 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The opening brace &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the same line, and the closing brace &lt;span class="caps"&gt;MUST&lt;/span&gt; go on the next line following the&amp;nbsp;body.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 인수 목록이나 변수 목록에서의 여는 괄호 뒤에는 공백이 있어서는 안 되며, [&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 닫는 괄호 앞에서도 공백이 있어서는 안&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space after the opening parenthesis of the argument list or variable list, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before the closing parenthesis of the argument list or variable&amp;nbsp;list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 인수 목록과 변수 목록에 있는 쉼표 앞에는 스페이스가 있어서는 안되며, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 쉼표 뒤에 스페이스가 들어가야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the argument list and variable list, there &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; be a space before each comma, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be one space after each&amp;nbsp;comma.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 기본 값을 가진 클로저 인수는 인수 목록의 끝에&amp;nbsp;와야합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Closure arguments with default values &lt;span class="caps"&gt;MUST&lt;/span&gt; go at the end of the argument&amp;nbsp;list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클로저는 다음과 같습니다. 괄호, 공백, 중괄호의 위치를 유의해서 보시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A closure declaration looks like the following. Note the placement of parentheses, commas, spaces, and&amp;nbsp;braces:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$closureWithArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;$closureWithArgsAndVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$var1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$var2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] 인수 목록과 변수 목록은 여러 행에 걸쳐 나눠질 수 있습니다. (각 행은 한번 들여 쓰기가 들어가야 합니다.) 그렇게 할때, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 목록의 첫 번째 항목은 다음 줄에 있어야 하며, [&lt;span class="caps"&gt;MUST&lt;/span&gt;] 한 줄에 하나의 인수나 변수만 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Argument lists and variable lists &lt;span class="caps"&gt;MAY&lt;/span&gt; be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list &lt;span class="caps"&gt;MUST&lt;/span&gt; be on the next line, and there &lt;span class="caps"&gt;MUST&lt;/span&gt; be only one argument or variable per&amp;nbsp;line.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] (인수이거나 변수일때) 마지막 리스트가 여러 줄로 나눠질 경우, 닫는 괄호와 여는 중괄호는 같은 줄에 공백으로 나눠져 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the ending list (whether of arguments or variables) is split across multiple lines, the closing parenthesis and opening brace &lt;span class="caps"&gt;MUST&lt;/span&gt; be placed together on their own line with one space between&amp;nbsp;them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음은 인수 목록이 있거나 없는 클로저의 예와 여러 줄로 표현된 변수 목록에 대한&amp;nbsp;예제입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following are examples of closures with and without argument lists and variable lists split across multiple&amp;nbsp;lines.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$longArgs_noVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;$noArgs_longVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longVar1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerVar2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;$longArgs_longVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longVar1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerVar2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;$longArgs_shortVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nv"&gt;$shortArgs_longVars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$longVar1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$longerVar2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nv"&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// body&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;형식 지정 규칙은 함수 또는 메서드 호출에서 클로저가 직접 인수로 사용될 때에도&amp;nbsp;적용됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the formatting rules also apply when the closure is used directly in a function or method call as an&amp;nbsp;argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$foo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;$arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$var1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// body&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nv"&gt;$arg3&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="7-conclusion"&gt;7.&amp;nbsp;Conclusion&lt;/h1&gt;
&lt;p&gt;이 가이드에서 의도적으로 생략한 스타일과 연습해야 될 많은 요소들이 있습니다. 다음 내용들이 포함되지만 이 내용에 국한되지&amp;nbsp;않습니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are many elements of style and practice intentionally omitted by this guide. These include but are not limited&amp;nbsp;to:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전역 변수, 전역 상수&amp;nbsp;선언&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Declaration of global variables and global&amp;nbsp;constants&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;함수&amp;nbsp;선언&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Declaration of&amp;nbsp;functions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연산자와&amp;nbsp;할당자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Operators and&amp;nbsp;assignment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라인간&amp;nbsp;정렬&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Inter-line&amp;nbsp;alignment&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주석과 문서&amp;nbsp;블록&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Comments and documentation&amp;nbsp;blocks&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;클래스 이름 접두사와&amp;nbsp;접미사&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class name prefixes and&amp;nbsp;suffixes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모범&amp;nbsp;사례&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Best&amp;nbsp;practices&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MAY&lt;/span&gt;] 향후 권장 사항은 스타일이나 연습해야 될 많은 요소들을 다루기 위해 이 가이드를 수정하고 확장할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Future recommendations &lt;span class="caps"&gt;MAY&lt;/span&gt; revise and extend this guide to address those or other elements of style and&amp;nbsp;practice.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="php"></category><category term="psr"></category><category term="prs-2"></category><category term="transelate"></category></entry><entry><title>Adieu 2018, Bienvenue 2019</title><link href="https://ujuc.github.io/2018/12/28/adieu_2018,_bienvenue_2019/" rel="alternate"></link><published>2018-12-28T07:47:47+09:00</published><updated>2018-12-28T07:47:47+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-12-28:/2018/12/28/adieu_2018,_bienvenue_2019/</id><summary type="html">&lt;p&gt;2018년이&amp;nbsp;끝나감&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;2017년 작성했던&amp;nbsp;글&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ujuc.kr/adieu-2017-bienvenue-2018-2cb5ef44c708"&gt;Adieu 2017, Bienvenue 2018 - ujuc&amp;nbsp;thinks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;벌써 2019년이 다가오고 있어서&amp;nbsp;정리하자.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_1"&gt;하려고 했던&amp;nbsp;것&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;리눅스&amp;nbsp;자격증&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;진행을 하지 않았다. 그냥 하고 싶지 않았다고&amp;nbsp;할까&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SRE&lt;/span&gt; or&amp;nbsp;DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;커리어 방향에 대한 부분이다. 지금은 DevOps&amp;nbsp;쪽인&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일본&amp;nbsp;여행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;제대로 먹지 못했다. 이게 가장 큰&amp;nbsp;이유&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여유 있는&amp;nbsp;삶&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;최대한 저녁에 시간을 내어 작업을 진행했었으나, 이제는 아침으로 바꾸려고 한다. 저녁에 시간을 만들면 새벽 늦게 자서 그다음 날 아침에 빌빌대고&amp;nbsp;있었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기록&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기록을 그렇게 꼼꼼하게 하지 못하였다. 추가로 &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt;을 사용하면서 일정이나 내가 보는 것들을 꾸준히 써가고 있다. 온라인 메모와 같이 오프라인 메모도 같이 작성&amp;nbsp;중이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_list" src="https://ujuc.github.io/img/2018-12-28/blog_list.png"&gt;&lt;/p&gt;
&lt;p&gt;블로그 글은 14개의 글&amp;nbsp;작성.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="2018"&gt;2018년 하였던&amp;nbsp;일&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;오사카&amp;nbsp;여행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이번엔 여름에 오사카를 갔다 왔다. 뭔가 많이 보려고 노력했었는데도 그렇게 많은 곳을 돌아보고 오지&amp;nbsp;못했다.&lt;/p&gt;
&lt;p&gt;가장 좋았던 건 오사카 &lt;a href="https://www.kaiyukan.com/language/korean/"&gt;가이유칸 수족관&lt;/a&gt; 가장 큰 태평양 수족에서 두 시간은 멍하게 바라보고 있었던&amp;nbsp;듯&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제&amp;nbsp;스터디&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;운영체제 책을 읽다가 혼자서는 도저히 힘들어서 같이 읽자고 말했으나&amp;hellip; 멤버 참여가 저조하여 흐지부지~ 내년에는 나 혼자라도&amp;nbsp;읽어야겠다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;오픈 인프라&amp;nbsp;데이&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;올해부터 OpenStack Days가 오픈 인프라 데이로 이름을 변경하고 OpenStack 관련은 하루만으로 줄였다. 나머지 하루는 인프라 관련 발표들이었는데. 전부 Kube. OpenStack은 인프라 단으로 내려가 더 이상 새로운 기술이 아닌 걸로 되고 그위에서 작동하는 애플리케이션을 어떤 것들을 사용해서 구축, 운영할 것인가가 나온&amp;nbsp;듯.&lt;/p&gt;
&lt;p&gt;Kube의 다음번은&amp;nbsp;어디로?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go lang&amp;nbsp;공부&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go lang을 공부하고 싶었는데. 거금 들여 지른 &lt;a href="https://www.safaribooksonline.com"&gt;safaribooks&lt;/a&gt; 에서 가장 최근 책을 하나 잡아서 예제와 문재를 한장씩 풀어나가고 있다. 중간에 일에 치여서 제대로 못한 것도 있지만 한번 끝까지 읽어나가 보려고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ujuc/get-programming-with-go"&gt;ujuc/get-programming-with-go&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;번역&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;정작 OpenStack 번역은 얼마 못한&amp;nbsp;듯.&lt;/p&gt;
&lt;p&gt;&lt;img alt="zanata_activity" src="https://ujuc.github.io/img/2018-12-28/zanata_activity.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://translate.openstack.org/profile/view/ujuc?dswid=5951"&gt;Zanata:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;다른 번역한&amp;nbsp;것들&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/iamkun/dayjs/pull/206"&gt;Add Korean locale by ujuc · Pull Request #206 ·&amp;nbsp;iamkun/dayjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/toml-lang/toml/pull/575"&gt;Append the korean translation of v0.5.0 by ujuc · Pull Request #575 ·&amp;nbsp;toml-lang/toml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ujuc.github.io/2018/05/24/design_of_ql/"&gt;잘 밤에 쓸데없는 생각하기&amp;hellip; - Design&amp;nbsp;of&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ujuc.github.io/2018/11/17/psr-1:_basic_coding_standard/"&gt;잘 밤에 쓸데없는 생각하기&amp;hellip;&amp;nbsp;-&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이직&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;9월까지 작년에 다녔던 회사를 그만두고, 10월에 새로운 회사로&amp;nbsp;이직.&lt;/p&gt;
&lt;p&gt;인프라를 담당하지만 모든 잡무를 담당하는 잡부&amp;nbsp;2로&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vim!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;처음 리눅스를 배울때 사용했었던 Vim. 좀더 많은 사용을 위해서 그리고 많이 사용하려고 기부를 하였다. 내년에도&amp;nbsp;해야지&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.facebook.com/ujuckr/posts/10205404571549671"&gt;Thomas Sungjin&amp;nbsp;Kang&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="2019-todo"&gt;2019년에 할 일?&amp;nbsp;Todo&lt;/h2&gt;
&lt;p&gt;안되면 뭐 어쩔 수&amp;nbsp;없고&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일본&amp;nbsp;여행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이번에는 다른 곳으로!&amp;nbsp;수족관으로!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go lang&amp;nbsp;익숙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go lang을 가지고서 프로덕션을 만들던가 아니면 내가 사용할 무언가를 만들어봐야 할듯하다. Python을 이용해서 한번 만들어봤는데. 하기 전에 해야 될 일이&amp;hellip;&amp;nbsp;많다.&lt;/p&gt;
&lt;p&gt;서비스 체계를 만드는데 적은 비용을 들여서 작업할 수 있는 기회를 만드는 게 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kube&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;드디어 머릿속에 Kube의 계념이 필요한 시점이 왔다. 회사에서 사용하는 서비스가 컨테이너 기반으로 작업을 해야 되는 시점이라 공부를 진행해야&amp;nbsp;된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인프라&amp;nbsp;인프라&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서버리스가 맞는가? 컨테이너가 맞는가&amp;hellip; 보고 있으면 서버리스로 슬금슬금 넘어가긴&amp;nbsp;하겠지..?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기록&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notion을 이용해서 하루의 기록을 남기고 있고, 블로그를 정리하는데 하나로 모으고 있다. 나중에 사용하고 있는 것에 대해서 말할 기회가 더 있을련지 모르겠으나, 더 많은 내용들을 기록하고 정리하는 것이 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;p&gt;평생의 숙제인&amp;nbsp;기록.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정리 및&amp;nbsp;사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기록한 것들을 정리하고 사용할 수 있는 방안도 마련해야 될 듯. 그러나 쉽지&amp;nbsp;않다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_2"&gt;블로그&amp;nbsp;정산&lt;/h2&gt;
&lt;p&gt;&lt;img alt="blog_ga_1" src="https://ujuc.github.io/img/2018-12-28/blog_ga_1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="blog_ga_2" src="https://ujuc.github.io/img/2018-12-28/blog_ga_2.png"&gt;&lt;/p&gt;
&lt;p&gt;git-flow-github-flow-gitlab-flow 는&amp;hellip;&amp;nbsp;압도적이구만..;;;&lt;/p&gt;</content><category term="회고"></category><category term="retrospective"></category></entry><entry><title>Atom Git 커밋 메시지 Styleguides 속 Emoji</title><link href="https://ujuc.github.io/2018/12/16/atom_git_keo-mis_me-si-ji_styleguides_sog_emoji/" rel="alternate"></link><published>2018-12-16T00:31:14+09:00</published><updated>2018-12-16T00:31:14+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-12-16:/2018/12/16/atom_git_keo-mis_me-si-ji_styleguides_sog_emoji/</id><summary type="html">&lt;p&gt;블로그 글을 읽다가 커밋메시지에 이모지를 넣는 방법이 있다고 하여&amp;nbsp;정리해보았다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://blog.weirdx.io/post/55244"&gt;블로그&lt;/a&gt; 에서 글을 읽다가 커밋 메시지에 Emoji를 사용했더니 구분이 되서 좋다고 하셔서 확인.&lt;br&gt;
우선은 Atom에서 사용하는 것인데&amp;hellip; 여기다가 내가 필요한 내용들을 넣어서 사용하면&amp;nbsp;될것같아보인다.&lt;/p&gt;
&lt;p&gt;역시 글보다는&amp;nbsp;그림인가?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🎨 &lt;code&gt;:art:&lt;/code&gt; 코드 형식이나 구조를 개선할&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🐎 &lt;code&gt;:racehorse:&lt;/code&gt; 성능을 향상할&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🚱 &lt;code&gt;:non-potable_water:&lt;/code&gt; 메모리 누수를 막았을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;📝 &lt;code&gt;:memo:&lt;/code&gt; 문서 작성했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🐧 &lt;code&gt;:penguin:&lt;/code&gt; 리눅스에서 뭔가를 고쳤을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🍎 &lt;code&gt;:apple:&lt;/code&gt; macOS에서 뭔가를 고쳤을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🏁 &lt;code&gt;:checkered_flag:&lt;/code&gt; 윈도우즈에서 무언가를 고쳤을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🐛 &lt;code&gt;:bug:&lt;/code&gt; 버그를 고쳤을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🔥 &lt;code&gt;:fire:&lt;/code&gt; 코드 또는 파일을 삭제했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;💚 &lt;code&gt;:green_heart:&lt;/code&gt; &lt;span class="caps"&gt;CI&lt;/span&gt; 빌드를 고쳤을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;✅ &lt;code&gt;:white_check_mark:&lt;/code&gt; 테스트를 추가했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;🔒 &lt;code&gt;:lock:&lt;/code&gt; 보안 사항을 수정했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;⬆️ &lt;code&gt;:arrow_up:&lt;/code&gt; 의존성에 대한 부분을 업그레이드했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;⬇️ &lt;code&gt;:arrow_down:&lt;/code&gt; 의존성에 대한 부분을 다운그레이드했을&amp;nbsp;때&lt;/li&gt;
&lt;li&gt;👕 &lt;code&gt;:shirt:&lt;/code&gt; 린터 경고를 없앴을&amp;nbsp;때&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;원본 : &lt;a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages"&gt;Atom - Git Commit&amp;nbsp;Message&lt;/a&gt;&lt;/p&gt;</content><category term="emoji"></category><category term="atom"></category><category term="git commit"></category><category term="git"></category><category term="styleguide"></category></entry><entry><title>I hate input gpgkey in JetBrains IDEAs</title><link href="https://ujuc.github.io/2018/11/27/i_hate_input_gpgkey_in_jetbrains_ideas/" rel="alternate"></link><published>2018-11-27T01:31:32+09:00</published><updated>2018-11-27T01:31:32+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-11-27:/2018/11/27/i_hate_input_gpgkey_in_jetbrains_ideas/</id><summary type="html">&lt;p&gt;JetBrains IDEA를 주력하여 사용 중인데. &lt;span class="caps"&gt;GPG&lt;/span&gt; 키가 계속 침범을 하네? 그래서 문제를&amp;nbsp;찾았다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;이모든 원흉은 나의&amp;nbsp;과욕이었음을&amp;hellip;&lt;/p&gt;
&lt;p&gt;모든 코딩을 JetBrains의 IDEA에서 한다. 아직 vim이 익숙하지 않아서 그렇기도&amp;nbsp;하고&amp;hellip;&lt;/p&gt;
&lt;p&gt;언젠가 GPG키를 이용해서 git sign을 위해서 &lt;span class="caps"&gt;GPG&lt;/span&gt; suite를 설치해놨는데. 이넘이&amp;nbsp;문제일줄이야..&lt;/p&gt;
&lt;h2 id="_1"&gt;증상&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;shift + cmd +r&lt;/code&gt; , &lt;code&gt;shift + cmd + f&lt;/code&gt; 키를 누르면 아래 모습처럼 &lt;span class="caps"&gt;GPG&lt;/span&gt; 키가&amp;hellip; 계속 복사가&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="shift_cmd_r" src="https://ujuc.github.io/img/2018-11-27_shift_cmd_r.png"&gt; &lt;/p&gt;
&lt;p&gt;&lt;img alt="shift_cmd_f" src="https://ujuc.github.io/img/2018-11-27_shift_cmd_f.png"&gt;&lt;/p&gt;
&lt;h2 id="_2"&gt;해결&lt;/h2&gt;
&lt;p&gt;간단하다. System Preferences 가서 키보드 단축키에서 &lt;span class="caps"&gt;GPG&lt;/span&gt; suite에 관련된 것들을 unchecked&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="system_preferences" src="https://ujuc.github.io/img/2018-11-27_system_preferences.png"&gt; &lt;/p&gt;</content><category term="jetbrains idea"></category><category term="gpg suite"></category><category term="key mapping"></category></entry><entry><title>[번역] PSR-1: Basic Coding Standard</title><link href="https://ujuc.github.io/2018/11/17/psr-1:_basic_coding_standard/" rel="alternate"></link><published>2018-11-17T12:11:55+09:00</published><updated>2018-11-17T12:11:55+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-11-17:/2018/11/17/psr-1:_basic_coding_standard/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1, 기본 코딩 표준&amp;nbsp;번역&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.php-fig.org/psr/psr-1/"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-1: Basic Coding Standard - &lt;span class="caps"&gt;PHP&lt;/span&gt;-&lt;span class="caps"&gt;FIG&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이 표준에 대한 섹션은 공유하는 &lt;span class="caps"&gt;PHP&lt;/span&gt; 코드 간의 높은 수준의 기술적인 상호 운용성을 보장하기 위해 표준 코딩 요소로 간주되어야 하는 것에 대해서&amp;nbsp;설명합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This section of the standard comprises what should be considered the standard coding elements that are required to ensure a high level of technical interoperability between shared &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 문서에서 사용하는 키워드 &amp;ldquo;&lt;span class="caps"&gt;MUST&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;REQUIRED&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHALL&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHALL&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHOULD&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;RECOMMENDED&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;MAY&lt;/span&gt;&amp;rdquo;, &amp;ldquo;&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;&amp;rdquo;은 &lt;a href="https://techhtml.github.io/rfc/RFC2119.html"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119&lt;/a&gt;에서 설명하는 대로&amp;nbsp;해석한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The key words “&lt;span class="caps"&gt;MUST&lt;/span&gt;”, “&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;REQUIRED&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;SHOULD&lt;/span&gt;”,“&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;RECOMMENDED&lt;/span&gt;”, “&lt;span class="caps"&gt;MAY&lt;/span&gt;”, and “&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;” in this document are to be interpreted as described in &lt;a href="http://www.ietf.org/rfc/rfc2119.txt"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="1"&gt;1.&amp;nbsp;개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 파일은 &lt;code&gt;&amp;lt;?php&lt;/code&gt; 와 &lt;code&gt;&amp;lt;?=&lt;/code&gt; 태그만 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Files &lt;span class="caps"&gt;MUST&lt;/span&gt; use only &lt;code&gt;&amp;lt;?php&lt;/code&gt; and &lt;code&gt;&amp;lt;?=&lt;/code&gt; tags.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 파일은 &lt;span class="caps"&gt;PHP&lt;/span&gt; 코드에 &lt;span class="caps"&gt;BOM&lt;/span&gt; 없이 &lt;span class="caps"&gt;UTF&lt;/span&gt;-8만 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Files &lt;span class="caps"&gt;MUST&lt;/span&gt; use only &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 without &lt;span class="caps"&gt;BOM&lt;/span&gt; for &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 파일에는 심벌 (classes, functions, constants, 등)을 선언&lt;em&gt;하거나&lt;/em&gt; 사이드 이펙트 (예, 출력 생성, .ini 설정 변경, 등)을 발생시키는 작업 중 하나만 하여야 합니다. [&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 둘이 같이 선언되면&amp;nbsp;안됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Files &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;em&gt;either&lt;/em&gt; declare symbols (classes, functions, constants, etc.) &lt;em&gt;or&lt;/em&gt; cause side-effects (e.g. generate output, change .ini settings, etc.) but &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; do&amp;nbsp;both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] Namespaces와 classes는 반드시 &amp;ldquo;autoloading&amp;rdquo; 해야 합니다. &lt;span class="caps"&gt;PSR&lt;/span&gt;: [&lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"&gt;~~&lt;span class="caps"&gt;PSR&lt;/span&gt;-0~~&lt;/a&gt;, &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-4&lt;/a&gt;]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Namespaces and classes &lt;span class="caps"&gt;MUST&lt;/span&gt; follow an “autoloading” &lt;span class="caps"&gt;PSR&lt;/span&gt;: [&lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-0&lt;/a&gt;, &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-4&lt;/a&gt;].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클레스 이름은 반드시 &lt;code&gt;StudlyCaps&lt;/code&gt; 로 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class names &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in &lt;code&gt;StudlyCaps&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클래스 상수는 모두 대문자로 밑줄 구분 기호로 선언해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class constants &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in all upper case with underscore&amp;nbsp;separators.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 메소드 이름은 &lt;code&gt;camelCase&lt;/code&gt; 로 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Method names &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="2"&gt;2.&amp;nbsp;파일&lt;/h2&gt;
&lt;h3 id="21-php"&gt;2.1. &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;태그&lt;/h3&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;span class="caps"&gt;PHP&lt;/span&gt; 코드는 긴 태그인 &lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt; 또는 짧은 에코 태그 &lt;code&gt;&amp;lt;?= ?&amp;gt;&lt;/code&gt; 를 사용해야 합니다. 다른 태그 변형을 사용해서는&amp;nbsp;안됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; code &lt;span class="caps"&gt;MUST&lt;/span&gt; use the long &lt;code&gt;&amp;lt;?php ?&amp;gt;&lt;/code&gt; tags or the short-echo &lt;code&gt;&amp;lt;?= ?&amp;gt;&lt;/code&gt; tags; it &lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; use the other tag&amp;nbsp;variations.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="22"&gt;2.2 문자&amp;nbsp;인코딩&lt;/h3&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;span class="caps"&gt;PHP&lt;/span&gt; 코드는 &lt;a href="https://ko.wikipedia.org/wiki/%EB%B0%94%EC%9D%B4%ED%8A%B8_%EC%88%9C%EC%84%9C_%ED%91%9C%EC%8B%9D"&gt;&lt;span class="caps"&gt;BOM&lt;/span&gt;(Byte Order Mark)&lt;/a&gt; 없이 &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 만 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; code &lt;span class="caps"&gt;MUST&lt;/span&gt; use only &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 without &lt;span class="caps"&gt;BOM&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="23-side-effects"&gt;2.3 부작용 (Side&amp;nbsp;Effects)&lt;/h3&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 파일은 새로운 심벌 (클래스, 함수, 상수 등)을 선언하고 다른 사이드 이펙트를 일으키지 않아야 합니다. [&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 또는 파일에서 사이트 이펙트를 줄 수 있는 로직이 포함될 수 있습니다. [&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;] 그러나 이 두 가지가 모두 발생하지 않아야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A file &lt;span class="caps"&gt;SHOULD&lt;/span&gt; declare new symbols (classes, functions, constants,etc.) and cause no other side effects, or it &lt;span class="caps"&gt;SHOULD&lt;/span&gt; execute logic with side effects, but &lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; do&amp;nbsp;both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Side effects&amp;rdquo; 라는 말은 클래스, 함수, 상수 등을 선언하는 것과 직접적으로 관련없는 로직 실행을 &lt;em&gt;단지 파일에 포함하는 것&lt;/em&gt;을 의미&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The phrase “side effects” means execution of logic not directly related to declaring classes, functions, constants, etc., &lt;em&gt;merely from including the file&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Side effects&amp;rdquo;에는 다음 내용들이 포함되지만 이것만 있는 것은 아닙니다: 출력 생성, &lt;code&gt;require&lt;/code&gt; 또는 &lt;code&gt;include&lt;/code&gt; 의 명시적 사용, 외부 서비스 연결, ini 설정 수정, 에러 출력 또는 예외, 전역 또는 정적 변수 수정, 파일 읽기나 쓰기&amp;nbsp;등등&amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Side effects” include but are not limited to: generating output, explicit use of &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;include&lt;/code&gt;, connecting to external services, modifying ini settings, emitting errors or exceptions, modifying global or static variables,reading from or writing to a file, and so&amp;nbsp;on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음은 부작용이 모두 포함된 코드의 예입니다. 즉, 피해야 할&amp;nbsp;예:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following is an example of a file with both declarations and side effects;i.e, an example of what to&amp;nbsp;avoid:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// side effect: change ini settings&lt;/span&gt;
&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;error_reporting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;E_ALL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// side effect: loads a file&lt;/span&gt;
&lt;span class="k"&gt;include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;file.php&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// side effect: generates output&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// declaration&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음 예제는 부작용이 없는 내용이 포함된 코드의 예입니다. 즉, 참고해야 할&amp;nbsp;예:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following example is of a file that contains declarations without side effects; i.e., an example of what to&amp;nbsp;emulate:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// declaration&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="c1"&gt;// function body&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// conditional declaration is *not* a side effect&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="nb"&gt;function_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="c1"&gt;// function body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="3-namespace"&gt;3. 네임스페이스(Namespace)와 클래스&amp;nbsp;이름&lt;/h2&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 네임스페이스와 클래스는 반드시 &amp;ldquo;autoloading&amp;rdquo; &lt;span class="caps"&gt;PSR&lt;/span&gt; 문서에 따라야 합니다: [&lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-0&lt;/a&gt;, &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-4&lt;/a&gt;]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Namespaces and classes &lt;span class="caps"&gt;MUST&lt;/span&gt; follow an “autoloading” &lt;span class="caps"&gt;PSR&lt;/span&gt;: [&lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-0&lt;/a&gt;, &lt;a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md"&gt;&lt;span class="caps"&gt;PSR&lt;/span&gt;-4&lt;/a&gt;].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;각 클래스는 하나의 파일에 있으며, 최상위 벤더 이름인 네임스페이스가 있어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means each class is in a file by itself, and is in a namespace of at least one level: a top-level vendor&amp;nbsp;name.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클래스 이름은 반드시 &lt;code&gt;StudlyCaps&lt;/code&gt; 로 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class names &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in &lt;code&gt;StudlyCaps&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] &lt;span class="caps"&gt;PHP&lt;/span&gt; 5.3 이후 버전에서 사용될 코드는 정식 네임스페이스를 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code written for &lt;span class="caps"&gt;PHP&lt;/span&gt; 5.3 and after &lt;span class="caps"&gt;MUST&lt;/span&gt; use formal&amp;nbsp;namespaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// PHP 5.3 and later:&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 5.2.x 이하에서 작성하는 코드에서는 클래스 이름에 &lt;code&gt;Vendor_&lt;/code&gt; 접두사를 이용하는 네임스페이스 규칙을 사용해야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code written for 5.2.x and before &lt;span class="caps"&gt;SHOULD&lt;/span&gt; use the pseudo-namespacing convention of &lt;code&gt;Vendor_&lt;/code&gt; prefixes on class&amp;nbsp;names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// PHP 5.2.x and earlier:&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vendor_Model_Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="4"&gt;4. 클래스 상수, 속성,&amp;nbsp;메서드&lt;/h2&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Class&amp;rdquo; 라는 용어는 모든 클래스, 인터페이스, 특성을&amp;nbsp;나타냅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The term “class” refers to all classes, interfaces, and&amp;nbsp;traits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="41-constants"&gt;4.1 상수&amp;nbsp;(Constants)&lt;/h3&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 클래스 상수는 모두 대문자로 밑줄 구분 기호를 사용하여 선언해야 합니다.&amp;nbsp;예:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Class constants &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in all upper case with underscore separators. For&amp;nbsp;example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;Vendor\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;VERSION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="no"&gt;DATE_APPROVED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2012-06-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="42-properties"&gt;4.2 속성&amp;nbsp;(Properties)&lt;/h3&gt;
&lt;p&gt;이 가이드에서는 &lt;code&gt;$StudlyCaps&lt;/code&gt;, &lt;code&gt;$camelCase&lt;/code&gt;, &lt;code&gt;$under_score&lt;/code&gt; 와 같은 방식으로 속성 이름을 사용하는 것에 대해서 권장 사항을 지정하지&amp;nbsp;않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This guide intentionally avoids any recommendation regarding the use of &lt;code&gt;$StudlyCaps&lt;/code&gt;, &lt;code&gt;$camelCase&lt;/code&gt;, or &lt;code&gt;$under_score&lt;/code&gt; property&amp;nbsp;names.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;span class="caps"&gt;SHOULD&lt;/span&gt;] 어떤 명명 규칙이 사용되든 합당한 범위 내에서 일관되게 적용되어야 합니다. 여기서 정의하는 범위는 벤더 레벨, 패키지 레벨, 클래스 레벨, 메서드 레벨을&amp;nbsp;일컷습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whatever naming convention is used &lt;span class="caps"&gt;SHOULD&lt;/span&gt; be applied consistently within areasonable scope. That scope may be vendor-level, package-level, class-level,or&amp;nbsp;method-level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="43-methods"&gt;4.3 메서드&amp;nbsp;(Methods)&lt;/h3&gt;
&lt;p&gt;[&lt;span class="caps"&gt;MUST&lt;/span&gt;] 메서드 이름은 &lt;code&gt;camleCase()&lt;/code&gt; 방식으로 선언되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Method names &lt;span class="caps"&gt;MUST&lt;/span&gt; be declared in &lt;code&gt;camelCase()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="php"></category><category term="psr-1"></category><category term="psr"></category><category term="transelate"></category></entry><entry><title>MacOS Mojave에서 Google Drive Stream 오류</title><link href="https://ujuc.github.io/2018/11/17/macos_mojavee-seo_google_drive_stream_o-ryu/" rel="alternate"></link><published>2018-11-17T10:35:17+09:00</published><updated>2018-11-17T10:35:17+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-11-17:/2018/11/17/macos_mojavee-seo_google_drive_stream_o-ryu/</id><summary type="html">&lt;p&gt;Google Drive Stream이 실행은 커녕&amp;nbsp;죽어버린다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Google Drive Stream을 사용하고 있다. 그런데 Mojave로 OS를 업로드한 뒤부터는 실행이 안되고 어느 정도 작동하다가 죽어버리는 현상을&amp;nbsp;확인하였다.&lt;/p&gt;
&lt;p&gt;사진도 못 옮기고 이것저것 텍스트들도 제대로 작업을 못하던 중에 혹시나 그냥 앱만 지우면 안 되는 건가라는 생각에서 매뉴얼을 찾아서 보고 작동이 되는 것을&amp;nbsp;확인하였다.&lt;/p&gt;
&lt;p&gt;그냥 이렇게 하면 된다고 말 한마디면 되는 건데&amp;hellip; G Suite 쪽은 제대로 알려주는 것이&amp;nbsp;없으니&amp;hellip;&lt;/p&gt;
&lt;p&gt;터미널이 편하다면 터미널로 아니라면 해당 위치에 있는 파일들을 삭제하면&amp;nbsp;된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo rm -rf /Applications/Google&lt;span class="se"&gt;\ &lt;/span&gt;Drive&lt;span class="se"&gt;\ &lt;/span&gt;File&lt;span class="se"&gt;\ &lt;/span&gt;Stream.app/
$ sudo rm -rf ~/Library/Application Support/Google/DriveFS/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위의 내용처럼 작업하고 재시작하면 잘&amp;nbsp;실행된다.&lt;/p&gt;</content><category term="google drive stream"></category><category term="macos"></category><category term="mojave"></category></entry><entry><title>맥에서 GPG키를 이용하여 Commit 해보기</title><link href="https://ujuc.github.io/2018/10/26/maeg-e-seo_gpgki-reur_i-yong-ha-yeo_commit_hae-bo-gi/" rel="alternate"></link><published>2018-10-26T23:24:58+09:00</published><updated>2018-10-26T23:24:58+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-10-26:/2018/10/26/maeg-e-seo_gpgki-reur_i-yong-ha-yeo_commit_hae-bo-gi/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt; 키를 이용해서 내 커밋이 정말 내가 올린 것이라 말하고&amp;nbsp;싶었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://keybase.io/"&gt;keybase.io&lt;/a&gt; 계정이 있다는 가정하에서 하니, 가입을&amp;nbsp;하자.&lt;/p&gt;
&lt;h3 id="_1"&gt;필요한&amp;nbsp;것들&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install gpg
$ brew cask install keybase
$ brew cask install gpg-suite
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="gpg"&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt; 키&amp;nbsp;생성&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ keybase pgp gen --multi
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git"&gt;Git 구성에&amp;nbsp;추가&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gpg --list-secret-keys --keyid-format LONG
/Users/&lt;span class="o"&gt;{&lt;/span&gt;username&lt;span class="o"&gt;}&lt;/span&gt;/.gnupg/pubring.kbx
------------------------------
sec   rsa4096/&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="m"&gt;2018&lt;/span&gt;-10-18 &lt;span class="o"&gt;[&lt;/span&gt;SC&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;expires: 20xx-10-01&lt;span class="o"&gt;]&lt;/span&gt;
      ?????
uid                 &lt;span class="o"&gt;[&lt;/span&gt; unknown&lt;span class="o"&gt;]&lt;/span&gt; Sungjin Kang &amp;lt;example@example.com&amp;gt;
ssb   rsa4096/&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="m"&gt;2018&lt;/span&gt;-10-18 &lt;span class="o"&gt;[&lt;/span&gt;E&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;expires: 20xx-10-01&lt;span class="o"&gt;]&lt;/span&gt;

$ git config --global user.signingkey &lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt;
$ git config --global commit.gpgsign &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="github-public-gpg"&gt;Github 에 Public &lt;span class="caps"&gt;GPG&lt;/span&gt; 키&amp;nbsp;등록&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys&lt;/a&gt; 에 접속하여 &lt;strong&gt;New &lt;span class="caps"&gt;GPG&lt;/span&gt; key&lt;/strong&gt; 메뉴&amp;nbsp;선택&lt;/p&gt;
&lt;p&gt;아래 명령어로 GPG키 복사하여&amp;nbsp;붙여넣기&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ keybase pgp &lt;span class="nb"&gt;export&lt;/span&gt; -q &lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; pbcopy
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="git-gui"&gt;Git &lt;span class="caps"&gt;GUI&lt;/span&gt; 툴에서 커밋이 가능하게 옵션&amp;nbsp;추가&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; no-tty &amp;gt;&amp;gt; ~/.gnupg/gpg.conf
$ git config --global gpg.program &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;which&lt;/span&gt;&lt;span class="p"&gt; gpg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;회사 컴퓨터에도 가능하게&amp;nbsp;해두자&lt;/h3&gt;
&lt;p&gt;위에서 말한 프로그램을 설치한 뒤 다음 명령을 이용해서 key를 저장한다. 하나의 키를 가지고 있을 경우에만 다음 명령이 먹힌다. 두개이상이면 다른 모습이&amp;nbsp;보인다고&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ keybase pgp &lt;span class="nb"&gt;export&lt;/span&gt;
-----BEGIN PGP PUBLIC KEY BLOCK-----

&lt;span class="c1"&gt;# Public key export&lt;/span&gt;
$ keybase pgp &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; gpg --import
&lt;span class="c1"&gt;# Private key export&lt;/span&gt;
$ keybase pgp &lt;span class="nb"&gt;export&lt;/span&gt; --secret &lt;span class="p"&gt;|&lt;/span&gt; gpg --allow-secret-key-import --import
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_3"&gt;참고&amp;nbsp;사이트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pstadler/keybase-gpg-github"&gt;Set up Keybase.io, &lt;span class="caps"&gt;GPG&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Git to sign commits on&amp;nbsp;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aaronparecki.com/2016/07/29/10/git-tower"&gt;Signed git commits with&amp;nbsp;Tower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/ujuc/GPG-commit-11c88ce0b00f4dc79713b4ce09f62714"&gt;simnalamburt/keybase-github.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="gpg key"></category><category term="keybase.io"></category><category term="keybase"></category></entry><entry><title>PHP Package Manager : phpenv</title><link href="https://ujuc.github.io/2018/10/06/php_package_manager_:_phpenv/" rel="alternate"></link><published>2018-10-06T09:29:19+09:00</published><updated>2018-10-06T09:29:19+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-10-06:/2018/10/06/php_package_manager_:_phpenv/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; 패키지 매니저, phpenv를 확인해본다. 설치&amp;nbsp;실패기다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="_1"&gt;들어가는&amp;nbsp;말&lt;/h2&gt;
&lt;p&gt;PHP로 개발을 해야되는 일이 생겼다. 버전을 7.x대로 써야되는데&amp;hellip; 7.2는 아닌거같으니&amp;hellip; 뭔가 버전을 따로 구성해서 진행하고&amp;nbsp;싶다.!&lt;/p&gt;
&lt;h2 id="php-package-manager"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; Package&amp;nbsp;Manager&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/phpenv/phpenv"&gt;github.com/phpenv/phpemv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;버전 관리를 위한 부분.&lt;br&gt;
사용법은 &lt;code&gt;rbenv&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt; 와 동일하다. (그렇다보니 shell script로만&amp;nbsp;작성이되어있다.)&lt;/p&gt;
&lt;h3 id="_2"&gt;설치&lt;/h3&gt;
&lt;h4 id="github-checkout"&gt;&lt;a href="https://github.com/phpenv/phpenv#installation"&gt;Github&amp;nbsp;Checkout&lt;/a&gt;&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;clone&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;github&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;phpenv&lt;/span&gt;.&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;.&lt;span class="nv"&gt;phpenv&lt;/span&gt;
$ &lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;export PATH=&amp;quot;$HOME/.phpenv/bin:$PATH&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;.&lt;span class="nv"&gt;bash_profile&lt;/span&gt;
$ &lt;span class="nv"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;eval &amp;quot;$(phpenv init -)&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;.&lt;span class="nv"&gt;bash_profile&lt;/span&gt;
$ &lt;span class="k"&gt;exec&lt;/span&gt; $&lt;span class="nv"&gt;SHELL&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="phpenv-installer"&gt;&lt;a href="https://github.com/phpenv/phpenv-installer"&gt;phpenv-installer&lt;/a&gt;&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;githubusercontent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;installer&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;installer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이걸 설치하면 &lt;code&gt;php-build/php-build&lt;/code&gt;, &lt;code&gt;madumlao/phpenv-aliases&lt;/code&gt;, &lt;code&gt;ngyuki/phpenv-composer&lt;/code&gt;가 자동으로&amp;nbsp;설치된다.&lt;/p&gt;
&lt;h3 id="php"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;설치&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ phpenv install --list
$ phpenv install &lt;span class="o"&gt;{&lt;/span&gt;php_version&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="php_1"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; 설치시&amp;nbsp;에러&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mac os error &lt;a href="https://qiita.com/maosanhioro/items/82698a8bdf6b7694ad36"&gt;해결&amp;nbsp;문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-----------------&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="nv"&gt;BUILD&lt;/span&gt; &lt;span class="nv"&gt;ERROR&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;-----------------&lt;/span&gt;

&lt;span class="nv"&gt;Here&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;last&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;lines&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;log&lt;/span&gt;:

&lt;span class="o"&gt;-----------------------------------------&lt;/span&gt;
&lt;span class="nv"&gt;configure&lt;/span&gt;: &lt;span class="nv"&gt;WARNING&lt;/span&gt;: &lt;span class="nv"&gt;This&lt;/span&gt; &lt;span class="nv"&gt;bison&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;supported&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;regeneration&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Zend&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;PHP&lt;/span&gt; &lt;span class="nv"&gt;parsers&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;found&lt;/span&gt;: &lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="mi"&gt;3&lt;/span&gt;, &lt;span class="nv"&gt;min&lt;/span&gt;: &lt;span class="mi"&gt;204&lt;/span&gt;, &lt;span class="nv"&gt;excluded&lt;/span&gt;: &lt;span class="ss"&gt;)&lt;/span&gt;.
&lt;span class="nv"&gt;configure&lt;/span&gt;: &lt;span class="nv"&gt;WARNING&lt;/span&gt;: &lt;span class="nv"&gt;You&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;need&lt;/span&gt; &lt;span class="nv"&gt;re2c&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;13&lt;/span&gt;.&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;later&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;you&lt;/span&gt; &lt;span class="nv"&gt;want&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;regenerate&lt;/span&gt; &lt;span class="nv"&gt;PHP&lt;/span&gt; &lt;span class="nv"&gt;parsers&lt;/span&gt;.
&lt;span class="nv"&gt;configure&lt;/span&gt;: &lt;span class="nv"&gt;error&lt;/span&gt;: &lt;span class="nv"&gt;Cannot&lt;/span&gt; &lt;span class="nv"&gt;find&lt;/span&gt; &lt;span class="nv"&gt;OpenSSL&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="s"&gt;s &amp;lt;evp.h&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;-----------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;추가 설치&amp;nbsp;패키지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;bison&lt;/span&gt;&lt;span class="mf"&gt;@2.7&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;bison&lt;/span&gt;&lt;span class="mf"&gt;@2.7&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;re2c&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;libxml2&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt; &lt;span class="n"&gt;libxml2&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;mcrypt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libz&lt;/code&gt; error&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cannot&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt; &lt;span class="n"&gt;libz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;xcode&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="c1"&gt;--install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;모하비에서는&amp;nbsp;안된다.&lt;/p&gt;
&lt;h2 id="_3"&gt;나오는&amp;nbsp;말&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;phpenv&lt;/code&gt;로는 설치가 안되서&amp;hellip; &lt;code&gt;brew&lt;/code&gt;로 그냥 설치&amp;hellip;&lt;br&gt;
&lt;code&gt;brew&lt;/code&gt; 로 7.2 버전이랑 7.1 버전을 설치해두고 PhpStorm 에서 둘다 잡아두면 두개다 쓸수있지뭐&amp;hellip; 마이너까지만&amp;nbsp;신경쓰면되니.&lt;/p&gt;</content><category term="php"></category><category term="phpenv"></category><category term="env"></category></entry><entry><title>Linux 우선순위 설정</title><link href="https://ujuc.github.io/2018/09/28/linux_u-seon-sun-wi_seor-jeong/" rel="alternate"></link><published>2018-09-28T18:47:14+09:00</published><updated>2018-09-28T18:47:14+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-28:/2018/09/28/linux_u-seon-sun-wi_seor-jeong/</id><summary type="html">&lt;p&gt;Linux에서 프로세스 우선순위를 정하는 방법에 대해서 알아보도록&amp;nbsp;하자&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;리눅스에서는 두가지 숫자를 이용하여 task(process)에 대한 우선순위를 정할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Priority (&lt;span class="caps"&gt;PR&lt;/span&gt;)&lt;br&gt;
Task에 대한 스케쥴링 우선순위에 대한 값을 나타낸다. &lt;code&gt;rt&lt;/code&gt; 항목은 리얼타임 항목에 대한 내용을&amp;nbsp;나타냄&lt;/li&gt;
&lt;li&gt;Nice (&lt;span class="caps"&gt;NI&lt;/span&gt;)&lt;br&gt;
Task에 대한 nice 값을 나타낸다. 사용자 레벨에서 수정이 가능하다. -20 ~ +19 까지의 값을 가지고 있으며, -20값이 우선순위가 가장 높은 값이고 양수로 올라갈수록 낮은 값이다. 0은 &lt;code&gt;PR&lt;/code&gt; 값과 동일한 설정을&amp;nbsp;나타낸다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="rriority"&gt;Rriority&amp;nbsp;계산&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;해당 계산식을 이용하면 0 ~ 39 사이의 값이 되는데 이것은 Priority 값의 100 ~ 139 사이 값에&amp;nbsp;대응된다.&lt;/p&gt;
&lt;h2 id="rriority_1"&gt;Rriority&lt;/h2&gt;
&lt;p&gt;Linux에서는 Task에 대한 우선 순위를 정할 수 있다. 물론 User task priority 만 가능하다. &lt;span class="caps"&gt;RT&lt;/span&gt; task priority 부분은 사용자 권한으로 접근이&amp;nbsp;안된다.&lt;/p&gt;
&lt;p&gt;자세한 내용을 확인하려면 다음 URL에서 확인을&amp;nbsp;하도록하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.ibm.com/developerworks/linux/library/l-scheduler/"&gt;&lt;span class="caps"&gt;IBM&lt;/span&gt; - Inside the Linux&amp;nbsp;scheduler&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 커널 2.6 버전이상에서 사용하는 스케쥴러에 대한 내용이&amp;nbsp;정리되어있다.&lt;/li&gt;
&lt;li&gt;여기서는 다음 그림을&amp;nbsp;참조하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="The Linux 2.6 scheduler runqueue structure
" src="https://www.ibm.com/developerworks/linux/library/l-scheduler/figure1.gif"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.suse.com/documentation/sles11/book_sle_tuning/data/cha_tuning_taskscheduler.html"&gt;&lt;span class="caps"&gt;SUSE&lt;/span&gt; - Tuning the Task&amp;nbsp;Scheduler&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;SUSE&lt;/span&gt; 11 버전에서 튜닝하는 것에 대한 내용 중 하나이다. 12 버전에 대한건 딴문서가 있으니&amp;nbsp;확인.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;우선순위&amp;nbsp;설정&lt;/h2&gt;
&lt;h3 id="daemon"&gt;Daemon 구성 파일에서&amp;nbsp;설정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/init.d&lt;/code&gt; 에서 서비스 파일을 이용하여 &lt;code&gt;--nicelevel&lt;/code&gt; 옵션&amp;nbsp;추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/a/123926"&gt;Setting up init.d service daemon priority (with or without&amp;nbsp;monit)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/init.d&lt;/code&gt; 에서 서비스 파일에 주석으로 &lt;code&gt;# chkconfig:&lt;/code&gt; 옵션&amp;nbsp;추가&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://serverfault.com/questions/754676/how-to-change-the-startup-order-of-linux-init-scripts-in-redhat-centos"&gt;how to change the startup order of linux init scripts in Redhat,&amp;nbsp;Centos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Systemd 에서 설정하는&amp;nbsp;방법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Scheduling"&gt;systemd.exec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="limitsconf"&gt;&lt;code&gt;limits.conf&lt;/code&gt; 파일에서&amp;nbsp;지정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 사용자에 대한 모든 프로세스에대한 값을 정할때&amp;nbsp;사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Username&lt;/span&gt;    &lt;span class="n"&gt;hard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;soft&lt;/span&gt;    &lt;span class="n"&gt;priority&lt;/span&gt;    &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음 링크에서 자세하게 확인하도록&amp;nbsp;하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/8983/set-default-nice-value-for-a-given-user-limits-conf"&gt;Set default nice value for a given user&amp;nbsp;(limits.conf)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mankier.com/5/limits.conf"&gt;limits.conf man page - pam |&amp;nbsp;ManKier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nice"&gt;&lt;code&gt;nice&lt;/code&gt; 명령을 이용하여 동적으로 할당하는&amp;nbsp;방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 사용법&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nice -n {nice_value} {program_name}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://askubuntu.com/questions/656771/process-niceness-vs-priority"&gt;Process &amp;lsquo;niceness&amp;rsquo; vs.&amp;nbsp;&amp;lsquo;priority&amp;rsquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bencane.com/2013/09/09/setting-process-cpu-priority-with-nice-and-renice/"&gt;Setting process &lt;span class="caps"&gt;CPU&lt;/span&gt; priority with nice and renice | Benjamin&amp;nbsp;Cane&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unix.stackexchange.com/questions/72934/how-do-i-start-a-process-with-a-nice-value-of-20-and-not-give-it-root-privilege"&gt;How do I start a process with a nice value of -20 and not give it root&amp;nbsp;privilege?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="daemon_1"&gt;특정 프로그램으로 Daemon을 이용하여 관리하는&amp;nbsp;방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://and.sourceforge.net/"&gt;Auto nice daemon&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;업그레이드가 2005년 이후로 안되고&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;그러니 사용하기&amp;nbsp;꺼림직&amp;hellip;&lt;/li&gt;
&lt;li&gt;찾다가 나왔으니&amp;nbsp;뭐&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/linuxquestions/comments/4ctr5c/is_the_autonice_daemon_and_safe_to_use/"&gt;Reddit 글&lt;/a&gt; 에서는 사용하기가 불안하다는&amp;nbsp;내용도&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nefelim4ag/Ananicy"&gt;Ananicy&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Another Auto nice&amp;nbsp;daemon&lt;/li&gt;
&lt;li&gt;지금까지&amp;nbsp;개발중이다.&lt;/li&gt;
&lt;li&gt;Role 값을 &lt;span class="caps"&gt;JSON&lt;/span&gt; 형식으로 작업이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;. &lt;span class="caps"&gt;IO&lt;/span&gt; Priority를 변경하고 싶다면 &lt;code&gt;ionice&lt;/code&gt;를 확인하도록 하자. (&lt;a href="https://linux.die.net/man/1/ionice"&gt;manpage&lt;/a&gt;)&lt;/p&gt;</content><category term="linux"></category><category term="priority"></category><category term="scheduler"></category></entry><entry><title>Pelican에서 Markdown 문서 Attribute 에러</title><link href="https://ujuc.github.io/2018/09/24/pelicane-seo_markdown_mun-seo_attribute_e-reo/" rel="alternate"></link><published>2018-09-24T22:45:00+09:00</published><updated>2018-09-28T18:58:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-24:/2018/09/24/pelicane-seo_markdown_mun-seo_attribute_e-reo/</id><summary type="html">&lt;p&gt;Pelican을 새로 설치하였더니 markdown 문서들이 전부 컴파일이&amp;nbsp;안된다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;블로그를 python 3.7로 업그레이드로 진행하고 나서 다음과 같은 에러가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican /Users/ujuc/repos/ujuc.github.io/content -o /Users/ujuc/repos/ujuc.github.io/output -s /Users/ujuc/repos/ujuc.github.io/pelicanconf.py 
ERROR: Could not process blog/2017-10-22-pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi.md
  &lt;span class="p"&gt;|&lt;/span&gt; AttributeError: &lt;span class="s1"&gt;&amp;#39;Registry&amp;#39;&lt;/span&gt; object has no attribute &lt;span class="s1"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;
ERROR: Could not process blog/2014-02-23-pylint.md
  &lt;span class="p"&gt;|&lt;/span&gt; AttributeError: &lt;span class="s1"&gt;&amp;#39;Registry&amp;#39;&lt;/span&gt; object has no attribute &lt;span class="s1"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;git으로 버전을 관리하고 있어 해당 변경점을 확인하였더니 확인했더니 Markdown 라이브러리 문제다. 그것도 메이저로 업그레이드되면서 무언가가 변경이 되었고, 그게 Pelican 에서 사용하는 어떤 키와 잘못 설정된 부분이 있어서 발생한 것으로&amp;nbsp;파악된다.&lt;/p&gt;
&lt;p&gt;나는 pipenv 를 사용하니 &lt;code&gt;Pipfile&lt;/code&gt; 에서 &lt;code&gt;Markdown&lt;/code&gt; 라이브러리 버전을 다음과 같이 수정을&amp;nbsp;하였다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[packages]
Markdown = {version = &amp;quot;&amp;lt;3.0&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;</content><category term="pelian"></category><category term="markdown"></category></entry><entry><title>Pycharm에 pylint 추가</title><link href="https://ujuc.github.io/2018/09/24/pycharme_pylint_cu-ga/" rel="alternate"></link><published>2018-09-24T00:49:24+09:00</published><updated>2018-09-24T00:49:24+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-24:/2018/09/24/pycharme_pylint_cu-ga/</id><summary type="html">&lt;p&gt;Pycharm 에 pylint를 외부 툴로 등록하는&amp;nbsp;방법&lt;/p&gt;</summary><content type="html">&lt;p&gt;나는 블로그를 사용할때 Python 스크립트를 사용해서 작업을 하고 있다. 그러다보니 매번 파일에 추가되는 내용이나 달라지는 것들이 있으면 수정을&amp;nbsp;하는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;지금까지는 lint 작업은 하지않고서 pycharm에서 지적하는 부분만 가지고 작업을 하였다만&amp;hellip; 이제 lint를 적용해서 작업을 공통으로 사용할 수 있게&amp;nbsp;해놔야지&amp;hellip;&lt;/p&gt;
&lt;p&gt;pylint만 있는건 아니지만, pep8이나 다른것들을 정리하려면&amp;hellip; 너무 많은 것을 등록해야된&amp;hellip;&amp;nbsp;논외로..&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/38134086/how-to-run-pylint-with-pycharm"&gt;How to run Pylint with PyCharm -&amp;nbsp;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위의 글을 읽어보면 자세히&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;여기서 나와 다른 점에 대해서 기록하고 넘어가기로&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;나는 global로 pylint를 설치하지 않았다. 귀찮기도하고 많은 버전을 섞어쓰는 환경이다보니&amp;hellip; &lt;code&gt;pipenv&lt;/code&gt; 를 사용하고 있는데 이것에 대한 내용은 없다. global 하게 패키지까는 것도&amp;nbsp;부담스럽고&amp;hellip;&lt;/p&gt;
&lt;p&gt;다음 사진과 같이 나는 내용을 수정해서&amp;nbsp;사용한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My_settings" src="https://ujuc.github.io/img/2018-09-24_pycharm_export_tool_setting.png"&gt;&lt;/p&gt;</content><category term="pycharm"></category><category term="pylint"></category><category term="python"></category><category term="lint"></category></entry><entry><title>Recoll - 리눅스에서 GUI로 문서 검색을 해보자</title><link href="https://ujuc.github.io/2018/09/23/recoll_-_ri-nug-seu-e-seo_guiro_mun-seo_geom-saeg-eur_hae-bo-ja/" rel="alternate"></link><published>2018-09-23T23:27:51+09:00</published><updated>2018-09-23T23:27:51+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-23:/2018/09/23/recoll_-_ri-nug-seu-e-seo_guiro_mun-seo_geom-saeg-eur_hae-bo-ja/</id><summary type="html">&lt;p&gt;페이스북에서 보았던 recoll이라는 프로그램에 대해서 정리만&amp;nbsp;해둔다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.facebook.com/groups/korelnxuser/permalink/1108262849348464/0"&gt;페이스북 우분투 유저 그룹에 올라온 글&lt;/a&gt;이&amp;nbsp;있었다.&lt;/p&gt;
&lt;p&gt;이글은 나중에 혹시나 쓸까하여&amp;hellip; 리눅스를 메인을 사용할 일은 거의&amp;nbsp;없긴하다만&amp;hellip;&lt;/p&gt;
&lt;p&gt;소개글은 다음과&amp;nbsp;같다. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fossmint.com/recoll-file-text-search-tool-for-linux/"&gt;&lt;span class="caps"&gt;FOSS&lt;/span&gt; Mint - Recoll - A Full-Text &lt;span class="caps"&gt;GUI&lt;/span&gt; Search Tool for Linux&amp;nbsp;System&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서는 그냥 간단한 소개정도만&amp;nbsp;&amp;hellip;&lt;/p&gt;
&lt;h2 id="_1"&gt;특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xapian.org/"&gt;Xapian 서치 엔진&lt;/a&gt;&amp;nbsp;기반&lt;/li&gt;
&lt;li&gt;텍스트 추출할 수 있는 플러그인&amp;nbsp;지원&lt;/li&gt;
&lt;li&gt;왠만한 문서 포멧&amp;nbsp;지원&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;더 눈에 띄는&amp;nbsp;것은 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thunderbird에서 zip으로 압축되어있는 파일에 들어있는 문서 파일도&amp;nbsp;검색가능&amp;hellip;&lt;/p&gt;
&lt;p&gt;Recoll will index an &lt;span class="caps"&gt;MS&lt;/span&gt;-Word document stored as an attachment to an e-mail message inside a Thunderbird folder archived in a Zip file (and more&amp;hellip;). It will also help you search for it with a friendly and powerful interface, and let you open a copy of a &lt;span class="caps"&gt;PDF&lt;/span&gt; at the right page with two clicks. There is little that will remain hidden on your&amp;nbsp;disk.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지금은 맥을 쓰고 있어서 딱히&amp;hellip; 내부 검색이 필요한 것들은 전부 구글에&amp;hellip; 음 언제&amp;nbsp;한번써볼까?&lt;/p&gt;</content><category term="recoll"></category><category term="document"></category><category term="search"></category><category term="gui"></category></entry><entry><title>[번역] Design of QL</title><link href="https://ujuc.github.io/2018/05/24/design_of_ql/" rel="alternate"></link><published>2018-05-24T00:00:02+09:00</published><updated>2018-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-05-24:/2018/05/24/design_of_ql/</id><summary type="html">&lt;p&gt;Go 임베디드 데이터베이스 패키지인 QL에 대한 디자인&amp;nbsp;문서이다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;QL&lt;/code&gt; design&amp;nbsp;문서&lt;/p&gt;
&lt;p&gt;이 문서는 &lt;a href="https://github.com/cznic/ql"&gt;&lt;code&gt;cznic/ql&lt;/code&gt;&lt;/a&gt; 프로젝트 설계 문서이다.&lt;br&gt;
&lt;code&gt;QL&lt;/code&gt; 은 Go로 만들어진 embedded &lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;데이터베이스이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;원문&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;code: &lt;a href="https://github.com/cznic/ql/blob/v1.1.0/design/doc.go"&gt;doc.go -&amp;nbsp;v1.1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;godoc: &lt;a href="https://godoc.org/github.com/cznic/ql/design"&gt;package&amp;nbsp;design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#handles"&gt;Handles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scalar-encoding"&gt;Scalar&amp;nbsp;encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-root"&gt;Database&amp;nbsp;root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-meta-data"&gt;Table meta&amp;nbsp;data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#indices"&gt;Indices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-record"&gt;Table&amp;nbsp;record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#non-unique-index"&gt;Non unique&amp;nbsp;index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#unique-index"&gt;Unique&amp;nbsp;index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#non-scalar-types"&gt;Non scalar&amp;nbsp;types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#blob-encoding"&gt;Blob&amp;nbsp;encoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rationale"&gt;Rationale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;패키지 디자인은 QL에서 사용중인 일부 데이터 구조를&amp;nbsp;설명합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Package design describes some of the data structures used in &lt;span class="caps"&gt;QL&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="handles"&gt;Handles&lt;/h2&gt;
&lt;p&gt;Handle은 DB에서 사용중인 블록에대한 7 바이트 “pointer” 입니다. &lt;a href="http://godoc.org/github.com/cznic/lldb#hdr-Block_handles"&gt;&lt;code&gt;lldb/hdr-Block_handles&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A handle is a 7 byte &amp;ldquo;pointer&amp;rdquo; to a block in the &lt;span class="caps"&gt;DB&lt;/span&gt; &lt;a href="http://godoc.org/github.com/cznic/lldb#hdr-Block_handles"&gt;0&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="scalar-encoding"&gt;Scalar&amp;nbsp;encoding&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://godoc.org/github.com/cznic/lldb#EncodeScalars"&gt;&lt;code&gt;lldb/EncodeScalars&lt;/code&gt;&lt;/a&gt;에서 제공하는 &amp;ldquo;scalars&amp;rdquo; 인코딩을 말합니다. 달리 명시하지 않는한 아래 설명된 모든 값은 scalars, 인코딩된 scalars, scalar 배열에 대한 인코딩&amp;nbsp;입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Encoding of so called &amp;ldquo;scalars&amp;rdquo; provided by &lt;a href="http://godoc.org/github.com/cznic/lldb#EncodeScalars"&gt;&lt;code&gt;lldb/EncodeScalars&lt;/code&gt;&lt;/a&gt;. Unless specified otherwise, all values discussed below are scalars, encoded scalars or encoding of scalar&amp;nbsp;arrays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="database-root"&gt;Database&amp;nbsp;root&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;DB&lt;/span&gt; root는 고정된 핸들에서 발견되는 1-scalar 입니다&amp;nbsp;(#1).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;DB&lt;/span&gt; root is a 1-scalar found at a fixed handle&amp;nbsp;(#1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="center"&gt;Name&lt;/th&gt;
&lt;th align="center"&gt;Type&lt;/th&gt;
&lt;th align="center"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;head&lt;/td&gt;
&lt;td align="center"&gt;handle&lt;/td&gt;
&lt;td align="center"&gt;First table meta data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Head는 메타 데이터 테이블에서 싱클 링크 목록의 제목 행입니다. &lt;code&gt;0&lt;/code&gt;은 DB에 아무런 테이블이 없을 경우를&amp;nbsp;나타냅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Head is the head of a single linked list of table of meta data. It&amp;rsquo;s zero if there are no tables in the &lt;span class="caps"&gt;DB&lt;/span&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-meta-data"&gt;Table meta&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;테이블 메타 데이터는 6-scalar&amp;nbsp;입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Table meta data are a&amp;nbsp;6-scalar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="left"&gt;Name&lt;/th&gt;
&lt;th align="left"&gt;Type&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;next&lt;/td&gt;
&lt;td align="left"&gt;handle&lt;/td&gt;
&lt;td align="left"&gt;Next table meta data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;scols&lt;/td&gt;
&lt;td align="left"&gt;string&lt;/td&gt;
&lt;td align="left"&gt;Column defintitions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;hhead&lt;/td&gt;
&lt;td align="left"&gt;handle&lt;/td&gt;
&lt;td align="left"&gt;-&amp;gt; head -&amp;gt; first record&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;name&lt;/td&gt;
&lt;td align="left"&gt;string&lt;/td&gt;
&lt;td align="left"&gt;Table name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="left"&gt;indices&lt;/td&gt;
&lt;td align="left"&gt;string&lt;/td&gt;
&lt;td align="left"&gt;Index definitions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5&lt;/td&gt;
&lt;td align="left"&gt;hxroots&lt;/td&gt;
&lt;td align="left"&gt;handle&lt;/td&gt;
&lt;td align="left"&gt;Index B+Trees roots list&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;필드 #4와 #5는 기존 데이터베이스와 하위 호환성 (backward compatibility)을 위한 선택 사항입니다. 그러나 상위 호환성(forward compatibility)은 작동하지 않습니다. 최신 &lt;span class="caps"&gt;QL&lt;/span&gt; 버전에서 인덱스를 생성하면 메타 데이터에 4가지 필드만 있을 경우, 이 DB를 사용할 수 없습니다. 이전 버전 &lt;span class="caps"&gt;QL&lt;/span&gt; 인덱스를 업데이트 할 수 없기에 매번 &lt;code&gt;table-with-indeces&lt;/code&gt; 변화가 될때마다 새로운 &lt;span class="caps"&gt;QL&lt;/span&gt; 버전 쿼리가 실행이 안될 수 있어 의도된&amp;nbsp;구현입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fields #4 and #5 are optional for backward compatibility with existing databases. &lt;span class="caps"&gt;OTOH&lt;/span&gt;, forward compatibility will not work. Once any indices are created using a newer &lt;span class="caps"&gt;QL&lt;/span&gt; version the older versions of &lt;span class="caps"&gt;QL&lt;/span&gt;, expecting only 4 fields of meta data will not be able to use the &lt;span class="caps"&gt;DB&lt;/span&gt;. That&amp;rsquo;s the intended behavior because the older versions of &lt;span class="caps"&gt;QL&lt;/span&gt; cannot update the indexes, which can break queries runned by the newer &lt;span class="caps"&gt;QL&lt;/span&gt; version which expect indices to be always actualized on any table-with-indices&amp;nbsp;mutation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음 테이블 메타 데이터의 handle은 필드 #0 (&lt;code&gt;next&lt;/code&gt;)에 있습니다. 만약 다음 테이블 메타 데이터가 없다면, 이 필드 값은 &lt;code&gt;0&lt;/code&gt;입니다. 테이블 컬럼에대한 이름과 타입은 필드 #1 (&lt;code&gt;scols&lt;/code&gt;)에 있습니다. 단일 필드는 타입 태그와 컬럼 이름을 연결하여 설명합니다. 타입 태그는 다음과&amp;nbsp;같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The handle of the next table meta data is in the field #0 (next). If there is no next table meta data, the field is zero. Names and types of table columns are stored in field #1 (scols). A single field is described by concatenating a type tag and the column name. The type tags&amp;nbsp;are&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;bool&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;complex64&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;complex128&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;float32&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;float64&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;
&lt;span class="nb"&gt;int8&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;int16&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;int32&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;int64&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uint8&lt;/span&gt;      &lt;span class="s1"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt;
&lt;span class="n"&gt;uint16&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uint32&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;uint64&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;uint&lt;/span&gt;
&lt;span class="nb"&gt;bigInt&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;bigRat&lt;/span&gt;     &lt;span class="s1"&gt;&amp;#39;R&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;blob&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;duration&lt;/span&gt;   &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;       &lt;span class="s1"&gt;&amp;#39;T&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Scols 값은 위에서 설명한 인코딩된 필드를 &lt;code&gt;"|"&lt;/code&gt;로 결합하여 사용합니다. 예를&amp;nbsp;들어&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The scols value is the above described encoded fields joined using &amp;ldquo;|&amp;rdquo;. For&amp;nbsp;example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Baz&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 문구는 scols를 사용하여 테이블 메타 데이터를&amp;nbsp;추가합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This statement adds a table meta data with&amp;nbsp;scols&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;bFool|sBar|gBaz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;테이블에서 컬럼을 삭제할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Columns can be dropped from a&amp;nbsp;table&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;COLUMN&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이렇게 하면 scols에서 필드 정보가 &lt;strong&gt;지워&lt;/strong&gt;집니다. 값은 다음과 같이&amp;nbsp;보여집니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This &amp;ldquo;erases&amp;rdquo; the field info in scols, so the value&amp;nbsp;becomes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;bFool||gBaz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;테이블에 커럼을 추가할 수 있습니다.&lt;br&gt;
Colums can be added to a&amp;nbsp;table&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;Count&lt;/span&gt; &lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;새로운 필드는 scols 맨 끝에 항상&amp;nbsp;추가됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;New fields are always added to the end of&amp;nbsp;scols&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="n"&gt;bFool&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;gBaz&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;xCount&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;strings.Split(scols, "|")&lt;/code&gt;에 있는 필드에 대한 인덱스는 테이블 레코드에 있는 필드에 대한 인덱스 입니다. 위에서 설명한 컬럼 삭제 및 추가 규칙은 기존 테이블 데이터를 다시 만들 필요없이 스키마를 변경시킬 수 있습니다. 삭제된 컬럼은 원래 위치에 그대로 두고 새로운 레코드는 해당 위치에 &lt;code&gt;nil&lt;/code&gt;을 삽입합니다. 인코딩된 &lt;code&gt;nil&lt;/code&gt; 값은 1 바이트입니다. 기존 레코드에 없는 경우, 추가된 열은  &lt;code&gt;nil&lt;/code&gt; 값을 반환합니다. 삭제된 컬럼의 오버해드가 문제가되고 테이블 레코드를 이동할 충분한 시간/공간과 메모리가&amp;nbsp;있다면:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Index of a field in &lt;code&gt;strings.Split(scols, "|")&lt;/code&gt; is the index of the field in a table record. The above discussed rules for column dropping and column adding allow for schema evolution without a need to reshape any existing table data. Dropped columns are left where they are and new records insert &lt;code&gt;nil&lt;/code&gt; in their place. The encoded &lt;code&gt;nil&lt;/code&gt; is one byte. Added columns, when not present in preexisting records are returned as &lt;code&gt;nil&lt;/code&gt; values. If the overhead of dropped columns becomes an issue and there&amp;rsquo;s time/space and memory enough to move the records of a table&amp;nbsp;around:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt; &lt;span class="n"&gt;definitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column&lt;/span&gt; &lt;span class="n"&gt;definitions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;old&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;END&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이것은 시간적/공간적으로 효과적이지 못하며, Big Data일 경우, 트랜젝션이 프로세스에서 사용 가능한 메모리 리소스에 의해 제한되기에 &lt;span class="caps"&gt;OOM&lt;/span&gt; 이 발생할 수 있습니다. 어쩌면 이것을 수행하는 메소드나 &lt;span class="caps"&gt;QL&lt;/span&gt; 구문을 추가해야합니다.(MySQL &lt;span class="caps"&gt;OPTIMIZE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt; 구문 채택을&amp;nbsp;고려해야합니다)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is not very time/space effective and for Big Data it can cause an &lt;span class="caps"&gt;OOM&lt;/span&gt; because transactions are limited by memory resources available to the process. Perhaps a method and/or &lt;span class="caps"&gt;QL&lt;/span&gt; statement to do this in-place should be added (&lt;span class="caps"&gt;MAYBE&lt;/span&gt; consider adopting MySQL&amp;rsquo;s &lt;span class="caps"&gt;OPTIMIZE&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;&amp;nbsp;syntax).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;필드 #2(&lt;code&gt;hhead&lt;/code&gt;)는 테이블 레코드의 해드에 대한 handle 입니다. 테이블 첫 번째 레코드에 대한 handle이 아닙니다. 따라서 레코드가 없는 테이블의 경우라도 항상 &lt;code&gt;0&lt;/code&gt; 값을 가지고 있지 않습니다. 이 &lt;strong&gt;이중 포인터(double pointer&lt;/strong&gt; 스키마를 사용하는 이유는 (&lt;code&gt;hhead&lt;/code&gt; 포인트에 대한) head 단일 값을 업데이트하여 새 레코드를 추가 (연결) 할 수 있기&amp;nbsp;때문입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Field #2 (&lt;code&gt;hhead&lt;/code&gt;) is a handle to a head of table records, i.e. not a handle to the first record in the table. It is thus always non zero even for a table having no records. The reason for this &amp;ldquo;double pointer&amp;rdquo; schema is to enable adding (linking) a new record by updating a single value of the (&lt;code&gt;hhead&lt;/code&gt; pointing to)&amp;nbsp;head.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tableMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hhead&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;firstTableRecord&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;테이블 이름은 필드 #3 (&lt;code&gt;name&lt;/code&gt;)에&amp;nbsp;저장됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The table name is stored in field #3&amp;nbsp;(name).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="indices"&gt;Indices&lt;/h2&gt;
&lt;p&gt;인덱스 이름은 &amp;lsquo;N&amp;rsquo;, 인덱스 컬럼 이름은 &amp;lsquo;C&amp;rsquo;으로 정합니다. 이 특정 인덱스 인코딩은 &lt;code&gt;&amp;lt;tag&amp;gt;N&lt;/code&gt; 문자열입니다. &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt;는 고유하지 않은 인덱스는 &lt;code&gt;n&lt;/code&gt;이고 고유한 인덱스는 &lt;code&gt;u&lt;/code&gt; 입니다. 인덱스 &lt;code&gt;id()&lt;/code&gt;와 scols의 다른 모든 컬럼을 인덱싱 할 수 있는 인덱스에 대한 정보기 이 인덱스에 있습니다. 컬럼에 인덱스되지 않은 경우, 인덱스 정보는 빈 문자열입니다. 모든 인덱스에 대한 정보는 &lt;code&gt;"|"&lt;/code&gt; 으로 결합됩니다. 예를&amp;nbsp;들어:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider an index named N, indexing column named C. The encoding of this particular index is a string &amp;ldquo;&lt;tag&gt;N&amp;rdquo;. &lt;code&gt;&amp;lt;tag&amp;gt;&lt;/code&gt; is a string &amp;ldquo;n&amp;rdquo; for non unique indices and &amp;ldquo;u&amp;rdquo; for unique indices. There is this index information for the index possibly indexing the record id() and for all other columns of scols. Where the column is not indexed, the index info is an empty string. Infos for all indexes are joined with &amp;ldquo;|&amp;rdquo;. For&amp;nbsp;example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;BEGIN&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Baz&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Baz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위의 필드 #1과 #4는 다음과&amp;nbsp;같습니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The values of fields #1 and #4 for the above&amp;nbsp;are&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;lFoo|bBar|sBaz&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;|uY||nX&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;"|"&lt;/code&gt; 값을 나눠서&amp;nbsp;보자면:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aligning properly the &amp;ldquo;|&amp;rdquo; split&amp;nbsp;parts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;             &lt;span class="n"&gt;id&lt;/span&gt;    &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------+----+--------+--------+--------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="n"&gt;scols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;lFoo&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;bBar&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;sBaz&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------+----+--------+--------+--------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;uY&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;nX&amp;quot;&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------+----+--------+--------+--------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Foo&lt;/code&gt;와 &lt;code&gt;Baz&lt;/code&gt; 컬럼이 인덱스되는 동안 레코드 &lt;code&gt;id()&lt;/code&gt;가 이테이블에 대해 인덱싱되지 않는 것을&amp;nbsp;보여줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;shows that the record id() is not indexed for this table while the columns Foo and Baz&amp;nbsp;are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;주의: 동일한 컬럼에 두개의 다른 이름을 가진 인덱스가 있을 수 없으며, 이것은 의도한 것입니다. 인덱스는 &lt;a href="http://godoc.org/github.com/cznic/lldb#BTree"&gt;B+Trees&lt;/a&gt;로 작성되었습니다. 그들의 루트에서 handle에 대한 목록은 인덱스가 없는 컬럼에 대해서 &lt;code&gt;0&lt;/code&gt;과 &lt;code&gt;hxroots&lt;/code&gt;에 의해 가리켜집니다. 이전 예제의&amp;nbsp;경우:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that there cannot be two differently named indexes for the same column and it&amp;rsquo;s intended. The indices are &lt;a href="http://godoc.org/github.com/cznic/lldb#BTree"&gt;B+Trees&lt;/a&gt;. The list of handles to their roots is pointed to by &lt;code&gt;hxroots&lt;/code&gt; with zeros for non indexed columns. For the previous&amp;nbsp;example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;tableMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hxroots&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;여기서 &lt;code&gt;x&lt;/code&gt;는 &lt;code&gt;X&lt;/code&gt; 인덱스의 B+Tree에 대한 루트이고, &lt;code&gt;y&lt;/code&gt;는 &lt;code&gt;Y&lt;/code&gt; 인덱스의 B+Tree에 대한 루트입니다. &lt;code&gt;id()&lt;/code&gt;에 대한 인덱스가 있다면, 첫번째 &lt;code&gt;0&lt;/code&gt;이 있는 곳에 B+Tree 루트가 있습니다. &lt;code&gt;hhead&lt;/code&gt;와 마찬가지로 &lt;code&gt;hxroots&lt;/code&gt;는 테이블에 대한 인덱스가 없는 경우라도 절대로 &lt;code&gt;0&lt;/code&gt;이&amp;nbsp;아닙니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;where x is the root of the B+Tree for the X index and y is the root of the B+Tree for the Y index. If there would be an index for id(), its B+Tree root will be present where the first zero is. Similarly to &lt;code&gt;hhead&lt;/code&gt;, &lt;code&gt;hxroots&lt;/code&gt; is never zero, even when there are no indices for a&amp;nbsp;table.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="table-record"&gt;Table&amp;nbsp;record&lt;/h2&gt;
&lt;p&gt;테이블 레코드는 N-scalar&amp;nbsp;입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A table record is an&amp;nbsp;N-scalar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;#&lt;/th&gt;
&lt;th align="left"&gt;Name&lt;/th&gt;
&lt;th align="left"&gt;Type&lt;/th&gt;
&lt;th align="left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="left"&gt;next&lt;/td&gt;
&lt;td align="left"&gt;handle&lt;/td&gt;
&lt;td align="left"&gt;Next record or zero.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="left"&gt;id&lt;/td&gt;
&lt;td align="left"&gt;int64&lt;/td&gt;
&lt;td align="left"&gt;Automatically assigned unique&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;/td&gt;
&lt;td align="left"&gt;value obtainable by id().&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;field #0&lt;/td&gt;
&lt;td align="left"&gt;scalar&lt;/td&gt;
&lt;td align="left"&gt;First field of the record.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="left"&gt;field #1&lt;/td&gt;
&lt;td align="left"&gt;scalar&lt;/td&gt;
&lt;td align="left"&gt;Second field of the record.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&amp;hellip;&lt;/td&gt;
&lt;td align="left"&gt;&amp;hellip;&lt;/td&gt;
&lt;td align="left"&gt;&amp;hellip;&lt;/td&gt;
&lt;td align="left"&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;N-1&lt;/td&gt;
&lt;td align="left"&gt;field #N-2&lt;/td&gt;
&lt;td align="left"&gt;scalar&lt;/td&gt;
&lt;td align="left"&gt;Last field of the record.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;테이블 레코도에 링크된 &lt;strong&gt;정렬&lt;/strong&gt;에는 의미가 없으므로 레코드가 테이블에 추가되는 순서와 상관이 없습니다. 실제로 효율적인 연결 방법은 &lt;strong&gt;정렬&lt;/strong&gt;을 유도하며, 추가된 순서에 관해서는 실지로 역순이&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The linked &amp;ldquo;ordering&amp;rdquo; of table records has no semantics and it doesn&amp;rsquo;t have to correlate to the order of how the records were added to the table. In fact, an efficient way of the linking leads to &amp;ldquo;ordering&amp;rdquo; which is actually reversed wrt the insertion&amp;nbsp;order.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="non-unique-index"&gt;Non unique&amp;nbsp;index&lt;/h2&gt;
&lt;p&gt;B+Tree에 대한 &lt;a href="https://en.wikipedia.org/wiki/Compound_key"&gt;복합키&lt;/a&gt;는 &lt;code&gt;{indexed valuse, record handle}&lt;/code&gt; 입니다. B+Tree 값은 사용하지&amp;nbsp;않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The composite key of the B+Tree is &lt;code&gt;{indexed values, record handle}&lt;/code&gt;. The B+Tree value is not&amp;nbsp;used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;                    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------------+---------------+      +--------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Indexed&lt;/span&gt; &lt;span class="k"&gt;Values&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------------+---------------+      +--------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="unique-index"&gt;Unique&amp;nbsp;index&lt;/h2&gt;
&lt;p&gt;인덱스된 값이 모두 &lt;code&gt;NULL&lt;/code&gt;이라면, 복합 B+Tree 키는 &lt;code&gt;{nil, record handle}&lt;/code&gt;이고 B+Tree 값은 사용하지&amp;nbsp;않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the indexed values are all &lt;span class="caps"&gt;NULL&lt;/span&gt; then the composite B+Tree key is &lt;code&gt;{nil, record handle}&lt;/code&gt; and the B+Tree value is not&amp;nbsp;used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;                &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;------+-----------------+      +--------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;------+-----------------+      +--------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;인덱스된 값이 모두 &lt;code&gt;NULL&lt;/code&gt;이라면, B+Tree 키에 대한 키가 인덕싱된 값이고, B+Tree 값은 레코드 handle&amp;nbsp;입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the indexed values are not all &lt;span class="caps"&gt;NULL&lt;/span&gt; then key of the B+Tree key are the indexed values and the B+Tree value is the record&amp;nbsp;handle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;                &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Tree&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------------+      +---------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Indexed&lt;/span&gt; &lt;span class="k"&gt;Values&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="n"&gt;Handle&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;----------------+      +---------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="non-scalar-types"&gt;Non scalar&amp;nbsp;types&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://godoc.org/github.com/cznic/lldb#EncodeScalars"&gt;&lt;code&gt;lldb/EncodeScalars&lt;/code&gt;&lt;/a&gt;에 대한 scalar 타입은 &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;complex*&lt;/code&gt;, &lt;code&gt;float*&lt;/code&gt;, &lt;code&gt;int*&lt;/code&gt;, &lt;code&gt;uint*&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;[]byte&lt;/code&gt; 타입입니다. 모든 다른 타입은 &lt;code&gt;blob-like&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scalar types of &lt;a href="http://godoc.org/github.com/cznic/lldb#EncodeScalars"&gt;&lt;code&gt;lldb/EncodeScalars&lt;/code&gt;&lt;/a&gt; are &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;complex*&lt;/code&gt;, &lt;code&gt;float*&lt;/code&gt;, &lt;code&gt;int*&lt;/code&gt;, &lt;code&gt;uint*&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;[]byte&lt;/code&gt; types. All other types are&amp;nbsp;&amp;ldquo;blob-like&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="k"&gt;Go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-----------------------------&lt;/span&gt;
&lt;span class="k"&gt;blob&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nc"&gt;bigint&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;bigrat&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="n"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rat&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Time&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Duration&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;메모리 백엔드는 Go 타입으로 직접 저장합니다. 파일 백엔드는 lldb가 기본적으로 지원하는 유형이 더 적기에 (태그가 붙은) &lt;code&gt;[]byte&lt;/code&gt;를 이용하여 위 모든 내용을 인코딩 해야합니다. &lt;code&gt;Blob-like&lt;/code&gt;한 타입의 &lt;code&gt;NULL&lt;/code&gt; 값은 &lt;code&gt;nil&lt;/code&gt; (&lt;code&gt;lldb/db.go&lt;/code&gt;안의 &lt;code&gt;gbNull&lt;/code&gt;)으로 인코딩 됩니다. 이미 존재하는 &lt;span class="caps"&gt;QL&lt;/span&gt; 타입과 완전히&amp;nbsp;동일합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Memory back-end stores the Go type directly. File back-end must resort to encode all of the above as (tagged) &lt;code&gt;[]byte&lt;/code&gt; due to the lack of more types supported natively by lldb. &lt;span class="caps"&gt;NULL&lt;/span&gt; values of blob-like types are encoded as &lt;code&gt;nil&lt;/code&gt; (&lt;code&gt;gbNull&lt;/code&gt; in &lt;code&gt;lldb/gb.go&lt;/code&gt;), exactly the same as the already existing &lt;span class="caps"&gt;QL&lt;/span&gt; types&amp;nbsp;are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="blob-encoding"&gt;Blob&amp;nbsp;encoding&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Blob-like&lt;/code&gt;한 타입 값은 먼저 &lt;code&gt;[]byte&lt;/code&gt; 슬라이스로 인코딩&amp;nbsp;됩니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The values of the blob-like types are first encoded into a &lt;code&gt;[]byte&lt;/code&gt; slice:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-----------------------+-------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;blob&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;raw&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;bigint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bigrat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;gob&lt;/span&gt; &lt;span class="n"&gt;encoded&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;gob&lt;/span&gt; &lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="n"&gt;int64&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-----------------------+-------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;gob&lt;/code&gt; 인코딩은 &lt;code&gt;blob-like&lt;/code&gt;한 타입에 대한 모든 초기 인코딩과 관련하여 &lt;strong&gt;차별됩니다&lt;/strong&gt;. 다른 말로, &lt;code&gt;gob&lt;/code&gt; 인코딩이 반드시 써야되는 초기 타입 디스크립터는 제거되고 정직하게 디코딩될때 &lt;strong&gt;재 공급&lt;/strong&gt;됩니다. (참조, &lt;a href="https://github.com/cznic/ql/blob/v1.1.0/blob.go"&gt;&lt;code&gt;blob.go&lt;/code&gt;&lt;/a&gt;). 결과로 나온 슬라이스 길이가 &lt;code&gt;&amp;lt;= shortBolob&lt;/code&gt; 인 경우, 첫번째이자 유일한 청크는 다음과 같은 스칼라&amp;nbsp;인코딩입니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The gob encoding is &amp;ldquo;differential&amp;rdquo; wrt an initial encoding of all of the blob-like type. &lt;span class="caps"&gt;IOW&lt;/span&gt;, the initial type descriptors which gob encoding must write out are stripped off and &amp;ldquo;resupplied&amp;rdquo; on decoding transparently. See also blob.go. If the length of the resulting slice is &lt;code&gt;&amp;lt;= shortBlob&lt;/code&gt;, the first and only chunk is the scalar encoding&amp;nbsp;of&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="err"&gt;{}{&lt;/span&gt;&lt;span class="n"&gt;typeTag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slice&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;                  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;슬라이스 길이가 &lt;code&gt;0&lt;/code&gt;일 수도 있습니다 (&lt;code&gt;blob("")&lt;/code&gt;인 경우). 결과로 나온 슬라이스 길이가 길다면 (&lt;code&gt;&amp;gt; shortBlob&lt;/code&gt;), 첫 번째 청크는 인코딩에서&amp;nbsp;옵니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The length of slice can be zero (for blob(&amp;ldquo;&amp;rdquo;)). If the resulting slice is long (&lt;code&gt;&amp;gt; shortBlob&lt;/code&gt;), the first chunk comes from&amp;nbsp;encoding&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="err"&gt;{}{&lt;/span&gt;&lt;span class="n"&gt;typeTag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nextHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;firstPart&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 경우 &lt;code&gt;len(firstPart) &amp;lt;= shortBlob&lt;/code&gt;입니다. 두번째와 다른 청크입니다. 만약 마지막 청크면 &lt;code&gt;src&lt;/code&gt;는 다음과&amp;nbsp;같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case &lt;code&gt;len(firstPart) &amp;lt;= shortBlob&lt;/code&gt;. Second and other chunks: If the chunk is the last one, src&amp;nbsp;is&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lastPart&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;                          &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;overflow&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 경우 &lt;code&gt;len(lastPart) &amp;lt;= 64kB&lt;/code&gt;입니다. 마지막 청크가 아닌 경우, &lt;code&gt;src&lt;/code&gt;는 다음과&amp;nbsp;같습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case &lt;code&gt;len(lastPart) &amp;lt;= 64kB&lt;/code&gt;. If the chunk is not the last one, src&amp;nbsp;is&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="err"&gt;{}{&lt;/span&gt;&lt;span class="n"&gt;nextHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;                &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;overflow&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 경우는 &lt;code&gt;len(part) == 64kB&lt;/code&gt; 입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case &lt;code&gt;len(part) == 64kB&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="links"&gt;Links&lt;/h2&gt;
&lt;p&gt;참조&amp;nbsp;사항:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Referenced from&amp;nbsp;above:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;godoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cznic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lldb&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;hdr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Block_handles&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;godoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cznic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lldb&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;EncodeScalars&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;godoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cznic&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lldb&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;BTree&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="rationale"&gt;Rationale&lt;/h2&gt;
&lt;p&gt;이 노트는 &lt;span class="caps"&gt;QL&lt;/span&gt; 소스를 보든 사람에게 유용 할 수 있지만, 특별히 의도된 독자는 미래의 나&amp;nbsp;자신입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While these notes might be useful to anyone looking at &lt;span class="caps"&gt;QL&lt;/span&gt; sources, the specifically intended reader is my future&amp;nbsp;self.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="go"></category><category term="database"></category><category term="transelate"></category></entry><entry><title>Custom Virtual Environment Location on piping</title><link href="https://ujuc.github.io/2018/04/21/custom_virtual_environment_location_on_piping/" rel="alternate"></link><published>2018-04-21T13:01:22+09:00</published><updated>2018-04-21T13:01:22+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-04-21:/2018/04/21/custom_virtual_environment_location_on_piping/</id><summary type="html">&lt;p&gt;pipevn를 사용하는데&amp;hellip; env가 안보인다. 보이는 곳으로&amp;nbsp;옮기자!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt;를 사용하면 &lt;code&gt;.env&lt;/code&gt; 파일까지 생성해주고 그것을 사용할 수 있도록 해준다.&lt;br&gt;
그런데&amp;hellip; 이거 참&amp;hellip; 저 깊숙한곳에 만들어주니&amp;hellip; Pycharm에서 &lt;code&gt;env&lt;/code&gt;를 쓰려고 찾기시작하니 귀찮다. 그리고 그냥 지워버리면 그&amp;nbsp;밑에있는건&amp;hellip;&lt;/p&gt;
&lt;p&gt;물론 확인할 수 있는 방법이 없는건아니다. &lt;code&gt;pipenv shell&lt;/code&gt;로 하면 &lt;code&gt;.env&lt;/code&gt; 파일이 존재하는 곳을 찾아서 실행시켜주기도 하는데&amp;hellip;&lt;br&gt;
내마음에&amp;nbsp;안드니&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; 에서 사용하는 &lt;code&gt;.env&lt;/code&gt;를 내가 원하는 위치에&amp;nbsp;옮겨보자.&lt;/p&gt;
&lt;h3 id="workon_home"&gt;&lt;code&gt;WORKON_HOME&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;저 깊이 들어가는 &lt;code&gt;.env&lt;/code&gt; 폴더를 내가 원하는 위치로&amp;nbsp;옮겨준다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;venvs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="pipenv_venv_in_project"&gt;&lt;code&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;프로젝트를 진행하고있는 곳에 &lt;code&gt;.env&lt;/code&gt; 파일을 만들어준다.&lt;br&gt;
이럴때는 &lt;code&gt;.gitignore&lt;/code&gt;에서 &lt;code&gt;.env/&lt;/code&gt; 파일을 예외로 해주어야된다. 해주는게&amp;nbsp;좋을꺼다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PIPENV_VENV_IN_PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="_1"&gt;참고&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.pipenv.org/advanced/#custom-virtual-environment-location"&gt;pipenv - Custom Virtual Environment&amp;nbsp;Location&lt;/a&gt;&lt;/p&gt;</content><category term="pip"></category><category term="pipenv"></category><category term="env"></category><category term="python"></category></entry><entry><title>man page Section</title><link href="https://ujuc.github.io/2018/03/10/man_page_section/" rel="alternate"></link><published>2018-03-10T14:42:46+09:00</published><updated>2018-03-10T14:42:46+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-03-10:/2018/03/10/man_page_section/</id><summary type="html">&lt;p&gt;&lt;code&gt;man&lt;/code&gt; 페이지를 보다보면 숫자가 적혀있다. 그거 간략하게&amp;nbsp;본다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;항상  &lt;code&gt;man&lt;/code&gt; 페이지를 끼고 보는데&amp;hellip; &lt;code&gt;ls(1)&lt;/code&gt; 이라 적혀있는 페이지를 볼 수 있다.&lt;br&gt;
해당 내용을 매번 찾다가&amp;hellip; 찾는것도&amp;nbsp;힘들고해서&amp;hellip;&lt;/p&gt;
&lt;p&gt;찾다보니 해당 숫자는 section 숫자라고..&lt;br&gt;
해당되는&amp;nbsp;내용들은.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자&amp;nbsp;명령어&lt;/li&gt;
&lt;li&gt;시스템&amp;nbsp;콜&lt;/li&gt;
&lt;li&gt;C 라이브러리&amp;nbsp;함수&lt;/li&gt;
&lt;li&gt;디바이스와 특수&amp;nbsp;파일&lt;/li&gt;
&lt;li&gt;파일 포맷과&amp;nbsp;컨밴션&lt;/li&gt;
&lt;li&gt;게임 외&amp;hellip; (Games et.&amp;nbsp;al.)&lt;/li&gt;
&lt;li&gt;여러 등등&amp;nbsp;(Miscellanea)&lt;/li&gt;
&lt;li&gt;시스템 어드민 툴과&amp;nbsp;데몬&lt;/li&gt;
&lt;li&gt;커널&amp;nbsp;루틴&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그런데 이 섹션은&amp;hellip; 1971년 11월 3일에 작성된(?) &lt;a href="https://www.bell-labs.com/usr/dmr/www/manintro.html"&gt;&lt;span class="caps"&gt;UNIX&lt;/span&gt; programmer&amp;rsquo;s manual&lt;/a&gt; 섹션이라고&amp;hellip;&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;참고&amp;nbsp;자료&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/3586/what-do-the-numbers-in-a-man-page-mean"&gt;What do the numbers in a man page&amp;nbsp;mean?&lt;/a&gt;&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;잼나다잉, https://unix.stackexchange.com/a/3607&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="man"></category><category term="manual"></category><category term="linux"></category></entry><entry><title>RSYSLOG - Templates</title><link href="https://ujuc.github.io/2018/03/01/rsyslog_-_templates/" rel="alternate"></link><published>2018-03-01T18:45:41+09:00</published><updated>2018-03-01T18:45:41+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-03-01:/2018/03/01/rsyslog_-_templates/</id><summary type="html">&lt;p&gt;Rsyslog 에서 사용되는 template 에 관련된 내용을&amp;nbsp;정리합시다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;/var/log/syslog&lt;/code&gt;로 모여드는 서비스들의 로그를 다른 곳으로 옮기고, 해당 내용을 확인하기 위해 파싱을 할 수 있도록 변경하는 작업이 필요했다.&lt;br&gt;
그래서 내가 필요한 로그를 syslog에서 때어낸후 다른 파일로 옮기는 작업을 성공. 하지만 그 이상의 작업을 하기위해서는 rsyslog에서 template을 작성하여야 내가 필요한 메시지만 작성할 수 있는 것을 확인하였기에 해당 부분을 찾아&amp;nbsp;변경하였다.&lt;/p&gt;
&lt;p&gt;그러면서 참고하려고 했던 문서들이 전부 영문이라. 한국어로 내가 정리해두고 나중에 또 찾아봐야겠다는 생각에서 글을&amp;nbsp;작성한다.&lt;/p&gt;
&lt;h2 id="template"&gt;Template&lt;/h2&gt;
&lt;p&gt;Rsyslog에서는 기본적인 포맷이 아닌 사용자가 필요한 내용으로 포맷을 변경할 수 있는 옵션을&amp;nbsp;제공한다.&lt;/p&gt;
&lt;p&gt;작성하는 포맷은 두가지가 있으며, 검색해보면 전부 Legacy 포맷으로 적도록 되어있으니 두개는 보기 편한걸로 작성해두면 될것으로&amp;nbsp;보인다.&lt;/p&gt;
&lt;h3 id="template-statement"&gt;&lt;code&gt;template()&lt;/code&gt; statement&lt;/h3&gt;
&lt;p&gt;문서상으로는 7버전 이상에서 사용할 수 있는&amp;nbsp;포맷이다.&lt;/p&gt;
&lt;p&gt;아래의 예제는 파일에 로그를 작성하는 기본&amp;nbsp;템플릿이다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;FileFormat&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;dateFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;rfc3339&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslogtag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;spifno1stsp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;droplastlf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;on&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;작성된 템플릿을 이용해서&amp;nbsp;분석해보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template(parameters) { list-descriptions }&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;이런 구조로&amp;nbsp;작성된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="parameters"&gt;&lt;code&gt;parameters&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;: 해당 템플릿의&amp;nbsp;이름이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: 템플릿을 어떤 용도로 사용할 것인가에 대한 내용을 작성한다고&amp;nbsp;보면된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;option&lt;/code&gt;: 템플릿을 어떤 형식으로 출력할 것인지에대해서 추가로 정할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="type"&gt;&lt;code&gt;type&lt;/code&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#list"&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#constant-statement"&gt;&lt;code&gt;constant&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;상수 텍스트에 대한 내용들을&amp;nbsp;작성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\ooo&lt;/code&gt;, &lt;code&gt;\xhh&lt;/code&gt;, &lt;code&gt;&lt;/code&gt; 와 같은 내용들을 작성해 둘 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;그리고 다음 파라미터를 입력하여 사용할 수도 있다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; - 사용하는 상수&amp;nbsp;값&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outname&lt;/code&gt; - 출력 필드&amp;nbsp;이름&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; - &lt;code&gt;jsonf&lt;/code&gt;나 그냥&amp;nbsp;빈칸&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#property-statement"&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;속성에 대한 내용들을&amp;nbsp;작성한다.&lt;/li&gt;
&lt;li&gt;해당 내용은 종류가 많아서&amp;nbsp;넘어간다.&lt;/li&gt;
&lt;li&gt;Legacy format에서 &lt;code&gt;%property%&lt;/code&gt; 형식으로 들어가는 내용과 동일하다고 보면&amp;nbsp;될것같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#subtree"&gt;&lt;code&gt;subtree&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;7.4.1 버전이후로 나온&amp;nbsp;타입이다.&lt;/li&gt;
&lt;li&gt;예제를 보면 더 쉽게 알수 있을&amp;nbsp;것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;tpl2&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;tpl2&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;dataflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;58&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tpl2&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;subtree&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;subtree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;$!usr!tpl2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#string"&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Lagacy format 형식으로 쭉&amp;nbsp;적는거다.&lt;/li&gt;
&lt;li&gt;예제를&amp;nbsp;보자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;template&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;tpl3&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;string&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
         &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#plugin"&gt;&lt;code&gt;plugin&lt;/code&gt;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;플러그인을 만들때 사용한다고 하는데&amp;hellip; 쓸일이&amp;nbsp;있을까??&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="option"&gt;&lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/templates.html#options"&gt;&lt;code&gt;option&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;예제로 이해하자. 필요하면 링크를 타고&amp;nbsp;보고.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;outfmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsonf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;timereported&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dateFormat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;rfc3339&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;severity&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslogseverity-text&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;caseConversion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;upper&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;facility&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslogfacility-text&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslog-tag&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslogtag&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;app-name&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="n"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;msg&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;jsonf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이렇게&amp;nbsp;작성하면,&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;@timestamp&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;2018-03-01T01:00:00+00:00&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;172.20.245.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;severity&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;facility&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;local4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;syslog-tag&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot; msgnum:00000000:&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="legacy-format"&gt;Legacy&amp;nbsp;Format&lt;/h3&gt;
&lt;p&gt;6 이전 버전에서 사용하던 포멧이다. rsyslog template으로 해서 검색을 하면 가장 많이 나오는 포멧. 공식 문서에서는 사용하지 않을 것을&amp;nbsp;권고하고있다.&lt;/p&gt;
&lt;p&gt;아래의 예제는 파일에 로그를 작성하는 기본&amp;nbsp;템플릿이다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="nv"&gt;template&lt;/span&gt; &lt;span class="nv"&gt;FileFormat&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;%TIMESTAMP:::date-rfc3339% %HOSTNAME% %syslogtag%%msg:::sp-if-no-1st-sp%%msg:::drop-last-lf%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;작성 요령은 &lt;code&gt;$template&lt;/code&gt; 변수, &lt;code&gt;template 이름&lt;/code&gt;, &lt;code&gt;"%PROPERTY_NAME[:FROM_CHAR:TO_CHAR:OPTION]%"&lt;/code&gt;. 필요한 내용들을&amp;nbsp;작성하면된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Property&lt;/code&gt; 내용은 &lt;a href="http://www.rsyslog.com/doc/v8-stable/configuration/properties.html"&gt;도큐먼트&lt;/a&gt;에&amp;nbsp;작성되어있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM_CHAR&lt;/code&gt;, &lt;code&gt;TO_CHAR&lt;/code&gt; 부분은 어디서 어디까지&amp;hellip; &lt;code&gt;%msg:1:2%&lt;/code&gt;라고 작성했다면 메시지에서 첫번째 문자에서 두번째 문자까지 보여달라고 하는것. &lt;code&gt;FROM_CHAR&lt;/code&gt; 을 작성하고 맨끝열까지 하고 싶다면, &lt;code&gt;TO_CHAR&lt;/code&gt;에다가 숫자가 아닌 &lt;code&gt;$&lt;/code&gt;를 입력하면 문자열의 맨마지막까지 보여주게 된다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM_CHAR&lt;/code&gt; 부분에 &lt;code&gt;F&lt;/code&gt; 입력&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%msg:F:2%&lt;/code&gt; 라고 입력하면 &lt;code&gt;test\tchar&lt;/code&gt;라면 &lt;code&gt;[test, char]&lt;/code&gt;로 분리하고 &lt;code&gt;char&lt;/code&gt;만&amp;nbsp;보여주게된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F,ASCII_CODE&lt;/code&gt;로 입력하면, 해당 문자로 나누게&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM_CHAR&lt;/code&gt; 부분에 &lt;code&gt;R&lt;/code&gt; 입력&lt;ul&gt;
&lt;li&gt;정규식을 사용한다는&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;해당 내용은 man&amp;nbsp;페이지를&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OPTION&lt;/code&gt;은 &lt;a href="http://manpages.ubuntu.com/manpages/xenial/en/man5/rsyslog.conf.5.html"&gt;man 페이지&lt;/a&gt; Property Options 항목을&amp;nbsp;확인하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;동적 파일 이름&amp;nbsp;생성&lt;/h3&gt;
&lt;p&gt;두가지 방식이 있다만, 첫번째 방식으로 작성해서 템플릿 구성을 맞추는게 좋을것으로&amp;nbsp;보인다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;DynFile&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;/var/log/system-%HOSTNAME%.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="n"&gt;DynFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;/var/log/system-%HOSTNAME%.log&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;결.&lt;/h2&gt;
&lt;p&gt;Rsyslog는 지금 리눅스에서 기본적으로 사용되는 System logging 프로그램이다. 그렇기에 사용하기가 쉽고 쉽게 다가갈 수 있다.&lt;br&gt;
이런 것으로 우선 1차 정리하고 더 설정할 수 없는 것들은 프로그램에서 정리를 하거나 다른 프로그램을 사용하거나 해도 될듯. 무작정 패키지를 추가할 수 없는 시스템에서는 어쩔 수 없는&amp;nbsp;선택이긴하다만&amp;hellip;&lt;/p&gt;
&lt;p&gt;삽질한 내용을 작성해 두려고 한건데&amp;hellip; 글쓰는데 더 삽질을&amp;hellip;&amp;nbsp;ㅡ.ㅡa&lt;/p&gt;
&lt;p&gt;다음번엔 원격 서버로 로컬 서버 로그를 넘기는 방법에 대해서 정리를 해볼까&amp;hellip; 이 내용은&amp;nbsp;많던데&amp;hellip;&lt;/p&gt;
&lt;h2 id="_3"&gt;참고&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rsyslog.com/doc"&gt;rsyslog doc&amp;nbsp;homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="syslog"></category><category term="rsyslog"></category><category term="log"></category><category term="system"></category><category term="linux"></category></entry><entry><title>Ubuntu 17.10에서부터 기본으로 사용되는 Netplan</title><link href="https://ujuc.github.io/2017/11/18/ubuntu_17.10e-seo-bu-teo_gibon-eu-ro_sa-yong-doe-neun_netplan/" rel="alternate"></link><published>2017-11-18T00:54:20+09:00</published><updated>2017-11-18T00:54:20+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-11-18:/2017/11/18/ubuntu_17.10e-seo-bu-teo_gibon-eu-ro_sa-yong-doe-neun_netplan/</id><summary type="html">&lt;p&gt;Ubuntu 17.10 부터 ifupdown 패키지가 사용되지 않는다는 소식. Only Ubuntu. 그래서 Netplan은&amp;nbsp;뭘까?&lt;/p&gt;</summary><content type="html">&lt;p&gt;처음에는 리눅스에서 IP를 Static하게 구성하기위해 &lt;a href="https://askubuntu.com/questions/967695/ubuntu-17-10-will-not-accept-static-ip/967819#967819"&gt;검색한 페이지&lt;/a&gt;에서 독특한 문법을&amp;nbsp;확인했다.&lt;/p&gt;
&lt;p&gt;문의 내용은 17.10에서는 &lt;code&gt;/etc/network/interfaces&lt;/code&gt;에 작성해둔 설정이 안먹힌다는 것이었다. 그러면서 답변으로 달린것이 &lt;a href="https://askubuntu.com/a/967819/126675"&gt;요내용&lt;/a&gt;이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ifupdown&lt;/code&gt; 패키지를 더이상 사용하지 않고, Ubuntu 17.10 Server에서 부터는 &lt;code&gt;netplan&lt;/code&gt;이라는 것을 사용하여 &lt;code&gt;systemd-networkd&lt;/code&gt;를 제어한다고 명시하고&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;사용법이 묘하다. 혹시나해서 &lt;a href="https://wiki.ubuntu.com/ArtfulAardvark/ReleaseNotes"&gt;Ubuntu 17.10 release note&lt;/a&gt;를 보러갔지. 그랬더니 &lt;strong&gt;Update Packages&lt;/strong&gt;에 당당히 Linux kernel 다음에 한 꼭지로 있다. 내용은 다음 과&amp;nbsp;같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ifupdown&lt;/strong&gt; has been deprecated in favor of &lt;strong&gt;netplan&lt;/strong&gt; and is no longer present on new installs. The installer will generate a configuration file for &lt;strong&gt;netplan&lt;/strong&gt; in &lt;em&gt;/etc/netplan&lt;/em&gt;, which will set up the system to configure the network via systemd-networkd or NetworkManager. Desktop users will see their system fully managed via NetworkManager as it has been the case in previous releases, but Server users now have their network devices managed via systemd-networkd on new installs. This only applies to new&amp;nbsp;installations.&lt;/p&gt;
&lt;p&gt;Given that ifupdown is no longer installed by default, its commands will not be present: &lt;code&gt;ifup&lt;/code&gt; and &lt;code&gt;ifdown&lt;/code&gt; are thus unavailable, replaced by &lt;code&gt;ip link set $device up&lt;/code&gt; and &lt;code&gt;ip link set $device down&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;networkctl&lt;/code&gt; command is also available for users to see a summary of the network devices. &lt;code&gt;networkctl&lt;/code&gt; status will display the current global state of &lt;span class="caps"&gt;IP&lt;/span&gt; addresses on the system; and &lt;code&gt;networkctl status $device&lt;/code&gt; can display the details specific to a network&amp;nbsp;device.&lt;/p&gt;
&lt;p&gt;For more information about netplan, please refer to the manual page using the &lt;code&gt;man 5 netplan&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그리고 찾다보니 이건 Ubuntu에서만 사용하는 프로젝트로 보이는데&amp;hellip; 다른 배포판에서는 사용될 확률이 높지는 않으니&amp;hellip;&amp;nbsp;이것참&amp;hellip;&lt;/p&gt;
&lt;p&gt;아래 내용은 정리해둔거고, 나중에 man 페이지나 정리해서&amp;nbsp;올려둬야겠다.&lt;/p&gt;
&lt;h2 id="netplan"&gt;Netplan&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Design overview" src="https://wiki.ubuntu.com/Netplan/Design?action=AttachFile&amp;amp;do=get&amp;amp;target=design_overview.png"&gt;&lt;/p&gt;
&lt;h3 id="netplan_1"&gt;Netplan&amp;nbsp;소개&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt; 구성 파일을 사용하여 네트워크 구성을&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;초기 부팅시, “network renderer” 작동할때 &lt;em&gt;/{lib,etc,run}/netplan*.yaml&lt;/em&gt; 내용을 읽고, 지정된 네트워킹 daemon에 장치에 대한 &lt;em&gt;/run&lt;/em&gt; 에 구성을&amp;nbsp;쓴다.&lt;/li&gt;
&lt;li&gt;systemd-networkd 를 renderer 기본 값으로 하여 장치를 핸들링하며, 다른 renderer (NetworkManger)를 지정할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;네트워크 구성에서 다루지 않는 장치는 전혀 건드리지&amp;nbsp;않는다.&lt;/li&gt;
&lt;li&gt;initramfs에서 사용이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;구성이 지속되지 않고, &lt;span class="caps"&gt;YAML&lt;/span&gt; 로만 구성을&amp;nbsp;작성한다.&lt;/li&gt;
&lt;li&gt;파서는 어플리케이션 (libvert, lxd)에서 사용이 예상되는 네트워크 구성 (&lt;code&gt;virtbr0&lt;/code&gt;, &lt;code&gt;lxdvr0&lt;/code&gt;)를 패키지화 할 수 있도록 멀티 구성 파일에 대한 지원을 하거나, NetworkManager를 이용하여 모든 것을 사용하도록 글로벌 기본 정책을 변경할 수&amp;nbsp;있어야한다.&lt;/li&gt;
&lt;li&gt;백엔드/정책을 변경하거나, &lt;code&gt;apt purge network-manager&lt;/code&gt;를 할 수 있는 유연성을&amp;nbsp;유지해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;netplan generate&lt;/code&gt; : &lt;em&gt;/etc/netplan&lt;/em&gt;에 renderer에 대한 구성들을&amp;nbsp;생성한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netplan apply&lt;/code&gt; : renderer에 대한 구성들을 적용하고, 필요에따라&amp;nbsp;재시작한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;netplan ifupdown-migrate&lt;/code&gt; : &lt;em&gt;/etc/network/interfaces&lt;/em&gt; 의 내용을 마이그레이션&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_2"&gt;사용법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;설정한 인터페이스&amp;nbsp;끄고키기&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ip link &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$dev&lt;/span&gt; up
$ ip link &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$dev&lt;/span&gt; down
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;고정 아이피 설정 &lt;em&gt;/etc/netplan/a.yaml&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;renderer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;networkd&lt;/span&gt;
    &lt;span class="n"&gt;ethernets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;enp3s0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;addresses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;10.10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;10.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
            &lt;span class="n"&gt;dhcp4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="netplan_2"&gt;Netplan을 사용하고 싶지 않을&amp;nbsp;경우&lt;/h3&gt;
&lt;p&gt;Ubuntu 서버 설치 이미지로 부팅시 grub (&lt;code&gt;e&lt;/code&gt; 버튼을 클릭해서 수정하거나, F6을 눌러 bootspash로 들어가서)에서 preseeding 설정으로 &lt;code&gt;netcfg/do_not_use_netplan=true&lt;/code&gt; 명령을&amp;nbsp;추가해줍니다.&lt;/p&gt;
&lt;h2 id="_3"&gt;참고&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Homepage : &lt;a href="https://launchpad.net/netplan"&gt;launchpad.net/netplan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code : &lt;a href="https://git.launchpad.net/netplan"&gt;git.launchpad.net/netplan&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;첫 커밋 : &lt;a href="https://git.launchpad.net/netplan/commit/?id=b6256ca911ba9762e04a9c7614dc226f4753ffb8"&gt;b6256ca911ba9762e04a9c7614dc226f4753ffb8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wiki : &lt;a href="https://wiki.ubuntu.com/Netplan"&gt;wiki.ubuntu.com/Netplan&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.ubuntu.com/Netplan/Design"&gt;Netplan&amp;nbsp;Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ManPage : &lt;a href="http://people.canonical.com/~mtrudel/netplan/"&gt;netplan&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.launchpad.net/netplan/tree/doc/netplan.md"&gt;doc/netplan.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://insights.ubuntu.com/2017/07/10/netplan-by-default-in-17-10/"&gt;Netplan by default in&amp;nbsp;17.10&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="network"></category><category term="config"></category><category term="networkd"></category><category term="netplan"></category><category term="ubuntu"></category></entry><entry><title>파이썬으로 리눅스 배포판 확인하기</title><link href="https://ujuc.github.io/2017/10/22/pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi/" rel="alternate"></link><published>2017-10-22T18:21:49+09:00</published><updated>2017-10-22T18:21:49+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-10-22:/2017/10/22/pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi/</id><summary type="html">&lt;p&gt;파이썬으로 cmd 툴을 만들다보니 리눅스 배포판을 구분해야되는 경우가&amp;nbsp;발생했다!&lt;/p&gt;</summary><content type="html">&lt;p&gt;요즘 코딩을 안하니&amp;hellip; 머리가 멍해져가는지라.&lt;br&gt;
컴퓨터를 밀고 나면 새롭게 설정하기위해서 만들어뒀던 셸  스크립트를 파이썬 cmd 라이버리를 가지고 변경하는중. (이건 따로 작성하자. 새로운 기능을&amp;nbsp;많이써서&amp;hellip;)&lt;/p&gt;
&lt;p&gt;리눅스 배포판 별로 설치하는 프로그램 명령어가 다르니 배포판을 구분하여 명령어를 다르게 적용할수 있도록 구현이&amp;nbsp;필요했다.&lt;/p&gt;
&lt;p&gt;찾다보니 &lt;a href="https://docs.python.org/3/library/platform.html"&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; 라이브러리가 내부에 존재하고 해당 라이브러리에서 Unix 환경에서 사용이 가능한 &lt;code&gt;dist&lt;/code&gt;, &lt;code&gt;linux_distribution&lt;/code&gt; 메소드가 존재를 한다. 그런데 이거 3.5때 방출에 대한 논의 (&lt;a href="https://bugs.python.org/issue1322"&gt;issue 1322&lt;/a&gt;)가 되었고, 3.7에서 삭제되는 걸로&amp;nbsp;끝&amp;hellip;&lt;/p&gt;
&lt;p&gt;이런. 난 매번 버전 업데이트되면 최신으로&amp;nbsp;맞출껀데&amp;hellip;&lt;/p&gt;
&lt;p&gt;댓글을 읽다보니 해당 기능을 따로 빼내어 다른 서비스로 만들어둔 용자가 있었다. 이름은 &lt;a href="https://pypi.python.org/pypi/distro"&gt;&lt;code&gt;distro&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;그런데 이건 Unix 환경에서만 작동이된다. 맥에서는 패키지는 깔리지만 사용할 수&amp;nbsp;없다.&lt;/p&gt;
&lt;p&gt;원리는 간단하다. &lt;code&gt;/etc/*-release&lt;/code&gt; 파일에 작성되어있는 내용을 가져와 표시해주는 것으로 보인다. 뭐 Todo로 &lt;code&gt;lsb_release&lt;/code&gt; 파일을 만들 수 있는게 있어보이지만&amp;hellip; 언제될지는&amp;nbsp;모르겠고.&lt;/p&gt;
&lt;h2 id="_1"&gt;사용법&lt;/h2&gt;
&lt;h3 id="linux_distributionfull_distribution_nametrue"&gt;&lt;code&gt;linux_distribution(full_distribution_name=True)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Output : &lt;code&gt;(id_name, version, codename)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;platform.linux_distribution()&lt;/code&gt; 와&amp;nbsp;동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판 id를&amp;nbsp;반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nameprettyfalse"&gt;&lt;code&gt;name(pretty=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판 이름을&amp;nbsp;반환한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pretty&lt;/code&gt; 옵션을 사용하면 자세하게&amp;nbsp;나온단다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="versionprettyfalse-bestfalse"&gt;&lt;code&gt;version(pretty=False, best=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포판 버전이다. (16.04, 17.05&amp;nbsp;이런거…)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="codename"&gt;&lt;code&gt;codename()&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포판&amp;nbsp;코드네임&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="infoprettyfalse-bestfalse"&gt;&lt;code&gt;info(pretty=False, best=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판에 대한 정보를&amp;nbsp;보여준다.&lt;/li&gt;
&lt;li&gt;여기에 키값으로 되어있는 것들이 메소드 명과 1:1&amp;nbsp;매칭된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다른 것도 많으니 &lt;a href="http://distro.readthedocs.io/en/latest/"&gt;문서&lt;/a&gt;&amp;nbsp;확인하자.&lt;/p&gt;</content><category term="python"></category><category term="linux"></category><category term="distribution"></category><category term="lib"></category></entry><entry><title>OpenStack에서 사용할 Windows imange 생성</title><link href="https://ujuc.github.io/2017/09/22/openstacke-seo_sa-yong-har_windows_imange_saeng-seong/" rel="alternate"></link><published>2017-09-22T17:18:08+09:00</published><updated>2017-09-22T17:18:08+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-09-22:/2017/09/22/openstacke-seo_sa-yong-har_windows_imange_saeng-seong/</id><summary type="html">&lt;p&gt;OpenStack에서 사용할 Windows 이미지를&amp;nbsp;생성해보자.&lt;/p&gt;</summary><content type="html">&lt;h2 id="_1"&gt;기본&amp;nbsp;준비사항&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu&amp;nbsp;16.04&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Windows_Virtio_Drivers"&gt;VirtIO&amp;nbsp;driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cloudbase.it/cloudbase-init"&gt;CloudBase&amp;nbsp;init&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="virt-manager"&gt;virt-manager&amp;nbsp;설치&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install -y kvm virt-manager
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;virt-manager 설치 후에 VM을&amp;nbsp;생성한다.&lt;/li&gt;
&lt;li&gt;이미지는 &lt;code&gt;qcow2&lt;/code&gt;로&amp;nbsp;만들어야된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="virtio"&gt;VirtIO 드라이버&amp;nbsp;설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;가장&amp;nbsp;중요하다.&lt;/li&gt;
&lt;li&gt;이 작업을 하지 않으면, &lt;span class="caps"&gt;OS&lt;/span&gt; 부팅할때 에러가&amp;nbsp;뜬다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;하드로 사용할 이미지를 VirtIO로 설정해두면 설치는 모르겠는데 부팅이 되지&amp;nbsp;않는다.&lt;/li&gt;
&lt;li&gt;이것만큼은 바꾸지말고, 스토리지를 하나 더 만들어서 붙이면서 VirtIO로 설정해주고 드라이버를 설치해주도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cloudbase-init"&gt;CloudBase init&amp;nbsp;설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloud init 파일을 만들어주는&amp;nbsp;프로그램이다.&lt;/li&gt;
&lt;li&gt;그냥 받아서 설치해주면 되는데 맨마지막 &lt;strong&gt;일반화&lt;/strong&gt; 라는 항목이&amp;nbsp;있는데.&lt;/li&gt;
&lt;li&gt;이것을 하게되면, Windows 첫 설치시 새로운 계정을 만들 수 있도록 이전 설정을 다날리는 작업을 해주기에 필요하다면 하고 아니라면 체크하지말고 설치를 하도록&amp;nbsp;하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;디바이스 드라이버&amp;nbsp;확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;혹시나 없는 드라이버가 있는지 확인하고 하도록&amp;nbsp;하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="glance-imange"&gt;Glance에 Imange&amp;nbsp;업로드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hoizon&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;주의&lt;/strong&gt; : &lt;code&gt;/var/tmp&lt;/code&gt; 에다가 올린다. 그러니 &lt;code&gt;/var&lt;/code&gt; 폴더에 용량이 있는지 확인하고&amp;nbsp;올리도록.&lt;/li&gt;
&lt;li&gt;편하게&amp;nbsp;올리자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--disk-format&lt;/code&gt;은 기본값이 &lt;code&gt;raw&lt;/code&gt;이다. 그렇기에 &lt;code&gt;qcow2&lt;/code&gt;로 변경해주고&amp;nbsp;올려야된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ openstack image create --disk-format qcow2 --file windows.qcow2 windows
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;http://gotocloud.co.kr/?p=1575&lt;/li&gt;
&lt;li&gt;http://heavenkong.blogspot.kr/2014/04/create-windows7-virtual-machine-image.html&lt;/li&gt;
&lt;li&gt;https://fedoraproject.org/wiki/Windows_Virtio_Drivers&lt;/li&gt;
&lt;/ul&gt;</content><category term="openstack"></category><category term="nova"></category><category term="image"></category><category term="windows"></category></entry><entry><title>Scala에서 val, var 차이</title><link href="https://ujuc.github.io/2017/08/04/scalae-seo_val,_var_ca-i/" rel="alternate"></link><published>2017-08-04T11:07:25+09:00</published><updated>2017-08-04T11:07:25+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-08-04:/2017/08/04/scalae-seo_val,_var_ca-i/</id><summary type="html">&lt;p&gt;Scala에서 &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;의 차이가&amp;nbsp;궁금해졌다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;요세 Java를 공부하기는 싫고 JVM에서 도는 걸 찾다가. Scala쪽으로 어떤분이 약을 파셔서&amp;nbsp;약을먹었다.&lt;/p&gt;
&lt;p&gt;초기 공부는 역시 홈페이지에 있는 문서를 기반으로&amp;hellip; &lt;a href="http://docs.scala-lang.org/tour/tour-of-scala.html"&gt;Scala Tour&lt;/a&gt; 를 보다 &lt;a href="http://docs.scala-lang.org/tour/classes.html"&gt;Classes&lt;/a&gt;에 갔더니 예제로 다음 과 같은 내용이&amp;nbsp;있었다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;
        &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="s"&gt;s&amp;quot;(&lt;/span&gt;&lt;span class="si"&gt;$x&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;$y&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;    &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;// prints (x, y)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;변수를 초기화하는데 &lt;code&gt;var&lt;/code&gt;랑 &lt;code&gt;val&lt;/code&gt;이 같이 쓰였다. 느낌상으로는 &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;이나 동일할꺼같은데 같은걸 다른곳에서 다르게 사용할 필요가 없을꺼니&amp;nbsp;구글검색.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/4437373/use-of-def-val-and-var-in-scala"&gt;Use of def, val, and var in&amp;nbsp;scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;역시 나랑 같은 생각을 하는 사람이 있을 줄알았지. 그것도 영어잘하는 :). 그런데 여기는 &lt;code&gt;def&lt;/code&gt;도 들어가있다. 메소드는 왜&amp;hellip; 메소드를 할당할때에도 쓸수 있어서 그런건가..&lt;br&gt;
암튼 답변 내용은 다음과&amp;nbsp;같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;def&lt;/code&gt;: 메소드, &lt;em&gt;immutable label&lt;/em&gt;, &lt;strong&gt;lazily&amp;nbsp;evaluated&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;
&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="k"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;error:&lt;/span&gt; &lt;span class="kt"&gt;value&lt;/span&gt; &lt;span class="kt"&gt;something_=&lt;/span&gt; &lt;span class="kt"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;member&lt;/span&gt; &lt;span class="kt"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="kt"&gt;$iw&lt;/span&gt;
       &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
       &lt;span class="o"&gt;^&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt;: 상수, &lt;em&gt;immutable label&lt;/em&gt;, &lt;strong&gt;eagerly/immediately&amp;nbsp;evaluated&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;somethingelse&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;somethingelse&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="k"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;error:&lt;/span&gt; &lt;span class="kt"&gt;value&lt;/span&gt; &lt;span class="kt"&gt;something_=&lt;/span&gt; &lt;span class="kt"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;a&lt;/span&gt; &lt;span class="kt"&gt;member&lt;/span&gt; &lt;span class="kt"&gt;of&lt;/span&gt; &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="kt"&gt;$iw&lt;/span&gt;
       &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
       &lt;span class="o"&gt;^&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;: 변수, &lt;em&gt;mutable&amp;nbsp;variable&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;aVariable&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aVariable&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;개인적으로는 &lt;a href="https://stackoverflow.com/a/33066906/978762"&gt;두번째 답&lt;/a&gt;이 마음에&amp;nbsp;든다. &lt;/p&gt;</content><category term="scala"></category><category term="value"></category></entry><entry><title>Yet Another Cron (yacron)</title><link href="https://ujuc.github.io/2017/07/21/yet_another_cron_(yacron)/" rel="alternate"></link><published>2017-07-21T13:17:58+09:00</published><updated>2017-07-21T13:17:58+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-07-21:/2017/07/21/yet_another_cron_(yacron)/</id><summary type="html">&lt;p&gt;Docker에서 쓰기 편하게 작성한 crontab&amp;nbsp;이란다.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gjcarneiro/yacron"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해당 프로젝트는 지금은 alpha 버전이라고 한다. 제대로된 기능들이 들어가기 시작하면 좋아질듯. 그리고 그때쯤되면 간단한 소개가 아닌 사용법에 대해서&amp;nbsp;작성해둬야겠다.&lt;/p&gt;
&lt;p&gt;우선은 Readme 파일 번역&amp;nbsp;수준&lt;/p&gt;
&lt;h2 id="_1"&gt;기능&lt;/h2&gt;
&lt;p&gt;가장 중요하다.&amp;nbsp;기능!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;Crontab&amp;rdquo; 을 YAML로 작성이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;솔직히 YAML이 편한지는&amp;nbsp;모르겠다.&lt;/li&gt;
&lt;li&gt;cron job이 실패에 대한 부분을 제어할 수 있게&amp;nbsp;되어있다.&lt;/li&gt;
&lt;li&gt;실패시 해당 값을 재시도 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;유연하게 구성&amp;nbsp;가능&lt;/li&gt;
&lt;li&gt;Docker, Kubernetes, 12 factor environments에 맞게 디자인이&amp;nbsp;되었다며&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python &amp;gt;=&amp;nbsp;3.5&lt;/li&gt;
&lt;li&gt;pip install&amp;nbsp;yacron&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;사용&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yacron -c my-crontab.yaml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;를 사용해서 구성파일이 있는 곳을&amp;nbsp;가리킨다.&lt;/p&gt;
&lt;h3 id="_4"&gt;기본&amp;nbsp;구성&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;매 5분마다 &lt;code&gt;echo "foobar"&lt;/code&gt;를 실행하는&amp;nbsp;job.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;foobar&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/bash&lt;/span&gt;
    &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;특정일 (2017/7/19)에만 5분마다 &lt;code&gt;echo "foobar"&lt;/code&gt;를 실행하는&amp;nbsp;job.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;foobar&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/5&amp;quot;&lt;/span&gt;
      &lt;span class="nt"&gt;dayOfMonth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;19&lt;/span&gt;
      &lt;span class="nt"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;
      &lt;span class="nt"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2017&lt;/span&gt;
      &lt;span class="nt"&gt;dayOfWeek&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;특정 환경변수 값&amp;nbsp;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;foobar&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/bash&lt;/span&gt;
    &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PATH&lt;/span&gt;
        &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin:/usr/bin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_5"&gt;기본 값&amp;nbsp;지정&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PATH&lt;/span&gt;
        &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin:/usr/bin&lt;/span&gt;
    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/bash&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;foobar&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# run /bin/bash&lt;/span&gt;
    &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&amp;quot;&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-02&lt;/span&gt;
    &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;zbr&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# run /bin/sh&lt;/span&gt;
    &lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/bin/sh&lt;/span&gt;
    &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_6"&gt;리포트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;job 이 실패했을때 알려준다. Sentry는 나중에 추가될&amp;nbsp;꺼임.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;echo &amp;quot;hello&amp;quot; 1&amp;gt;&amp;amp;2&lt;/span&gt;
    &lt;span class="no"&gt;sleep 1&lt;/span&gt;
    &lt;span class="no"&gt;exit 10&lt;/span&gt;
  &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/2&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;captureStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;report&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;sentry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;dsn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example&lt;/span&gt;
      &lt;span class="nt"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example@foo.com&lt;/span&gt;
        &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example@bar.com&lt;/span&gt;
        &lt;span class="nt"&gt;smtp_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;onFailure&lt;/code&gt; 부분이 job 실패시 작어하는 부분임.&lt;br&gt;
&lt;code&gt;captureStderr: true&lt;/code&gt; 부분은 stderr로 출력되는 데이터를 잡겠다는거 반대로는 &lt;code&gt;captureStdout: true&lt;/code&gt; 가&amp;nbsp;있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;job 이 성공했을 경우, 알림은 &lt;code&gt;onSuccess&lt;/code&gt; 옵션을&amp;nbsp;추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;hello world&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/2&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;captureStdout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;report&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example@foo.com&lt;/span&gt;
        &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;example@bar.com&lt;/span&gt;
        &lt;span class="nt"&gt;smtp_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="failure"&gt;failure&amp;nbsp;제어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실패&amp;nbsp;조건&lt;/li&gt;
&lt;li&gt;&lt;code&gt;producesStdout&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stdout 출력이 있을&amp;nbsp;경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;producesStderr&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stderr 출력이 있을&amp;nbsp;경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonzeroReturn&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;반환값이 0이&amp;nbsp;아닌경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;failsWhen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;producesStdout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;false&lt;/span&gt;
  &lt;span class="nt"&gt;producesStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;nonzeroReturn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;retry&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;onFailure&lt;/code&gt; 안에다가 추가한다. 그리고 job 재시도도 완전히 실패했다면, &lt;code&gt;onPermanentFailure&lt;/code&gt; 옵션을 사용하여 리포트를&amp;nbsp;받는다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;test-01&lt;/span&gt;
  &lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
    &lt;span class="no"&gt;echo &amp;quot;hello&amp;quot; 1&amp;gt;&amp;amp;2&lt;/span&gt;
    &lt;span class="no"&gt;sleep 1&lt;/span&gt;
    &lt;span class="no"&gt;exit 10&lt;/span&gt;
  &lt;span class="nt"&gt;schedule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;minute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*/10&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;captureStderr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="nt"&gt;onFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;report&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;a@foo.com&lt;/span&gt;
        &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;a@bar.com&lt;/span&gt;
        &lt;span class="nt"&gt;smtp_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
    &lt;span class="nt"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;maximumRetries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;10&lt;/span&gt;
      &lt;span class="nt"&gt;initialDelay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
      &lt;span class="nt"&gt;maximumDelay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;30&lt;/span&gt;
      &lt;span class="nt"&gt;backoffMultiplier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
  &lt;span class="nt"&gt;onPermanentFailure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;report&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;mail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;a@foo.com&lt;/span&gt;
        &lt;span class="nt"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;a@bar.com&lt;/span&gt;
        &lt;span class="nt"&gt;smtp_host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="cron"></category><category term="yaml"></category><category term="scadule"></category><category term="docker"></category><category term="python"></category></entry><entry><title>Pyup</title><link href="https://ujuc.github.io/2017/07/21/pyup/" rel="alternate"></link><published>2017-07-21T01:10:25+09:00</published><updated>2017-07-21T01:10:25+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-07-21:/2017/07/21/pyup/</id><summary type="html">&lt;p&gt;찾았다. Python 패키지 업그레이드 &lt;span class="caps"&gt;PR&lt;/span&gt; 날리는&amp;nbsp;서비스.&lt;/p&gt;</summary><content type="html">&lt;p&gt;ruby에서 gem 업그레이드를 찾아서 repo에 PR을 보내주는 &lt;a href="https://www.deppbot.com/"&gt;deppbot&lt;/a&gt;이 있다. 그것을 Python에서도 사용이 가능한 서비스를 찾고&amp;nbsp;있었는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.git-pull.com"&gt;git-pull&lt;/a&gt;에서 &amp;lsquo;Django vs Flask&amp;rsquo;를 읽다가 &lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 서비스를 이용해서 블로그를 서비스를 하고 있기에&amp;hellip; repo 구경갔더니&amp;hellip; &lt;a href="https://pyup.io/"&gt;pyup&lt;/a&gt; 서비스를 이용해서 pip 패키지 업그레이드를 찾아서 repo에 PR을 보내주는 서비스를 사용하고&amp;nbsp;있네&amp;hellip;&lt;/p&gt;
&lt;h2 id="pyup"&gt;Pyup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io/docs/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용법은 간단하다 깃으로 가입을 한다. 퍼블릭 레포로 한다. 아니면 돈내고&amp;hellip;&lt;br&gt;
패키지 업그레이드할 repo를 등록한다. 핀을 으로 박을 패키지를 등록해주면 알아서 한다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;만약, 특정 패키지들은 업글을 하고 싶지 않다면 &lt;a href="https://pyup.io/docs/filter/"&gt;filter&lt;/a&gt; 항목을 보고 코멘트를 두면&amp;nbsp;된단다.&lt;/p&gt;
&lt;p&gt;아무리봐도 복잡한건 없다만&amp;hellip; 매번 PR로 인한 인스턴스 값이 있을거니까&amp;hellip; 그거낸다 생각하고 유료 사용자가 되는&amp;nbsp;방법도&amp;hellip;&lt;/p&gt;
&lt;p&gt;뭘&amp;nbsp;달아보지&amp;hellip;&lt;/p&gt;</content><category term="python"></category><category term="dependency"></category><category term="update"></category></entry><entry><title>Commnets in Markdown</title><link href="https://ujuc.github.io/2017/07/20/commnets_in_markdown/" rel="alternate"></link><published>2017-07-20T16:33:15+09:00</published><updated>2017-07-20T16:33:15+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-07-20:/2017/07/20/commnets_in_markdown/</id><summary type="html">&lt;p&gt;Markdown에서는 comment는 어떻게&amp;nbsp;해야되지&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 스팩 문서를 다시 번역하면서 꽤나 긴 markdown 문서를 작성해야되는 경우가 발생했다. 그러다보니&amp;hellip; 코멘트로 나눔이 필요한 경우가&amp;nbsp;발생!&lt;/p&gt;
&lt;p&gt;구글에서 간단하게 검색하니 &lt;a href="https://stackoverflow.com/questions/4823468/comments-in-markdown"&gt;Comments in Markdown - Stackoverflow&lt;/a&gt; 라는 글이 하나&amp;nbsp;발견&amp;hellip;&lt;/p&gt;
&lt;p&gt;코멘트 남기는 방법은 다음처럼 구성하면&amp;nbsp;된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;//&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;개인적 취향은 두번째가 좋아보인다. 그리고 긴 코멘트가 필요하다면&amp;hellip; &lt;span class="caps"&gt;HTML&lt;/span&gt; 코멘트 태그를 사용해도&amp;nbsp;좋을듯.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="c1"&gt;---&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;---&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;오늘은&amp;nbsp;여기까지&amp;hellip;&lt;/p&gt;</content><category term="markdown"></category><category term="comment"></category><category term="문법"></category></entry><entry><title>Cron-Style Job System - cronsun</title><link href="https://ujuc.github.io/2017/07/19/cron-style_job_system_-_cronsun/" rel="alternate"></link><published>2017-07-19T17:08:01+09:00</published><updated>2017-07-19T17:08:01+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-07-19:/2017/07/19/cron-style_job_system_-_cronsun/</id><summary type="html">&lt;p&gt;Go 메일링을 보다가 cron과 비슷한 서비스라 말하기에&amp;nbsp;확인.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/shunfei/cronsun"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Lang:&amp;nbsp;Golang&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;분산 cron 스타일 잡 시스템이라고 한다. 대략적인 구성을 보고 싶어서 작성하는 것이니 만큼&amp;hellip; 설치랑 해당 내용만 작성해두고 언제가 쓸일 있을때 사용 후기나&amp;nbsp;적어야겠다.&lt;/p&gt;
&lt;h2 id="_1"&gt;아키텍쳐&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                                         &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                           &lt;span class="o"&gt;+&lt;/span&gt;
                                           &lt;span class="o"&gt;|&lt;/span&gt;
                                 &lt;span class="o"&gt;+---------+----------------+&lt;/span&gt;
                                 &lt;span class="o"&gt;|&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Update&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt; &lt;span class="n"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                 &lt;span class="o"&gt;+&lt;/span&gt;                          &lt;span class="o"&gt;+&lt;/span&gt;
                               &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;etcd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MongoDB&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                 &lt;span class="o"&gt;+&lt;/span&gt;                          &lt;span class="o"&gt;^&lt;/span&gt;
                      &lt;span class="o"&gt;+----------------------+&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
                      &lt;span class="o"&gt;+&lt;/span&gt;          &lt;span class="o"&gt;+&lt;/span&gt;           &lt;span class="o"&gt;+&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;
                      &lt;span class="o"&gt;+&lt;/span&gt;          &lt;span class="o"&gt;+&lt;/span&gt;           &lt;span class="o"&gt;+&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
                      &lt;span class="o"&gt;+----------------------+&lt;/span&gt;              &lt;span class="o"&gt;|&lt;/span&gt;
                                 &lt;span class="o"&gt;|&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
                                 &lt;span class="o"&gt;|&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Job&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
                                 &lt;span class="o"&gt;|&lt;/span&gt;                          &lt;span class="o"&gt;|&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt; &lt;span class="n"&gt;Mail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;--------------------+--------------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Job을 매니징하고 등록하는 부분을 Web으로 구성해둬서 접근이 쉽게 되어있고, etcd를 이용해서 워커들의 작동을 정리하고, MongoDB에다가 job 실행 결과에 대한 부분을 저장해두는 방식으로 보여짐.&lt;br&gt;
노드는 여러개를 사용할 수 있는 것인지&amp;hellip; 보기로는 그렇게 되어있긴한데.. 뭐 이건 코드도 같이&amp;nbsp;봐야될듯함.&lt;/p&gt;
&lt;h2 id="_2"&gt;빌드&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;go get -u github.com/shunfei/cronsun
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$GOPATH&lt;/span&gt;/src/github.com/shunfei/cronsun
sh build.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;실행&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;MongoDB, etcd3&amp;nbsp;설치&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conf&lt;/code&gt; 폴더에 있는 config 수정&lt;br&gt;
  * 샘플은 &lt;code&gt;conf/files&lt;/code&gt; 에 항목별로 존재한다. 확인이&amp;nbsp;필요.&lt;/li&gt;
&lt;li&gt;Node 실행: &lt;code&gt;./cronnode -conf conf/base.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;웹서버 실행: &lt;code&gt;./cronweb -conf conf/base.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;접속은 &lt;code&gt;http://127.0.0.1:7079/ui/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="go"></category><category term="cron"></category><category term="job system"></category></entry><entry><title>direnv</title><link href="https://ujuc.github.io/2017/02/08/direnv/" rel="alternate"></link><published>2017-02-08T20:44:05+09:00</published><updated>2017-02-08T20:44:05+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-02-08:/2017/02/08/direnv/</id><summary type="html">&lt;p&gt;이것 참&amp;hellip; 결국 env 종류를 다 돌고&amp;nbsp;있다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;이번에 소개할 direnv 는 이상한 모임에서 autoenv 를 올리고 난뒤 &lt;a href="http://raccoonyy.github.io/"&gt;@raccoony&lt;/a&gt;님께서 알려주셨다. 오홍 신기한거&amp;nbsp;많다.&lt;/p&gt;
&lt;h3 id="direnv"&gt;&lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;홈페이지는 제목을 누르면 연결이되고 깃허브 주소는 &lt;a href="https://github.com/direnv/direnv"&gt;direnv/direnv&lt;/a&gt; 이다. 신기한건 go로 작성이 되었네&amp;hellip; 마지막 커밋이 이글 쓰는 날 기준으로&amp;nbsp;10일전!&lt;/p&gt;
&lt;p&gt;다른 env 프로그램들과 비슷하게 이건 셸에서 사용하는 환경변수를 변경할 수 있도록 도와준다.&lt;br&gt;
코드에는 넣지 못하는 환경변수들을 셸에 &lt;code&gt;.bashrc&lt;/code&gt; 나 &lt;code&gt;.profile&lt;/code&gt; 에 모든 곳에서 사용하는 경우가 생기는데, 이걸 쓰면 프로젝트마다 다른 내용을 생성하여 보안을 높힐 수 있는 기회가 된다. (모든 보안은 사람이 행하는 보안을 제외하고&amp;hellip; 직접 OS에 들어와서 까는건 어쩔 수&amp;nbsp;없잖아&amp;hellip;)&lt;/p&gt;
&lt;h4 id="_1"&gt;설치&lt;/h4&gt;
&lt;h5 id="_2"&gt;빠지지 않는 메뉴얼&amp;nbsp;설치!&lt;/h5&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/direnv/direnv
$ &lt;span class="nb"&gt;cd&lt;/span&gt; direnv
$ make install
&lt;span class="c1"&gt;# or symlink ./direnv into the $PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="brew"&gt;brew&lt;/h5&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ brew install direnv
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;리눅스 패키지도 있다고 하니 사용하는 것에 있는지 검색해보고 설치하도록&amp;nbsp;하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;사용&lt;/h4&gt;
&lt;p&gt;우선 사용한 셸 구성 파일에 다음 내용들을&amp;nbsp;넣어준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$(direnv hook bash)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;$(direnv hook zsh)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;direnv&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="n"&gt;fish&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.cshrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="n"&gt;direnv&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="n"&gt;tcsh&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음으로는 다음과 같이 설정해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; playground
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;foo &amp;gt; .envrc
direnv: error .envrc is blocked. Run &lt;span class="sb"&gt;`&lt;/span&gt;direnv allow&lt;span class="sb"&gt;`&lt;/span&gt; to approve its content.
$ direnv allow
direnv: loading .envrc
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +FOO -PS2
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
direnv: unloading
$ &lt;span class="nb"&gt;cd&lt;/span&gt; playground
direnv: loading .envrc
direnv: &lt;span class="nb"&gt;export&lt;/span&gt; +FOO -PS2
$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FOO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
foo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;사용법은&amp;nbsp;간단하다.&lt;/p&gt;
&lt;p&gt;그런데 이걸 쓰는 이유는 코드에 자동으로 생성하는 비번이나 아니면 Auth token 등을 넣으실껀데&amp;hellip;&lt;br&gt;
절대로 git 에는 올리지 말길&amp;hellip; 꼭 &lt;code&gt;.gitignore&lt;/code&gt; 설정해서 사용하도록&amp;nbsp;하자.&lt;/p&gt;
&lt;p&gt;더 자세한건 홈페이지에서!!&lt;br&gt;
그런데 이거 참 좋당.&lt;br&gt;
이제 어디서&amp;nbsp;쓰써볼까나&amp;hellip;&lt;/p&gt;</content><category term="env"></category><category term="shell"></category><category term="environment"></category></entry><entry><title>vim 빌드해보자</title><link href="https://ujuc.github.io/2017/01/28/vim_bir-deu-hae-bo-ja/" rel="alternate"></link><published>2017-01-28T22:46:29+09:00</published><updated>2017-01-28T22:46:29+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-01-28:/2017/01/28/vim_bir-deu-hae-bo-ja/</id><summary type="html">&lt;p&gt;이번에 플러그인을 사용하기 위해서 했던 작업들을&amp;nbsp;구성해보자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;vim 플러그인중 jedi-vim 을 사용하는데. 설치된 vim 에서 python 플러그가 켜있지 않아 관련되서 플러그인을 사용하지 않는다는 아래와 같은 에러 메시지를 뿜고&amp;nbsp;있었다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;setup_py_version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
        &lt;span class="n"&gt;Vim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py3file&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt; &lt;span class="o"&gt;\&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;init_python&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]..&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SNR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="n"&gt;_init_python&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;]..&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;setup_py_version&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="ubuntu"&gt;Ubuntu&lt;/h2&gt;
&lt;p&gt;회사에서는 ubuntu에서 개발 중이라 vim에 관련된 설정을 추가해주고 해야됐다.&lt;br&gt;
가끔 열어보는 vim이지만 그래도 정말 급할때는 이거라도 설치해서 사용하니 구성을&amp;nbsp;해놓는걸로..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 구성은 &lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;Building Vim from source&lt;/a&gt; 를 이용해서 구성하는 것으로&amp;nbsp;했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim을 빌드하기 전에 dev 패키지를&amp;nbsp;설치해준다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 기존 패키지로 설치되어 있는 vim을&amp;nbsp;삭제한다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;runtime&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vim 코드를 받고 컴파일을&amp;nbsp;해주자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="c1"&gt;--with-features=huge --enable-multibyte \&lt;/span&gt;
            &lt;span class="c1"&gt;--enable-rubyinterp=yes \&lt;/span&gt;
            &lt;span class="c1"&gt;--enable-python3interp=yes \&lt;/span&gt;
            &lt;span class="c1"&gt;--enable-cscope&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;설치가 제대로 되었는지 확인하려면 &lt;code&gt;vim --version&lt;/code&gt; 으로 확인하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;시스템 기본으로 구성하려면 아래 명령어를&amp;nbsp;쳐주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternatives&lt;/span&gt; &lt;span class="c1"&gt;--install /usr/bin/editer editer /usr/bin/vim 1&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternatives&lt;/span&gt; &lt;span class="c1"&gt;--set editer /usr/bin/vim&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternatives&lt;/span&gt; &lt;span class="c1"&gt;--install /usr/bin/vi vi /usr/bin/vim 1&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;alternatives&lt;/span&gt; &lt;span class="c1"&gt;--set vi /usr/bin/vim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="mac"&gt;Mac&lt;/h2&gt;
&lt;p&gt;Mac OS에서는 brew를 사용해서 설치하면된다. 설치할때 옵션을 붙여주면 되는데 그 옵션은 다음에서 처럼 확인이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="k"&gt;options&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt;
&lt;span class="c1"&gt;--with-client-server&lt;/span&gt;
    &lt;span class="n"&gt;Enable&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="k"&gt;mode&lt;/span&gt;
&lt;span class="c1"&gt;--with-custom-perl&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;Perl&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Homebrew&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;--with-custom-python&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Homebrew&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;--with-custom-ruby&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;Ruby&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Homebrew&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="c1"&gt;--with-lua&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;lua&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--with-luajit&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;luajit&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--with-mzscheme&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mzscheme&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--with-override-system-vi&lt;/span&gt;
    &lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="k"&gt;system&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt;
&lt;span class="c1"&gt;--with-python3&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--with-tcl&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;tcl&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--without-nls&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="k"&gt;National&lt;/span&gt; &lt;span class="k"&gt;Language&lt;/span&gt; &lt;span class="n"&gt;Support&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keymaps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;--without-perl&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--without-python&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--without-ruby&lt;/span&gt;
    &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="k"&gt;without&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;
&lt;span class="c1"&gt;--HEAD&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt; &lt;span class="n"&gt;HEAD&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이후 설치할때 필요한 옵션에 대해서&amp;nbsp;추가해주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="c1"&gt;--with-client-server --with-override-system-vi --with-python3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 이 옵션은 다음번 vim 업데이트에도 반영이 되는 사안이니 한번만 설정해서 설치해주기만&amp;nbsp;하면된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;솔직히 리눅스에서는 내가 빌드를 할일이 없다. 빌드를 한다는건 내가 그 프로그램에 대해서 깊게 알고 있어야되고 그것들을 하나씩 변경을가하는 것이라 생각했었고, 몇몇 프로그램은 그정도까지 손을 안되더라도 구성에서 변경이 가능했으니까&amp;hellip;&lt;br&gt;
이번에 vim 빌드하면서 어쩔 수 없구나를 느끼게되고&amp;hellip;&lt;br&gt;
brew 참 편한데 옵션이 많지는 않구나라는&amp;hellip; 그리고 저것말고는 딱히 추가할 이유가 없긴해서&amp;hellip;&lt;br&gt;
linux-brew 에서는 어떻게 될련지 모르겠지만 그것까지는 사용하지 않고 있어서 작성하지&amp;nbsp;않았다.&lt;/p&gt;</content><category term="dev"></category><category term="vim"></category><category term="build"></category><category term="ubuntu"></category><category term="mac"></category></entry><entry><title>autoenv 설정</title><link href="https://ujuc.github.io/2017/01/21/autoenv_seor-jeong/" rel="alternate"></link><published>2017-01-21T16:40:06+09:00</published><updated>2017-01-21T16:40:06+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-01-21:/2017/01/21/autoenv_seor-jeong/</id><summary type="html">&lt;p&gt;컴퓨터를 밀었다. env 구성을 해야되는데 &lt;code&gt;autoenv&lt;/code&gt; 를 사용하면 해당 프로젝트로 들어가면 자동으로 해준다기에 설정을&amp;nbsp;했다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="authenv"&gt;&lt;code&gt;authenv&lt;/code&gt; 설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 url: &lt;a href="https://github.com/kennethreitz/autoenv"&gt;kennethreitz/autoenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 맥에서 설치하는 &lt;code&gt;brew install autoenv&lt;/code&gt; 로 설치한다. 딴걸로 써볼려고도 했었는데&amp;hellip; &lt;code&gt;brew&lt;/code&gt; 하나로 구성해서 관리하는게 더 좋다.&lt;br&gt;
셸에도 넣어주자. &lt;code&gt;zsh&lt;/code&gt; 를 사용하니 &lt;code&gt;~/.zshrc&lt;/code&gt; 에 &lt;code&gt;source $(brew --prefix autoenv)/activate.sh&lt;/code&gt; 를 넣어두게 되면&amp;nbsp;쉽다.&lt;/p&gt;
&lt;h2 id="_1"&gt;설정&lt;/h2&gt;
&lt;p&gt;블로그를 &lt;code&gt;pelican&lt;/code&gt; 으로 구성해서 작성하다보니 &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt; 설정해서 패키지 설치 파일이 필요해서&amp;nbsp;구성했다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ujuc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;

&lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다 좋은데 다른 폴더로 가거나 다른 프로젝트로 갔을때&amp;hellip; 문제가 생길 수 있어서 끄는 방법을 찾았다. 상위 폴더에 다음 &lt;code&gt;.evn&lt;/code&gt;를 만들어서 넣어주면 된다. 개발하면서 자주가는 곳에다가는 꼭 박아두자. (&lt;a href="https://github.com/kennethreitz/autoenv/issues/30#issuecomment-26832177"&gt;원문&lt;/a&gt;)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# .&lt;span class="nv"&gt;env&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; [ &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; ] &lt;span class="c1"&gt;; then&lt;/span&gt;
    &lt;span class="nv"&gt;deactivate&lt;/span&gt;
&lt;span class="nv"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="autoenv"></category><category term="env"></category><category term="setup"></category></entry><entry><title>Pendulum 버전업</title><link href="https://ujuc.github.io/2016/12/28/pendulum_beo-jeon-eob/" rel="alternate"></link><published>2016-12-28T23:36:13+09:00</published><updated>2016-12-28T23:36:13+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-12-28:/2016/12/28/pendulum_beo-jeon-eob/</id><summary type="html">&lt;p&gt;datetime 패키지중 하나인 Pendulum이 업그래이드 했다. 그래서&amp;hellip; 에러가&amp;nbsp;발생했다&lt;/p&gt;</summary><content type="html">&lt;p&gt;기본 패키지 인 datetime 이 영 불편해서 회사 프로젝트에서 사용중이던 date 파일을 &lt;a href="https://pendulum.eustace.io"&gt;Pendulum&lt;/a&gt;으로 변경하여 구성하고 잘 쓰고 있었는데&amp;hellip; 패키지 업그레이드로 사용하던 기능이 deprecate 되어버렸다.&lt;br&gt;
아직 정식 1.0 버전이 나오지 않았기에 내용들이 계속 바뀌고 있다보니&amp;hellip;&amp;nbsp;속이&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="070"&gt;0.7.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pendulum.eustace.io/history/#0-7"&gt;원본&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added"&gt;Added&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; 클라스&amp;nbsp;추가됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time&lt;/code&gt; 플라스&amp;nbsp;추가됨.&lt;/li&gt;
&lt;li&gt;Python 3.6에서 소개된 &lt;a href="https://www.python.org/dev/peps/pep-0495/#the-fold-attribute"&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; 속성에대한 실험적 지원이&amp;nbsp;추가됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval&lt;/code&gt; 클라스에 &lt;code&gt;remaining_days&lt;/code&gt; 속성이&amp;nbsp;추가됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pedulum&lt;/code&gt; 클라스에 &lt;code&gt;int_timestamp&lt;/code&gt; 속성을 추가하여 지금은 사용되지 않는 &lt;code&gt;timestamp&lt;/code&gt; 속성에 대한 동작을&amp;nbsp;진행함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_of()&lt;/code&gt;/&lt;code&gt;end_of()&lt;/code&gt; 에서 새로운 &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; 단위를&amp;nbsp;지원.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astimezone()&lt;/code&gt;에 시간대 문자열을&amp;nbsp;지원함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in_words()&lt;/code&gt;는 다른 단위를 사용할 수 없을때 잠깐&amp;nbsp;보여짐.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="changed"&gt;Changed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Period&lt;/code&gt; 속성이 (특히 &lt;code&gt;years&lt;/code&gt;와 &lt;code&gt;months&lt;/code&gt;) 정확히&amp;nbsp;표현.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval.seconds&lt;/code&gt;는 호환성을 위해 &lt;code&gt;timedelta&lt;/code&gt;와 같은 나머지 초에 대한 전체 값을 반환. &lt;code&gt;remaining_seconds&lt;/code&gt;를 사용하면 이전에 작동하였던 것과 같이&amp;nbsp;작동함.&lt;/li&gt;
&lt;li&gt;일반적인 형식에대한 구문 분석 성능이&amp;nbsp;향상됨.&lt;/li&gt;
&lt;li&gt;더이상 &lt;code&gt;pytz&lt;/code&gt; 라이브러리를 사용하지 않습니다. 타임존 데이터베이스로 &lt;a href="https://github.com/sdispater/pytzdata"&gt;pytzdata&lt;/a&gt;)를&amp;nbsp;사용.&lt;/li&gt;
&lt;li&gt;Locale, 테스트 인스턴스, formatter는 이제 해당 모듈 메소드를 사용할때 모듈 수준이 gobally 수준으로&amp;nbsp;설정됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deprecated"&gt;Deprecated&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;는 이제 메소드로 사용되며 더이상 프로퍼티로 사용되지 않음. 다음 버전에서 기본 방법으로 사용될&amp;nbsp;예정임.&lt;/li&gt;
&lt;li&gt;년, 월과 관련된 &lt;code&gt;Interval&lt;/code&gt; 속성과 메소드는 더이상 사용되지&amp;nbsp;않음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval.days_exclued_weeks&lt;/code&gt;는 더 이상 사용되지 않음. 대신 &lt;code&gt;remaining_days&lt;/code&gt;를&amp;nbsp;사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fixed"&gt;Fixed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 시간대를 불러올 때 발생하는 예외가&amp;nbsp;수정됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of('day')&lt;/code&gt;는 이제 마이크로 초를 999999으로 바르게&amp;nbsp;설정함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Period&lt;/code&gt; 인스턴스 프로퍼티 정확도가&amp;nbsp;향상됨.&lt;/li&gt;
&lt;li&gt;일부 시간대에서 Pendulum 인스턴스를 초기화할때 정확도가 밀리초 단위로&amp;nbsp;수정되었음.&lt;/li&gt;
&lt;li&gt;Period는 &lt;code&gt;pickle&lt;/code&gt;로 직렬화가&amp;nbsp;가능함.&lt;/li&gt;
&lt;li&gt;시간 단위를 변경하는 &lt;code&gt;minute_()&lt;/code&gt;, &lt;code&gt;second_()&lt;/code&gt;, &lt;code&gt;microsecond_()&lt;/code&gt; 에대한 setter 가&amp;nbsp;수정됨.&lt;/li&gt;
&lt;li&gt;Windows 지원이&amp;nbsp;수정됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="080"&gt;0.8.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pendulum.eustace.io/history/#0-8"&gt;원본&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added_1"&gt;Added&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;with_date()&lt;/code&gt;와 &lt;code&gt;with_tim()&lt;/code&gt;을 대신하는 &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;at()&lt;/code&gt; 메소드가&amp;nbsp;추가됨.&lt;/li&gt;
&lt;li&gt;구문 분석된 문자열과 일치하는 형식을 얻기위한 &lt;code&gt;parse()&lt;/code&gt;에 &lt;code&gt;strict&lt;/code&gt; 키워드 인수를&amp;nbsp;추가.&lt;/li&gt;
&lt;li&gt;시간 간격 길이를 제어하기 위한 &lt;code&gt;range()&lt;/code&gt; 메소드에 시간 량을 더하는 기능&amp;nbsp;추가.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timezone&lt;/code&gt; 클라스에 &lt;code&gt;datetime()&lt;/code&gt; 헬퍼 메소드&amp;nbsp;추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="changed_1"&gt;Changed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ko.wikipedia.org/wiki/ISO_8601"&gt;&lt;span class="caps"&gt;ISO&lt;/span&gt; 8601&lt;/a&gt; 문자열 구문 분석이 개선&amp;nbsp;됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deprecated_1"&gt;Deprecated&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;with_date()&lt;/code&gt;, &lt;code&gt;with_time()&lt;/code&gt;은 더이상 사용되지 않고, &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;at()&lt;/code&gt; 으로&amp;nbsp;사용.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_from_date()&lt;/code&gt;, &lt;code&gt;create_from_time()&lt;/code&gt;은 더이상 사용되지 않고, &lt;code&gt;create()&lt;/code&gt;으로&amp;nbsp;사용.&lt;/li&gt;
&lt;/ul&gt;</content><category term="pendulum"></category><category term="datetime"></category><category term="date"></category><category term="module"></category></entry><entry><title>[번역] JSON API Specification v1.0 (3) - Document Structure (4)</title><link href="https://ujuc.github.io/2016/09/17/json_api_specification_v1.0_(3)_-_document_structure_(4)/" rel="alternate"></link><published>2016-09-17T20:55:00+09:00</published><updated>2018-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-09-17:/2016/09/17/json_api_specification_v1.0_(3)_-_document_structure_(4)/</id><summary type="html">&lt;p&gt;문서 구조에서 리소스 오브젝트에 대한 내용을 정리한다. 검증, 필드&amp;nbsp;부분.&lt;/p&gt;</summary><content type="html">&lt;h3 id="identification"&gt;검증&amp;nbsp;(Identification)&lt;/h3&gt;
&lt;p&gt;모든 &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt;는 &lt;code&gt;id&lt;/code&gt; 멤버와 &lt;code&gt;type&lt;/code&gt; 멤버는 포함하고 있어야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt; &lt;code&gt;id&lt;/code&gt;와 &lt;code&gt;type&lt;/code&gt; 멤버 값은 문자열이어야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt; &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; contain an &lt;code&gt;id&lt;/code&gt; member and a &lt;code&gt;type&lt;/code&gt; member. The values of the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; members &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; be&amp;nbsp;strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;주어진 API에서 각 리소스 오브젝트에서 &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt; 쌍은 반드시 하나인 고유한 리소스임을 증명해야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt; (서버 한 대이거나 단일 작업을 하는 여러 서버에서 제어되는 &lt;span class="caps"&gt;URI&lt;/span&gt; 집합으로 API를&amp;nbsp;구성합니다.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Within a given &lt;span class="caps"&gt;API&lt;/span&gt;, each resource object’s &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; pair &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; identify a single, unique resource. (The set of URIs controlled by a server, or multiple servers acting as one, constitute an &lt;span class="caps"&gt;API&lt;/span&gt;.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 멤버는 공통된 속성과 관계를 공유하는 &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt;를 설명하는 데&amp;nbsp;사용됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; member is used to describe &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt; that share common attributes and&amp;nbsp;relationships.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt; 멤버 값은 &lt;a href="http://jsonapi.org/format/#document-member-names"&gt;member names&lt;/a&gt;와 같은 제약에 따라야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The values of &lt;code&gt;type&lt;/code&gt; members &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; adhere to the same constraints as &lt;a href="http://jsonapi.org/format/#document-member-names"&gt;member names&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: 이 스펙은 inflection 법칙에 얽매이지 않습니다. 또한 &lt;code&gt;type&lt;/code&gt; 값은 복수이거나 단수일 수 있습니다. 그러나 같은 값이 구현된 &lt;span class="caps"&gt;API&lt;/span&gt; 전체에서 일관되게 사용되어야&amp;nbsp;합니다.&lt;/p&gt;
&lt;p&gt;Note: This spec is agnostic about inflection rules, so the value of &lt;code&gt;type&lt;/code&gt; can be either plural or singular. However, the same value should be used consistently throughout an&amp;nbsp;implementation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id="fields"&gt;필드&amp;nbsp;(Fields)&lt;/h3&gt;
&lt;p&gt;리소스 오브젝트에서 &lt;a href="http://jsonapi.org/format/#document-resource-object-attributes"&gt;attributes&lt;/a&gt;과 &lt;a href="http://jsonapi.org/format/#document-resource-object-relationships"&gt;relationships&lt;/a&gt;는 “&lt;a href="http://jsonapi.org/format/#document-resource-object-fields"&gt;fields&lt;/a&gt;”로 묶어서&amp;nbsp;부릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A resource object’s &lt;a href="http://jsonapi.org/format/#document-resource-object-attributes"&gt;attributes&lt;/a&gt; and its &lt;a href="http://jsonapi.org/format/#document-resource-object-relationships"&gt;relationships&lt;/a&gt; are collectively called its “&lt;a href="http://jsonapi.org/format/#document-resource-object-fields"&gt;fields&lt;/a&gt;”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt; 필드는 반드시 각기 다른 공통된 네임스페이스, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;를 공유해야합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt; 다른 말로는, 리소스는 동일한 이름으로 속성 값과 관계를 가질 수 없으나 &lt;code&gt;type&lt;/code&gt;이나 &lt;code&gt;id&lt;/code&gt;에대한 속성이나 관계는 동일한 이름을 가질 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fields for a &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt; &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; share a common namespace with each other and with &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;. In other words, a resource can not have an attribute and relationship with the same name, nor can it have an attribute or relationship named &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>[번역] JSON API Specification v1.0 (3) - Document Structure (3)</title><link href="https://ujuc.github.io/2016/09/17/json_api_specification_v1.0_(3)_-_document_structure_(3)/" rel="alternate"></link><published>2016-09-17T20:46:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-09-17:/2016/09/17/json_api_specification_v1.0_(3)_-_document_structure_(3)/</id><summary type="html">&lt;p&gt;문서 구조에서 리소스 오브젝트에 대한 내용을&amp;nbsp;정리한다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="52-resource-objects"&gt;5.2. 리소스 오브젝트 (Resource&amp;nbsp;Objects)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;“리소스 오브젝트”는 자원을 나타내는 데 사용되는 &lt;span class="caps"&gt;JSON&lt;/span&gt; API에&amp;nbsp;표시됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Resource objects” appear in a &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; document to represent&amp;nbsp;resources.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;리소스 오브젝트는 적어도 다음 최상위 멤버가 포함되어 있어야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A resource object &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; contain at least the following top-level&amp;nbsp;members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;예외: 리소스 오브젝트가 클라이언트에서 고안되고, 서버에서 생성된 새로운 리소스를 나타낼 때는 &lt;code&gt;id&lt;/code&gt; 멤버는 필요하지&amp;nbsp;않습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exception: The &lt;code&gt;id&lt;/code&gt; member is not required when the resource object originates at the client and represents a new resource to be created on the&amp;nbsp;server.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;추가로 리소스 오브젝트는 다음 최상위 멤버 중 하나가 포함될 수도 있습니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt;&amp;gt;&amp;nbsp;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attributes&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#document-resource-object-attributes"&gt;attributes object&lt;/a&gt;는 리소스 데이터 일부를&amp;nbsp;나타냅니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relationships&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#document-resource-object-relationships"&gt;relationships object&lt;/a&gt;는 리소스와 다른 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 리소스간 관계를&amp;nbsp;표현합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt;는 리소스와 관련된 링크를&amp;nbsp;포함합니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#document-meta"&gt;meta object&lt;/a&gt;는 속성과 관계로는 나타낼 수 없는 리소스에 대한 비표준 메타 정보를&amp;nbsp;포함합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition, a resource object &lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt; contain any of these top-level&amp;nbsp;members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attributes&lt;/code&gt;: an &lt;a href="http://jsonapi.org/format/#document-resource-object-attributes"&gt;attributes object&lt;/a&gt; representing some of the resource’s&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relationships&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-resource-object-relationships"&gt;relationships object&lt;/a&gt; describing relationships between the resource and other &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;resources.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt; containing links related to the&amp;nbsp;resource.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-meta"&gt;meta object&lt;/a&gt; containing non-standard meta-information about a resource that can not be represented as an attribute or&amp;nbsp;relationship.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;여기서 아티클(즉, “articles” 타입)이 문서에 표시될 수 있습니다. 그 방법은 다음과&amp;nbsp;같습니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s how an article (i.e. a resource of type “articles”) might appear in a&amp;nbsp;document:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
 &lt;span class="ss"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Rails is Omakase&amp;quot;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;&amp;quot;relationships&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;&amp;quot;links&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;&amp;quot;self&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;/articles/1/relationships/author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;&amp;quot;related&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;/articles/1/author&amp;quot;&lt;/span&gt;
      &lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;people&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;9&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>[번역] JSON API Specification v1.0 (3) - Document Structure (2)</title><link href="https://ujuc.github.io/2016/08/06/json_api_specification_v1.0_(3)_-_document_structure_(2)/" rel="alternate"></link><published>2016-08-06T14:40:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-08-06:/2016/08/06/json_api_specification_v1.0_(3)_-_document_structure_(2)/</id><summary type="html">&lt;p&gt;문서 구조에서 Top level에 대한 내용을&amp;nbsp;정리한다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="51-top-level"&gt;5.1. 최상위 (Top&amp;nbsp;Level)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; 오브젝트는 데이터를 포함한 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 요청과 응답에 대한 근본(root) 입니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt; 이 오브젝트를 문서의 “최상위”라&amp;nbsp;정의합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;span class="caps"&gt;JSON&lt;/span&gt; object &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; be at the root of every &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; request and response containing data. This object defines a document’s “top&amp;nbsp;level”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;문서에서는 최소한 다음 최상위 멤버중 하나를 포함해야 합니다 &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: 문서에서 “일차&amp;nbsp;데이터”&lt;/li&gt;
&lt;li&gt;&lt;code&gt;errors&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#errors"&gt;error objects&lt;/a&gt; 에대한&amp;nbsp;배열&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;: 비표준 메타 정보가 포함되어있는 &lt;a href="http://jsonapi.org/format/#document-meta"&gt;meta object&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A document &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; contain at least one of the following top-level&amp;nbsp;members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt;: the document’s “primary&amp;nbsp;data”&lt;/li&gt;
&lt;li&gt;​&lt;code&gt;errors&lt;/code&gt;: an array of &lt;a href="http://jsonapi.org/format/#errors"&gt;error&amp;nbsp;objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-meta"&gt;meta object&lt;/a&gt; that contains non-standard&amp;nbsp;meta-information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;data&lt;/code&gt;와 &lt;code&gt;errors&lt;/code&gt; 멤버는 동일한 문서에 공존할 수 없습니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The members &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;errors&lt;/code&gt; &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; coexist in the same&amp;nbsp;document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;문서에서는 다음 내용과 같은 최상위 멤버가 포함될 수 있습니다 &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt;&amp;gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jsonapi&lt;/code&gt;: 서버에서 구현을 기술하는&amp;nbsp;오브젝트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt;는 일차 데이터와&amp;nbsp;연결됩니다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;included&lt;/code&gt;: 포함된 리소스중 각기 다르거나 일차 데이터와 관련된 &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt;에 대한&amp;nbsp;배열.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A document &lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt; contain any of these top-level&amp;nbsp;members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jsonapi&lt;/code&gt;: an object describing the server’s&amp;nbsp;implementation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;links&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt; related to the primary&amp;nbsp;data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;included&lt;/code&gt;: an array of &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt; that are related to the primary data and/or each other (“included&amp;nbsp;resources”).&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;문서에 최상위 &lt;code&gt;data&lt;/code&gt; 키가 포함되지 않은 경우, &lt;code&gt;included&lt;/code&gt; 멤버 중 하나에 존재할 수 없습니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a document does not contain a top-level &lt;code&gt;data&lt;/code&gt; key, the &lt;code&gt;included&lt;/code&gt; member &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; be present&amp;nbsp;either.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;최상위 &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt;는 다음 맴버를 포함할 수 있습니다 &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt;&amp;gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;: 현재 응답 문서를 생성한 &lt;a href="http://jsonapi.org/format/#document-links"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related&lt;/code&gt;: 일차 데이터와 리소스간 관계를 나타내는 &lt;a href="http://jsonapi.org/format/#document-resource-object-related-resource-links"&gt;related resource link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;일차 데이터에 대한 &lt;a href="http://jsonapi.org/format/#fetching-pagination"&gt;pagination&lt;/a&gt;&amp;nbsp;링크.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The top-level &lt;a href="http://jsonapi.org/format/#document-links"&gt;links object&lt;/a&gt; &lt;strong&gt;&lt;span class="caps"&gt;MAY&lt;/span&gt;&lt;/strong&gt; contain the following&amp;nbsp;members:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self&lt;/code&gt;: the &lt;a href="http://jsonapi.org/format/#document-links"&gt;link&lt;/a&gt; that generated the current response&amp;nbsp;document.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;related&lt;/code&gt;: a &lt;a href="http://jsonapi.org/format/#document-resource-object-related-resource-links"&gt;related resource link&lt;/a&gt; when the primary data represents a resource&amp;nbsp;relationship.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jsonapi.org/format/#fetching-pagination"&gt;pagination&lt;/a&gt; links for the primary&amp;nbsp;data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;문서에서 “일차 데이터”는 요청에의해 대상이되는 자원의 컬렉션이나 자원 관계를&amp;nbsp;나타냅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The document’s “primary data” is a representation of the resource or collection of resources targeted by a&amp;nbsp;request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일차 데이터는 다음 중 하나 입니다 &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단일 자원을 대상으로 요구하는 단일 &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt;, 단일 &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier object&lt;/a&gt;, &lt;code&gt;null&lt;/code&gt;을&amp;nbsp;나타냅니다.&lt;/li&gt;
&lt;li&gt;타겟 리소스 컬렉션 요청에 대한 &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt; 배열, &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier objects&lt;/a&gt; 배열, 빈 배열 (&lt;code&gt;[]&lt;/code&gt;)를&amp;nbsp;나타냅니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Primary data &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; be&amp;nbsp;either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a single &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource object&lt;/a&gt;, a single &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier object&lt;/a&gt;, or &lt;code&gt;null&lt;/code&gt;, for requests that target single&amp;nbsp;resources&lt;/li&gt;
&lt;li&gt;an array of &lt;a href="http://jsonapi.org/format/#document-resource-objects"&gt;resource objects&lt;/a&gt;, an array of &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier objects&lt;/a&gt;, or an empty array (&lt;code&gt;[]&lt;/code&gt;), for requests that target resource&amp;nbsp;collections&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;예를 들어, 다음 일차 데이터는 단일 리소스 오브젝트를&amp;nbsp;나타냅니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, the following primary data is a single resource&amp;nbsp;object:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
 &lt;span class="ss"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s attributes&lt;/span&gt;
&lt;span class="s1"&gt;    },&lt;/span&gt;
&lt;span class="s1"&gt;    &amp;quot;relationships&amp;quot;: {&lt;/span&gt;
&lt;span class="s1"&gt;      // ... this article&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;relationships&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음 일차 데이터는 동일한 리소스를 참조하는 단일 &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier object&lt;/a&gt;입니다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The following primary data is a single &lt;a href="http://jsonapi.org/format/#document-resource-identifier-objects"&gt;resource identifier object&lt;/a&gt; that references the same&amp;nbsp;resource:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
 &lt;span class="ss"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
  &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;리소스에 대한 논리 컬렉션은 아이템 하나만 있거나 비어있더라도 배열로 표현합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A logical collection of resources &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; be represented as an array, even if it only contains one item or is&amp;nbsp;empty.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>[번역] JSON API Specification v1.0 (3) - Document Structure (1)</title><link href="https://ujuc.github.io/2016/07/26/json_api_specification_v1.0_(3)_-_document_structure_(1)/" rel="alternate"></link><published>2016-07-26T02:06:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-07-26:/2016/07/26/json_api_specification_v1.0_(3)_-_document_structure_(1)/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API에서 사용하는 문서 구조에 대해서 이야기한다. 너무 길어서 잘개&amp;nbsp;나눴다.&lt;/p&gt;</summary><content type="html">&lt;h1 id="5-document-structure"&gt;5. 문서 구조 (Document&amp;nbsp;Structure)&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;이 세션에서는 미디어 타입 &lt;a href="http://www.iana.org/assignments/media-types/application/vnd.api+json"&gt;&lt;code&gt;application/vnd.api+json&lt;/code&gt;&lt;/a&gt;에서 확인가능한 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 문서 구조에 대해 설명합니다. &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 문서는 JavaScript Object Notation (&lt;span class="caps"&gt;JSON&lt;/span&gt;) &lt;a href="http://tools.ietf.org/html/rfc7159"&gt;&lt;span class="caps"&gt;RFC7159&lt;/span&gt;&lt;/a&gt;에 정의&amp;nbsp;되어있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This section describes the structure of a &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; document, which is identified by the media type &lt;a href="http://www.iana.org/assignments/media-types/application/vnd.api+json"&gt;&lt;code&gt;application/vnd.api+json&lt;/code&gt;&lt;/a&gt;. &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; documents are defined in JavaScript Object Notation (&lt;span class="caps"&gt;JSON&lt;/span&gt;) &lt;a href="http://tools.ietf.org/html/rfc7159"&gt;&lt;span class="caps"&gt;RFC7159&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;동일한 미디어 타입은 요청과 응답 문서에서 모두 사용되지만, 특정 상황에서는 한 곳에서나 다른 곳에 적용이 가능합니다. 이런 차이를 다음 내용으로&amp;nbsp;부릅니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Although the same media type is used for both request and response documents, certain aspects are only applicable to one or the other. These differences are called out&amp;nbsp;below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;별도로 명시하지 않는한, 사양에 정의된 객체는 임의의 추가 멤버를 포함할 수 없습니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt;&amp;gt; 클라이언트와 서버 구현시 이 사양에서 인식되지 않는 멤버는 무시합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unless otherwise noted, objects defined by this specification &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; contain any additional members. Client and server implementations &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; ignore members not recognized by this&amp;nbsp;specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: 이러한 조건은 사양에 이것저것 더하고 변경을 통한 진화를&amp;nbsp;허용합니다.&lt;/p&gt;
&lt;p&gt;Note: These conditions allow this specification to evolve through additive&amp;nbsp;changes.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>[번역] JSON API Specification v1.0 (2)</title><link href="https://ujuc.github.io/2016/07/16/json_api_specification_v1.0_(2)/" rel="alternate"></link><published>2016-07-16T14:53:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-07-16:/2016/07/16/json_api_specification_v1.0_(2)/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API를 사용하는 서버와 클라이언트에서 처리를 해야되는 것들에 대해서&amp;nbsp;이야기한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API를 사용하는 서버와 클르이언트에서 처리를 해야되는 것들에 대해서&amp;nbsp;이야기한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="4-content-negotiation"&gt;4. 컨텐츠 처리 (Content&amp;nbsp;Negotiation)&lt;/h1&gt;
&lt;hr&gt;
&lt;h2 id="client-responsibilities"&gt;클라이언트 의무 사항 (Client&amp;nbsp;Responsibilities)&lt;/h2&gt;
&lt;p&gt;클라이언트는 해더에 &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt;를 포함하고 다른 미디어 타입 매개변수를 포함하지 않는 요청 문서를 생성하여 모든 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 데이터를 보내야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clients &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; send all &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; data in request documents with the header &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt; without any media type&amp;nbsp;parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클라이언트는 &lt;code&gt;Accept&lt;/code&gt; 해더에 작성된 미디어 타입 매개변수 중 맨마지막 하나를 지정하여 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 미디어 타입을 포함해야 합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clients that include the &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; media type in their &lt;code&gt;Accept&lt;/code&gt; header &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; specify the media type there at least once without any media type&amp;nbsp;parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클라이언트는 응답 문서에 대한 &lt;code&gt;Content-Type&lt;/code&gt; 해더에서 받은 &lt;code&gt;application/vnd.api+json&lt;/code&gt; 미디어 타입에대해 어떠한 매개변수라도 무시합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clients &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; ignore any parameters for the &lt;code&gt;application/vnd.api+json&lt;/code&gt; media type received in the &lt;code&gt;Content-Type&lt;/code&gt; header of response&amp;nbsp;documents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id="server-responsibilities"&gt;서버 의무 사항 (Server&amp;nbsp;Responsibilities)&lt;/h2&gt;
&lt;p&gt;서버는 모든 미디어 타입 매개 변수를 지정하지 않고서 해더 &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt;​와 함께 응답 문서에 모든 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 데이터를 전송합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servers &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; send all &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; data in response documents with the header &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt; without any media type&amp;nbsp;parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;서버는 요청이 임의의 미디어 타입 매개변수를 가지는 헤더 &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt;로 지정하면 &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; 상태 코드로 응답합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servers &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; respond with a &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; status code if a request specifies the header &lt;code&gt;Content-Type: application/vnd.api+json&lt;/code&gt; with any media type&amp;nbsp;parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;서버는 요청한 &lt;code&gt;Accept&lt;/code&gt; 해더에 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 미디어 타입을 포함하고 있으며 해당 미디어 타입에대한 모든 인스턴스에서 미디어 타입 매개변수가 수정된 경우, &lt;code&gt;406 Not Acceptable&lt;/code&gt; 상태 코드로 응답합니다. &amp;lt;&lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Servers &lt;strong&gt;&lt;span class="caps"&gt;MUST&lt;/span&gt;&lt;/strong&gt; respond with a &lt;code&gt;406 Not Acceptable&lt;/code&gt; status code if a request’s &lt;code&gt;Accept&lt;/code&gt; header contains the &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; media type and all instances of that media type are modified with media type&amp;nbsp;parameters.&lt;/p&gt;
&lt;p&gt;Note: 컨텐츠 처리 요구사항은 향후 버전에서 확장된 처리 방법과 버전 관리를 위한 미디어 타입 매개 변수를 사용할 수 있도록&amp;nbsp;존재합니다.&lt;/p&gt;
&lt;p&gt;Note: The content negotiation requirements exist to allow future versions of this specification to use media type parameters for extension negotiation and&amp;nbsp;versioning.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>[번역] JSON API Specification v1.0 (1)</title><link href="https://ujuc.github.io/2016/07/16/json_api_specification_v1.0_(1)/" rel="alternate"></link><published>2016-07-16T12:08:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-07-16:/2016/07/16/json_api_specification_v1.0_(1)/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 쪽 문서를 볼일 이있어서 &lt;span class="caps"&gt;JSON&lt;/span&gt; API를 확인하였다. 그것에 대한 기능 문서 번역본. 나중에 보고&amp;nbsp;해야지&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 문서이다. 해당 문서는 &lt;a href="http://jsonapi.org/format/"&gt;여기서&lt;/a&gt; 확인이 가능하다. 라이센스는&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/"&gt;퍼블릭 도메인 라이센스&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;나중에 번역한 것이 도움이 되길&amp;nbsp;바라며&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="1-status"&gt;1. 문서 상태&amp;nbsp;(Status)&lt;/h1&gt;
&lt;p&gt;이 페이지는 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 마지막으로 공개된 버전 내용을 담고 있습니다. 현재버전은 1.0 입니다. &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 새로운 버전에서는 &lt;strong&gt;이전 문서와 호환을 위해&lt;/strong&gt; 삭제하지 않고, 오로지 추가만 됩니다. 추가 사항들은 우리 &lt;a href="http://discuss.jsonapi.org/"&gt;discussion forum&lt;/a&gt;에서 확인할수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page represents the latest published version of &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, which is currently version 1.0. New versions of &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; &lt;strong&gt;will always be backwards compatible&lt;/strong&gt; using a never remove, only add strategy. Additions can be proposed in our &lt;a href="http://discuss.jsonapi.org/"&gt;discussion forum&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;스펙 문서상 에러를 발견하거나, 구현한다면 이슈를 등록하거나 PR을 &lt;a href="https://github.com/json-api/json-api"&gt;GitHub repository&lt;/a&gt;로 해주면&amp;nbsp;됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you catch an error in the specification’s text, or if you write an implementation, please let us know by opening an issue or pull request at our &lt;a href="https://github.com/json-api/json-api"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id="2-introduction"&gt;2. 소개&amp;nbsp;(Introduction)&lt;/h1&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API는 클라이언트에서 요구하는 리소스를 제공하거나 수정하는 것에 대해 서버가 어떻게 대응 할 것인지에 대한&amp;nbsp;사양입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those&amp;nbsp;requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API는 클라이언트와 서버사이에서 전송되는 데이터 총량과 요청 수에대해 최소화하도록 설계되었습니다. 가독성, 유연성, 검색 기능을 잃지 않고 효율성을 높일수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or&amp;nbsp;discoverability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; API는 데이터를 변경하여 &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 미디어 타입 (application/vnd.api+json) 을 사용하게 하는것이&amp;nbsp;필요합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; requires use of the &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; media type (&lt;a href="http://www.iana.org/assignments/media-types/application/vnd.api+json"&gt;application/vnd.api+json&lt;/a&gt;) for exchanging&amp;nbsp;data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id="3-conventions"&gt;3. 규칙&amp;nbsp;(Conventions)&lt;/h1&gt;
&lt;p&gt;The key words “&lt;span class="caps"&gt;MUST&lt;/span&gt;”, “&lt;span class="caps"&gt;MUST&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;REQUIRED&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt;”, “&lt;span class="caps"&gt;SHALL&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;SHOULD&lt;/span&gt;”, “&lt;span class="caps"&gt;SHOULD&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt;”, “&lt;span class="caps"&gt;RECOMMENDED&lt;/span&gt;”, “&lt;span class="caps"&gt;MAY&lt;/span&gt;”, and “&lt;span class="caps"&gt;OPTIONAL&lt;/span&gt;” in this document are to be interpreted as described in &lt;a href="http://tools.ietf.org/html/rfc2119"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119&lt;/a&gt; (&lt;a href="http://techhtml.github.io/rfc/RFC2119.html"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 2119 한국어 번역&lt;/a&gt;).&lt;/p&gt;</content><category term="json"></category><category term="api"></category><category term="specification"></category><category term="json api"></category><category term="스펙 문서"></category><category term="transelate"></category></entry><entry><title>파이썬으로 내가 쓸 셸 만들기</title><link href="https://ujuc.github.io/2016/07/08/pa-i-sseon-eu-ro_nae-ga_sseur_syer_man-deur-gi/" rel="alternate"></link><published>2016-07-08T00:29:00+09:00</published><updated>2016-07-08T00:29:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-07-08:/2016/07/08/pa-i-sseon-eu-ro_nae-ga_sseur_syer_man-deur-gi/</id><summary type="html">&lt;p&gt;python &lt;code&gt;cmd&lt;/code&gt; 라이브러리를 가지고서 셸을 만들어서 작업을 할까라는 생각을 가지고 있었는데&amp;hellip; 다른 방법이지만 그것을 실제로 진행한 내용이 있어서&amp;nbsp;정리용.&lt;/p&gt;</summary><content type="html">&lt;p&gt;매주 python관련 뉴스들이 오는데 이번에는 흥미로운 것이 있어서 이렇게&amp;nbsp;남긴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackercollider.com/articles/2016/07/05/create-your-own-shell-in-python-part-1/"&gt;Create Your Own Shell in Python: Part&amp;nbsp;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackercollider.com/articles/2016/07/06/create-your-own-shell-in-python-part-2/"&gt;Create Your Own Shell in Python: Part&amp;nbsp;2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/supasate/yosh"&gt;supasate/yosh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yosh&lt;/code&gt; 프로젝트로 간단히 Python을 이용해서 셸을 구성할 수 있도록 도와준다. 그리고 이것을 이용해서 조금이나마 편하게 사용할 수 있음을 이야기해주고도 있다.&lt;br&gt;
다른 것보다는 손쉽게 내가 원하는 셸을 만들어서 사용할 수 있다는 점과 내가 2014년에 PyconKR에서 봤던 것들로 구성만 하고 있엇던 &lt;a href="https://docs.python.org/3.5/library/cmd.html"&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt; 라이브러리가 아닌 &lt;a href="https://docs.python.org/3.5/library/shlex.html"&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; 라이브러리를 사용해서 셸에서 입력하는 것과 유사하게 만들어주는 것으로&amp;nbsp;보인다.&lt;/p&gt;
&lt;p&gt;첫번째로 부럽다. 생각만했지 실행으로 옮기지는 못했다. 내가 사용하는 셸 프로그램들을 묶어서 내가 원하는 생각대로 실행할 수 있도록 하는 것. 쉽지 않다고 생각만 했지. 언젠가 하려고만 했지. 이렇게까지 만들 수 있으리라 생각하지&amp;nbsp;못했다.&lt;/p&gt;
&lt;p&gt;한번 도전해봐야겠다. 처음 생각했던 &lt;a href="https://docs.python.org/3.5/library/cmd.html"&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt; 라이브러리로 기본 라이브러리 구성을 남겨두고, 작업을 진행할 수&amp;nbsp;있도록.&lt;/p&gt;</content><category term="python"></category><category term="shell"></category><category term="yosh"></category><category term="Your Own SHell"></category></entry><entry><title>Edison - Bluetooth 설정</title><link href="https://ujuc.github.io/2016/06/22/edison_-_bluetooth_seor-jeong/" rel="alternate"></link><published>2016-06-22T00:12:00+09:00</published><updated>2016-06-22T00:12:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-06-22:/2016/06/22/edison_-_bluetooth_seor-jeong/</id><summary type="html">&lt;p&gt;오래된 글이다 그냥 내놓는다. IBM에서 나왔던 Edison 에서 bluetooth 설정에 관련된&amp;nbsp;내용이다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;오래된 글이다 잠시 IoT로 하면서 기본적으로 설정하면서 나왔던 것. 정리한&amp;nbsp;내용이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="bluetooth"&gt;Bluetooth&amp;nbsp;설정&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Edison 에서는 Bluetooth 제어 모듈로 BlueZ를 사용하고&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;리눅스에서&amp;nbsp;다쓴다.&lt;/li&gt;
&lt;li&gt;그런데 개발이 중단된것같은 느낌이 들긴했다. 그냥&amp;nbsp;느낌임.&lt;/li&gt;
&lt;li&gt;패키지 구조는 아래와&amp;nbsp;같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;설정&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간단하다. 기본적으로 Bluez가 설치가되어 있으니 그냥 켜주기만하면&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;bluetooth&lt;/code&gt; 데몬을&amp;nbsp;실행시켜준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="n"&gt;bluetooth&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="k"&gt;start&lt;/span&gt; &lt;span class="n"&gt;bluetooth&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="n"&gt;bluetooth&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;블루투스를 사용할 수 있도록 모듈을&amp;nbsp;활성화시켜준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rfkill&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;rfkill&lt;/span&gt; &lt;span class="n"&gt;unblock&lt;/span&gt; &lt;span class="n"&gt;bluetooth&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;어플리케이션&amp;nbsp;사용&lt;/h2&gt;
&lt;h3 id="bluetoothctl"&gt;&lt;code&gt;bluetoothctl&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;쉘형식으로 접근하여 블루투스를 설정할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;agent&lt;/code&gt;를 설정하여 범위를 줄여서 확인할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;나머지 사용법은 &lt;a href="http://download.intel.com/support/edison/sb/edisonbluetooth_331704004.pdf"&gt;블루투스 가이드&lt;/a&gt;를 보도록&amp;nbsp;하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hciconfig"&gt;&lt;code&gt;hciconfig&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;와 같은 &lt;code&gt;hci&lt;/code&gt;관련 디바이스들의 상태를 확인할 수 있는&amp;nbsp;툴이다.&lt;/li&gt;
&lt;li&gt;사용법은 동일하며, 몇몇 설정이&amp;nbsp;되어있어야한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hciconfig hci0 sspmode 1&lt;/code&gt;: &lt;code&gt;hci0&lt;/code&gt;에 간단한 페어링 설정을 활성화 한다는&amp;nbsp;의미이다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hciconfig hci0 sspmode&lt;/code&gt;: &lt;code&gt;hci0&lt;/code&gt;에 설정된 간략한 페어링 설정이 어떻게 되어있는지를 확인한다는&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hciconfig hci0 lestates&lt;/code&gt;: &lt;span class="caps"&gt;LE&lt;/span&gt; 모듈 관련되서 설정들을 확인할 수&amp;nbsp;있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="hcitool"&gt;&lt;code&gt;hcitool&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;간단한 명령어로 &lt;code&gt;bluetoothctl&lt;/code&gt;을 사용하지 않고서 작업을 진행할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hcitool scan&lt;/code&gt;을 이용하여 블루투스 기기를 검색할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;옵션들을 이용해서 더 다양한 작업들이 가능하게&amp;nbsp;해놨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pybluez"&gt;&lt;code&gt;pybluez&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BlueZ의 Python&amp;nbsp;라이브러리인데&amp;hellip;&lt;/li&gt;
&lt;li&gt;사람들은 &lt;code&gt;hcitool&lt;/code&gt;을 더 많이 쓰는&amp;nbsp;것으로&amp;hellip;&lt;/li&gt;
&lt;li&gt;C맵핑을 해놔서 왠만한 작업들은 가능한 것으로 보이나 문서가 빈약하여 사용하기 쉽지&amp;nbsp;않다.&lt;/li&gt;
&lt;li&gt;뭔가 추가를 하려면 코드를&amp;nbsp;봐야된다.&lt;/li&gt;
&lt;li&gt;그래서&amp;nbsp;잘안쓰나&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://software.intel.com/en-us/articles/intel-edison-board-getting-started-with-bluetooth"&gt;Intel Edison Board Getting Started with&amp;nbsp;Bluetooth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://download.intel.com/support/edison/sb/edisonbluetooth_331704004.pdf"&gt;Intel Edison Bluetooth&amp;nbsp;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/karulis/pybluez"&gt;pybluez&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/intel-iot-devkit/edison-guides/wiki"&gt;edison-guies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://software.intel.com/en-us/articles/connecting-to-intel-edison-from-android-with-bluetooth-le-ble"&gt;Connecting to Intel Edison from Android with Bluetooth &lt;span class="caps"&gt;LE&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="edison"></category><category term="bluetooth"></category><category term="iot"></category></entry><entry><title>독특하다. Onshape</title><link href="https://ujuc.github.io/2016/06/18/dog-teug-ha-da_onshape/" rel="alternate"></link><published>2016-06-18T11:41:00+09:00</published><updated>2016-06-18T11:41:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-06-18:/2016/06/18/dog-teug-ha-da_onshape/</id><summary type="html">&lt;p&gt;독특하다. 정말 독특하다. 웹서비스에서 3D 캐드를 구현하여 작업할 수&amp;nbsp;있다니.&lt;/p&gt;</summary><content type="html">&lt;p&gt;페이스북에서 로봇 그룹에 웹 서비스 3D &lt;span class="caps"&gt;CAD&lt;/span&gt; 서비스인 &lt;a href="https://www.onshape.com/"&gt;Onshape&lt;/a&gt;가&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;처음에는 그냥 CAD계에서 사용하는 Github로 봤는데. 이건 Github가 아니라 3D &lt;span class="caps"&gt;CAD&lt;/span&gt; 프로그램을 할 수 있는 사이트이다.&lt;br&gt;
그것도 정말&amp;nbsp;괜찮은&amp;hellip;&lt;/p&gt;
&lt;p&gt;내가 마지막으로 기억했던 것은. CATIA6에서 중앙에 서버를 두고 작업을 할 수 있도록 하였었는데. 이건 그것보다 더 많은것을 하고&amp;nbsp;있구나&amp;hellip;&lt;/p&gt;
&lt;p&gt;그리고 학교 같은데서 아이들이 쓰면 좋겠구나. 50G까지는 무료로 주는 서비스이니 개인적으로 가입해서 작업을 하고 해당 프로그램으로 출력도가능할 것같은데&amp;hellip;&lt;br&gt;
써봐야.. 아는&amp;nbsp;부분이고&amp;hellip;&lt;/p&gt;
&lt;p&gt;좋다. 부럽다. 그리고 저들은 저만치간다. 우리나라에서는 이 서비스를 쓸 업체는 없을 것이다. 그들은 이런것에 돈을 내는 것보다 자기들이 투자하지않고 돈을 버는데 더 많은 신경을&amp;nbsp;쓸것이기에&amp;hellip;&lt;/p&gt;
&lt;p&gt;자세한건 &lt;a href="https://www.onshape.com/3d-cad"&gt;여기&lt;/a&gt;서&amp;nbsp;확인하자.&lt;/p&gt;</content><category term="cad"></category><category term="cloud"></category><category term="engineering"></category><category term="3d cad"></category></entry><entry><title>Qualcomm Atheros 드라이버 설치 - 업글</title><link href="https://ujuc.github.io/2016/06/18/qualcomm_atheros_deu-ra-i-beo_seor-ci_-_eob-geur/" rel="alternate"></link><published>2016-06-18T02:13:00+09:00</published><updated>2016-06-18T02:13:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-06-18:/2016/06/18/qualcomm_atheros_deu-ra-i-beo_seor-ci_-_eob-geur/</id><summary type="html">&lt;p&gt;이전 글에서 설치한건 너무 느렸다. 그러나 정식 버전이 패키지로 들어가면서 조금&amp;nbsp;나아졌다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://ujuc.github.io/2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/"&gt;이전글&lt;/a&gt;로 글로 설치를 하고 썼으나 제대로된 펌웨어가 아닌지 설정을 해주고 설치했어야 했는데 그렇지 않아서 인지 1Mbps 로만 작동을&amp;nbsp;하였다.&lt;/p&gt;
&lt;p&gt;몇번 재설치 끝에 귀찮아서 다시 우분투를 설치중. &lt;a href="http://ask.ubuntu.com/questions/708061/aualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation"&gt;스택오프플로 글&lt;/a&gt;이 업데이트가 되어있어 설치를 하였더니 원 속도까지&amp;nbsp;나오더라.&lt;/p&gt;
&lt;p&gt;그런데 이게 좀&amp;nbsp;그런게&amp;hellip;&lt;/p&gt;
&lt;p&gt;커널은 4.2이상. 16.04가 버전업되면서 커널도 업글이되어서 이건&amp;nbsp;넘어갔다.&lt;/p&gt;
&lt;p&gt;Qualcomm atheros 10k 드라이버가 들어있는 패키지는 &lt;code&gt;linux-firmware 1.158&lt;/code&gt;. 16.04에서 공식 지원하는 버전은 &lt;code&gt;1.157&lt;/code&gt;. 아마 6개월쯤 지나면 이것도 올라가겠지만 지금은 올라가지 않았으니. &lt;code&gt;1.158&lt;/code&gt;은 16.10에 추가될 패키지로 지금은 테스팅 버전이다. 이것을 가져다가 설치하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;어짜피 기본 내용만 맞으면되니 &lt;code&gt;dpkg&lt;/code&gt;를 이용해서&amp;nbsp;설치해주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://mirrors.kernel.org/ubuntu/pool/main/l/linux-firmware/linux-firmware_1.158_all.deb
sudo dpkg -i linux-firmware_1.158_all.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고 리붓해주면 손쉽게&amp;hellip; 설치가&amp;nbsp;가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고: &lt;a href="http://packages.ubuntu.com/search?keywords=linux-firmware"&gt;Ubuntu&amp;nbsp;package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="lenovo"></category><category term="ubuntu"></category><category term="qualcomm"></category><category term="driver"></category><category term="wireless"></category><category term="16.04"></category></entry><entry><title>Spec Architecture Design Guide Restructure (번역)</title><link href="https://ujuc.github.io/2016/05/29/spec-architecture-design-guide-restructure%20(%EB%B2%88%EC%97%AD)/" rel="alternate"></link><published>2016-05-29T13:43:00+09:00</published><updated>2016-05-29T13:43:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-05-29:/2016/05/29/spec-architecture-design-guide-restructure (번역)/</id><summary type="html">&lt;p&gt;이번 스펙문서로 Architecture Design Guide를 새롭게 구축하는 것에 대해서&amp;nbsp;올라왔다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://docs.openstack.org/arch-design/"&gt;Architecture Design Guide&lt;/a&gt;가 새롭게 작성이되려나보다. 그것에 대한 스펙문서&amp;nbsp;번역이다.&lt;/p&gt;
&lt;p&gt;원문: &lt;a href="http://specs.openstack.org/openstack/docs-specs/specs/newton/arch-guide-restructure.html"&gt;Architecture Design Guide&amp;nbsp;Restructure&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="_1"&gt;문제점&amp;nbsp;설명&lt;/h2&gt;
&lt;p&gt;지금의 Architecture Design Giude는 주로 사용 사례를 중심으로 구성되어 있습니다. 그러나 OpenStack 클라우드를 설계함에 있어 여러 사용 사례에서 기능들이 조합되어 사용되는 경우가&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;사용자가 모든 요구 사항을 고려할 수 있는 OpenStack 클라우드 아키텍처를 결정하는 것을 돕기위한 정보로 재구성하는 것이 필요합니다. 개발중이거나 단계적으로 반영을 하거나, 실제 서비스하고 있는 환경에서 OpenStack을 설계할때 필요한 정보를 추가해야합니다. 이번 제안은 클라우드에대한 아키텍처 컨셉과 다양한 OpenStack 프로젝트 추상화에 대한 더 상세한 구조를 개발하는 것입니다. 이것을 통해서 쉽게 가이드를 유지하고 업데이트 할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h2 id="_2"&gt;변경사항&amp;nbsp;제안&lt;/h2&gt;
&lt;p&gt;이번 가이드에서 제안되는 구조는 일반적인 클라우드 사용사례, 일반적인 아키텍처 컨셉, 주요 클라우드 아키텍처 구성요소에서 장애가 발생하였을때에 대한 자세한 설명과 그것에 대한 설계 방법 등을&amp;nbsp;설명합니다.&lt;/p&gt;
&lt;p&gt;각 장은 다음과 같이&amp;nbsp;설계됩니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Technical&amp;nbsp;Detail&lt;/li&gt;
&lt;li&gt;Capacity and&amp;nbsp;Scale&lt;/li&gt;
&lt;li&gt;High&amp;nbsp;Availablility&lt;/li&gt;
&lt;li&gt;Operator&amp;nbsp;Requirements&lt;/li&gt;
&lt;li&gt;Deployment&amp;nbsp;Considerations&lt;/li&gt;
&lt;li&gt;Maintenance&amp;nbsp;Considerations&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;표제에서 제공될 정보에 대한 형식은 따로 가이드라인을 제공할 예정입니다. 이것을 이용하여 정보를 호출하기위해 특정한 필요학 있는 경우에만&amp;nbsp;사용됩니다.&lt;/p&gt;
&lt;h2 id="_3"&gt;목차&amp;nbsp;제안&lt;/h2&gt;
&lt;p&gt;새로운 Architecture Design Guide는 다음과 같이 새롭게&amp;nbsp;구성됩니다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;General&amp;nbsp;Overview&lt;/li&gt;
&lt;li&gt;Use Cases&lt;ol&gt;
&lt;li&gt;Development Cloud&lt;ol&gt;
&lt;li&gt;Stackeholder&lt;/li&gt;
&lt;li&gt;User&amp;nbsp;Stories&lt;/li&gt;
&lt;li&gt;Designe&amp;nbsp;Model&lt;/li&gt;
&lt;li&gt;Component Block&amp;nbsp;Diagram&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;General Compute Cloud&lt;ol&gt;
&lt;li&gt;Stakeholders&lt;/li&gt;
&lt;li&gt;User&amp;nbsp;Stories&lt;/li&gt;
&lt;li&gt;Design&amp;nbsp;Model&lt;/li&gt;
&lt;li&gt;Component Block&amp;nbsp;Diagram&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Web Scale Cloud&lt;ol&gt;
&lt;li&gt;Stakeholders&lt;/li&gt;
&lt;li&gt;User&amp;nbsp;Stories&lt;/li&gt;
&lt;li&gt;Design&amp;nbsp;Model&lt;/li&gt;
&lt;li&gt;Component Block&amp;nbsp;Diagram&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Public Cloud&lt;ol&gt;
&lt;li&gt;Stakeholders&lt;/li&gt;
&lt;li&gt;User&amp;nbsp;Stories&lt;/li&gt;
&lt;li&gt;Design&amp;nbsp;Model&lt;/li&gt;
&lt;li&gt;Component Block&amp;nbsp;Diagram&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;High Availability&lt;ol&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Capacity and Scale&lt;ol&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Design&lt;ol&gt;
&lt;li&gt;Compute&lt;/li&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Identity&lt;/li&gt;
&lt;li&gt;Iamge&lt;/li&gt;
&lt;li&gt;Control&amp;nbsp;Plane&lt;/li&gt;
&lt;li&gt;Dashboard and&amp;nbsp;APIs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;뭐 이정도까지&amp;hellip; 더해봤자&amp;hellip; 의미가&amp;nbsp;없다&amp;hellip;&lt;/p&gt;</content><category term="openstack"></category><category term="documents"></category><category term="spec"></category><category term="architecture design guide"></category></entry><entry><title>iTerm2(nightly) Shell Integration &amp; Utilities</title><link href="https://ujuc.github.io/2016/05/21/iterm2(nightly)-shell-integration-&amp;-utilities/" rel="alternate"></link><published>2016-05-21T00:06:00+09:00</published><updated>2016-05-21T00:06:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-05-21:/2016/05/21/iterm2(nightly)-shell-integration-&amp;-utilities/</id><summary type="html">&lt;p&gt;오랜만에 iTerm2 nightly 버전을 받았다. 새로운 기능을 보았다.!&amp;nbsp;남긴다.!&lt;/p&gt;</summary><content type="html">&lt;p&gt;저번에 베타 버전을 설치했던 것으로 기억했던 iTerm2을 버리고 Stable 버전으로&amp;nbsp;넘어갔다가&amp;hellip;&lt;/p&gt;
&lt;p&gt;아&amp;hellip; 이건 아니다 싶어서 다시 nightly 버전으로 점프하여 설치를&amp;nbsp;하였더니&amp;hellip;&lt;/p&gt;
&lt;p&gt;뜨는&amp;nbsp;무언가.&lt;/p&gt;
&lt;p&gt;&lt;img alt="install shell integration" src="https://ujuc.github.io/img/2016-05-21_warning_shell_integration.png"&gt;&lt;/p&gt;
&lt;p&gt;무심코 누른 &lt;code&gt;Install Shell Integration &amp;amp; Utilities&lt;/code&gt;. 그리고&amp;nbsp;설치&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img alt="installing shell integration" src="https://ujuc.github.io/img/2016-05-21_installing_shell_integration.png"&gt;&lt;/p&gt;
&lt;p&gt;음.! 뭔가&amp;nbsp;이상하다&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;these&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="n"&gt;imgcat&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;
  &lt;span class="n"&gt;Displays&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;it2dl&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;
  &lt;span class="n"&gt;Downloads&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;specified&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;saving&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;Downloads&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;????&lt;/p&gt;
&lt;p&gt;그래서&amp;nbsp;실행해봤다.!&lt;/p&gt;
&lt;h3 id="imgcat"&gt;imgcat&lt;/h3&gt;
&lt;p&gt;&lt;img alt="imgcat image!" src="https://ujuc.github.io/img/2016-05-21_imgcat_image.png"&gt;&lt;/p&gt;
&lt;p&gt;용량이 크면 여는데 오래걸린다. Raw 파일은 정말 오래걸린다. tif 파일은 정말&amp;hellip; (70MB가 넘어가니 엄청&amp;nbsp;걸린다.)&lt;/p&gt;
&lt;h3 id="it2dl"&gt;it2dl&lt;/h3&gt;
&lt;p&gt;모르겠다&amp;nbsp;관심없다.&lt;/p&gt;
&lt;h3 id="_1"&gt;설치를 못했다나.. 다시 해보고&amp;nbsp;싶다면&amp;hellip;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="menu" src="https://ujuc.github.io/img/2016-05-21_menu.png"&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gnachman/iterm2-website/blob/master/source/utilities.md"&gt;iterm2 -&amp;nbsp;utilites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="iTerm2"></category><category term="terminal"></category><category term="Mac OS X"></category></entry><entry><title>Select text of vim with set mouse=a enabled</title><link href="https://ujuc.github.io/2016/05/02/select-text-of-vim-with-set-mouse=a-enabled/" rel="alternate"></link><published>2016-05-02T23:27:00+09:00</published><updated>2016-05-02T23:27:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-05-02:/2016/05/02/select-text-of-vim-with-set-mouse=a-enabled/</id><summary type="html">&lt;p&gt;Vim사용에 있어서 마우스로 블록을 선택할 수 있도록 하였다. 그랬더니 다른&amp;nbsp;부분에서&lt;/p&gt;</summary><content type="html">&lt;p&gt;제대로된 선택을 할 수 없어 해당 내용을&amp;nbsp;찾아보았다.&lt;/p&gt;
&lt;p&gt;조금 쉽게 사용하려고 vim에 &lt;code&gt;mouse=a&lt;/code&gt; 설정을 하였다. 그것이 원흉이 었지만. 결국&amp;nbsp;찾았다!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/4608161/copy-text-out-of-vim-with-set-mouse-a-enabled"&gt;Copy text out of vim with set mouse=a&amp;nbsp;enabled&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스에서는 &lt;code&gt;shift&lt;/code&gt;를 누르고 선택하는것이고, Mac에서는 &lt;code&gt;alt/option&lt;/code&gt;을 누르고 선택하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;설정하나때문에 많은 삽질을 하는 사람들에게 남겨둠..&lt;br&gt;
그런데 설정은 tmux에서도&amp;nbsp;사용이가능하다.&lt;/p&gt;</content><category term="vim"></category><category term="mouse"></category><category term="copy"></category></entry><entry><title>Vim ColorColumn Settings</title><link href="https://ujuc.github.io/2016/04/26/vim-colorcolumn-settings/" rel="alternate"></link><published>2016-04-26T22:04:00+09:00</published><updated>2016-04-26T22:04:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-04-26:/2016/04/26/vim-colorcolumn-settings/</id><summary type="html">&lt;p&gt;vim에서 코드의 길이를 줄을 그어 쉽게&amp;nbsp;확인하자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;나같은 경우엔, &lt;code&gt;git commit&lt;/code&gt; 명령어를 실행하면 기본 에디터로 &lt;code&gt;vim&lt;/code&gt;으로 구성해뒀다.&lt;br&gt;
그러다보니 가끔 길이를 확인해서 커밋을 해야되는 경우가&amp;nbsp;발생하는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;그나마 기본적으로 설정해놓은 80줄은 쉽게 찾으나&amp;hellip; 커밋 제목인 50자, 커밋 메시지&lt;br&gt;
제한인 72자를 확인하는게 쉽지가 않아서 줄을 그어놓고 사용하기위해 설정을&amp;nbsp;한다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;73&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;121&lt;/span&gt;
&lt;span class="n"&gt;highlight&lt;/span&gt; &lt;span class="n"&gt;ColorColumn&lt;/span&gt; &lt;span class="n"&gt;ctermbg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt; &lt;span class="n"&gt;guibg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;navyblue&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;위와 같이 설정하면 아래와 같이 줄이 그어져있는 모습을 볼 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim_ex" src="https://ujuc.github.io/img/2016-04-26_vim.png"&gt;&lt;/p&gt;
&lt;p&gt;이건&amp;nbsp;덤&amp;hellip;&lt;/p&gt;
&lt;p&gt;vim에서 사용하는 색이름과 설정값에 대해서 확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim"&gt;Xterm256 color names for console&amp;nbsp;Vim&lt;/a&gt;&lt;/p&gt;</content><category term="vim"></category><category term="vimrc"></category><category term="colorcolumn"></category><category term="cc"></category></entry><entry><title>Install wireless Qualcomm Atheros device driver on Lenovo Y700</title><link href="https://ujuc.github.io/2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/" rel="alternate"></link><published>2016-04-22T22:59:00+09:00</published><updated>2016-04-22T22:59:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-04-22:/2016/04/22/install-wireless-qualcomm-atheros-device-driver-on-lenovo-y700/</id><summary type="html">&lt;p&gt;Qualcomm Atheros device driver on Lenovo&amp;nbsp;Y700&lt;/p&gt;</summary><content type="html">&lt;p&gt;새롭게 컴퓨터를 구입했다. Lenovo ideapad Y700. 문제는 다른 컴퓨터들은 다른 모듈이 연결되어있는데. 이 컴만 그런건지 아니면 일정 라인이상만 그런건지 모르겠으나, Qualcomm Atheros가 연결되어있어 커널에서 wifi를 잡지못하는 문제가&amp;nbsp;발생했다.&lt;/p&gt;
&lt;p&gt;Ubuntu 16.04를 사용했음에도 불구하고 잡히지 않았던건, 커널버전 4.4.2이상이어야 해당 드라이버가 돌아가는데&amp;hellip; Ubuntu 16.04버전이 4.4.0&amp;hellip; 그래서 백포트하고, 드라이버를 옮겨주는것으로&amp;nbsp;해결.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ask.ubuntu.com/questions/708061/aualcomm-atheros-device-168c0042-rev-30-wi-fi-driver-installation"&gt;Qualcomm Atheros Device [168c:0042] (rev 30) Wi-Fi dirver installation&lt;/a&gt; 에서 말하는 작업을&amp;nbsp;설치해주면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install build-essential linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt; git
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;options ath10k_core skip_otp=y&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/modprobe.d/ath10k_core.conf
wget https://www.kernel.org/pub/linux/kernel/projects/backports/stable/v4.4.2/backports-4.4.2-1.tar.gz
tar -zxvf backports-4.4.2-1.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; backports-4.4.2-1
make defconfig-wifi
make
sudo make install
git clone https://github.com/kvalo/ath10k-firmware.git
sudo cp -r ath10k-firmware/QCA9377 /lib/firmware/ath10k/
sudo cp /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin_WLAN.TF.1.0-00267-1 /lib/firmware/ath10k/QCA9377/hw1.0/firmware-5.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그리고&amp;nbsp;하나더&amp;hellip;&lt;/p&gt;
&lt;p&gt;이건 위에껄 하고 안되면 추가해주도록&amp;nbsp;하자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; blacklist ideapad_laptop &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/modprobe.d/blacklist.conf
&lt;/pre&gt;&lt;/div&gt;</content><category term="lenovo"></category><category term="ubuntu"></category><category term="qualcomm"></category><category term="driver"></category><category term="wireless"></category><category term="16.04"></category></entry><entry><title>Ubuntu-Debian 패키지 매니저 apt 사용해보기</title><link href="https://ujuc.github.io/2016/04/17/ubuntu-debian-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80-apt-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/" rel="alternate"></link><published>2016-04-17T12:23:00+09:00</published><updated>2016-04-17T12:23:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-04-17:/2016/04/17/ubuntu-debian-패키지-매니저-apt-사용해보기/</id><summary type="html">&lt;p&gt;하위 명령어 &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;apt-cache&lt;/code&gt;를 사용하지 않고 패키지 매너저 &lt;code&gt;apt&lt;/code&gt;를 사용하는&amp;nbsp;방법.&lt;/p&gt;</summary><content type="html">&lt;p&gt;기본적으로 &lt;code&gt;apt&lt;/code&gt; 패키지가 설치되어있었지만&amp;hellip; 사용하지 않았었다. 여기저기서 &lt;code&gt;apt-get&lt;/code&gt; 같은 명령어를 알려줬기에&amp;hellip; 그리고 얼마안되기도 했고, 그 간단한 사용법에 대해서 남겨두려고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;참고는 &lt;a href="http://www.tecmint.com/apt-advanced-package-command-examples-in-ubuntu/"&gt;15 Examples of How to Use New Advanced Package Tool (&lt;span class="caps"&gt;APT&lt;/span&gt;) in Ubuntu/Debian&lt;/a&gt; 을 사용함. 기본적으로 되는 &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html"&gt;Ubuntu man&lt;/a&gt; 페이지는 끼고&amp;nbsp;살자&amp;hellip;&lt;/p&gt;
&lt;h2 id="1"&gt;1. 패키지&amp;nbsp;설치&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt install glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;항상 사용하던건 &lt;code&gt;apt-get&lt;/code&gt; 명령어로 설치를 하는거였는데 4글자 줄엇다!&lt;br&gt;
&lt;code&gt;sudo aptitude install&lt;/code&gt; 로도 가능하다만&amp;hellip; 이렇게 하는 사람들&amp;nbsp;잘못봤다.&lt;/p&gt;
&lt;h2 id="2"&gt;2. 패키지가 설치된 위치&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt content glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어는 &lt;code&gt;dpkg -L&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="3"&gt;3. 패키지 디펜던시&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt depends glances
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어가 &lt;code&gt;apt-get check&lt;/code&gt;, &lt;code&gt;dpkg -C&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="4"&gt;4. 패키지&amp;nbsp;찾기&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt search openstack
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어는 &lt;code&gt;apt-cache search&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="5"&gt;5. 패키지 정보&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt show firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는 명령어 &lt;code&gt;apt-cache show&lt;/code&gt;, &lt;code&gt;dpkg -p&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="6"&gt;6. 깨진 디펜던시가 있는지&amp;nbsp;확인&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt check firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이거와 대응되는게 있는지&amp;nbsp;잘모르겠다.&lt;/p&gt;
&lt;h2 id="7"&gt;7. 제공된 패키지에서 빠진 패키지에 대한 목록&amp;nbsp;보여주기&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt recommends apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="8"&gt;8. 패키지 버전&amp;nbsp;체크&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt version firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="9"&gt;9. 시스템 패키지&amp;nbsp;업데이트&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="10"&gt;10. 시스템&amp;nbsp;업그레이드&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="11"&gt;11. 커널 버전까지 시스템&amp;nbsp;업그레이드&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt full-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get dist-upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="12"&gt;12. 사용하지 않는 페키지&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt autoremove
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get autoremove&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="13"&gt;13. 다운로드된 페키지에서 오래된 저장소&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt autoclean
sudo apt clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-get clean&lt;/code&gt;, &lt;code&gt;apt-get autoclean&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="14"&gt;14. 패키지 구성파일까지&amp;nbsp;삭제&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt purge glance
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;apt-purge&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="15-deb-160502"&gt;15. deb 패키지 설치 (작동이 안된다&amp;hellip;&amp;nbsp;-160502)&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt deb atom-amd64.deb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;대응되는건 &lt;code&gt;dpkg&lt;/code&gt; 에서&amp;nbsp;찾으면될듯..&lt;/p&gt;
&lt;h2 id="16"&gt;16.&amp;nbsp;사용법은&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt &lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 사용법을 찾아서 작업하면 될것으로&amp;nbsp;보여짐.&lt;/p&gt;
&lt;h2 id="_1"&gt;맺음&lt;/h2&gt;
&lt;p&gt;동일한 명령어가 여러가지 존재하고 사용하는 방법에 따라 달라지는 것으로 보여지는데&amp;hellip;&lt;br&gt;
패키지 메니저가 &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;aptitude&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;로 나눠져있으니 편한걸로.. 그리고 설치되어있는걸로 사용하면될&amp;nbsp;듯.&lt;/p&gt;</content><category term="ubuntu"></category><category term="debian"></category><category term="apt"></category><category term="system"></category></entry><entry><title>OpenStack New Project at 0321</title><link href="https://ujuc.github.io/2016/03/27/openstack-new-project-at-0321/" rel="alternate"></link><published>2016-03-27T22:47:00+09:00</published><updated>2016-03-27T22:47:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-03-27:/2016/03/27/openstack-new-project-at-0321/</id><summary type="html">&lt;p&gt;이번에 새롭게 official project로 등록된&amp;nbsp;프로젝트들.&lt;/p&gt;</summary><content type="html">&lt;p&gt;해당 내용 나온 곳 : &lt;a href="http://www.openstack.org/blog/2016/03/technical-committee-highlights-march-21-2016/"&gt;Technical Committee Highlights March 21,&amp;nbsp;2016&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="dragonflow"&gt;Dragonflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Dragonflow"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/dragonflow/centralized_dragonflow.html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/dragonflow"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenStack® Neutron™ 에서 사용하는 fully distributed virtual&amp;nbsp;router.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;기능&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; for routing IPv4 East-West&amp;nbsp;traffic&lt;/li&gt;
&lt;li&gt;Performance improvement for inter-subnet network by removing the amount of kernel layers (namespaces and their &lt;span class="caps"&gt;TCP&lt;/span&gt; stack&amp;nbsp;overhead)&lt;/li&gt;
&lt;li&gt;Scalability improvement for inter-subnet newtork by offloading L3 East-West routing from the Network Node to all Compute&amp;nbsp;Nodes&lt;/li&gt;
&lt;li&gt;Reliability improvement for inter-subnet network by removal of Network Node from the East-West&amp;nbsp;traffic&lt;/li&gt;
&lt;li&gt;Simplified virtual routing&amp;nbsp;management&lt;/li&gt;
&lt;li&gt;Support for all type dirvers &lt;span class="caps"&gt;GRE&lt;/span&gt;/&lt;span class="caps"&gt;VXLAN&lt;/span&gt;/&lt;span class="caps"&gt;LAN&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Support for centralized shared public network (&lt;span class="caps"&gt;SNAT&lt;/span&gt;) based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;li&gt;Support for centralized floating &lt;span class="caps"&gt;IP&lt;/span&gt; (&lt;span class="caps"&gt;DNAT&lt;/span&gt;) based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;li&gt;Support for &lt;span class="caps"&gt;HA&lt;/span&gt;, in case the connection to the legacy L3 &lt;span class="caps"&gt;HA&lt;/span&gt;. (Controller &lt;span class="caps"&gt;HA&lt;/span&gt; will be supported in the next&amp;nbsp;rlease).&lt;/li&gt;
&lt;li&gt;Support for centralized IPv6 based on the legacy L3&amp;nbsp;implementation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="kuryr"&gt;Kuryr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Kuryr"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.openstack.org/developer/kuryr/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/kuryr"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker 네트워크&amp;nbsp;플러그인&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="tacker"&gt;Tacker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/Tacker"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/index.html"&gt;Dcoumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/tacker"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OpenStack service for &lt;span class="caps"&gt;NFV&lt;/span&gt; Orchestration with a general purpose &lt;span class="caps"&gt;VNF&lt;/span&gt; Manager to deploy and operate Virtual Network Functions (VNFs) and Network Services on an &lt;span class="caps"&gt;NFV&lt;/span&gt; Platform. It is based on &lt;span class="caps"&gt;ETSI&lt;/span&gt; &lt;span class="caps"&gt;MANO&lt;/span&gt; Architectural&amp;nbsp;Framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="feature"&gt;Feature&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/devref/monitor-api.html"&gt;Tracker Monitoring&amp;nbsp;Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tacker-docs.readthedocs.org/en/latest/devref/vnfd_template_parameterization.html"&gt;&lt;span class="caps"&gt;VNFD&lt;/span&gt; Template&amp;nbsp;Parameterization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ec2api"&gt;&lt;span class="caps"&gt;EC2API&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.openstack.org/wiki/EC2API"&gt;Main&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/openstack/ec2-api"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt; and &lt;span class="caps"&gt;VPC&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; support in standalone service for&amp;nbsp;OpenStack.&lt;/li&gt;
&lt;/ul&gt;</content><category term="openstack"></category><category term="big tent"></category></entry><entry><title>pysftp 간략 사용기</title><link href="https://ujuc.github.io/2016/02/29/pysftp-%EA%B0%84%EB%9E%B5-%EC%82%AC%EC%9A%A9%EA%B8%B0/" rel="alternate"></link><published>2016-02-29T21:55:00+09:00</published><updated>2016-02-29T21:55:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-29:/2016/02/29/pysftp-간략-사용기/</id><summary type="html">&lt;p&gt;pysftp를 사용하여 파일을 가져오는 것에 대해&amp;nbsp;이야기한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;처음 작성해놓은게 2013년 11월 달이다. 그때 사용한 것을 Evernote 정리중 확인하여 남겨뒀는데 새로 써야겠다. 다&amp;nbsp;바겼다.ㅡ.ㅡ&amp;#8230;.&lt;/p&gt;
&lt;p&gt;우선 이 패키지는 14년 5월 이후로 &lt;a href="https://pypi.python.org/pypi/pysftp"&gt;pypi 프로젝트&lt;/a&gt;에서는 업로드가 되고 있지 않으며, &lt;a href="https://bitbucket.org/dundeemt/pysftp"&gt;Project repo&lt;/a&gt;의 업로드는 이루워지고 있으며, 3.4까지 테스팅을 해봣단다. 파일만 올리기위해서 사용했던 라이브러리라 간단히 sftp를 이용하여 파일을 올리고 받기를 원한다면 괜찮을&amp;nbsp;듯.&lt;/p&gt;
&lt;h2 id="package"&gt;Package&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SFTP를 python에서 직접 사용할 수 있도록 도와주며, 내부는 C로 구성되어있다.&lt;ul&gt;
&lt;li&gt;그 덕분에 설치시 &lt;code&gt;python-dev&lt;/code&gt; 페키지가 필요하다. (Ubuntu 리눅스&amp;nbsp;기준)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용하는 원격지에 ssh가 설치되어있는지 확인하자. 가끔 설치가 안되어있는 경우도&amp;nbsp;있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;사용법&lt;/h2&gt;
&lt;p&gt;간단히 적겠다. 모자르면 &lt;a href="http://pysftp.readthedocs.org/en/release_0.2.8/cookbook.html"&gt;문서&lt;/a&gt;를&amp;nbsp;보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pysftp&lt;/span&gt;

&lt;span class="n"&gt;cinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;private_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/keyfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2222&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pysftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;cinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mybackupfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myoriginfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;there&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이정도 주석 달다가 지웠다. 그것이 없어도 sftp를 사용하고 있다면 간단히 상요할 정도로 sftp 명령어에서 사용하는 내용들을&amp;nbsp;추가해놓았다.&lt;/p&gt;
&lt;p&gt;아직 pypi 측으로 버전업된 것이 반영되지 않아 새버전을 사용하고 싶으면 레포로 가서 작업을 진행하는 것을&amp;nbsp;추천한다.&lt;/p&gt;</content><category term="python"></category><category term="sftp"></category><category term="lib"></category></entry><entry><title>git-vendor</title><link href="https://ujuc.github.io/2016/02/20/git-vender/" rel="alternate"></link><published>2016-02-20T21:02:00+09:00</published><updated>2016-02-20T21:02:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-20:/2016/02/20/git-vender/</id><summary type="html">&lt;p&gt;git-vendor. git 확장이며 git-subtree를 이용하여 vendor 소스를 관리할 수 있도록&amp;nbsp;도와준다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;brew 업그레이드하다가 &lt;code&gt;git-vender&lt;/code&gt;라는 확장 프로그램이 보였다. 이건 뭐하는 넘인지 궁금해서&amp;nbsp;정리한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vender&lt;/code&gt;는 git 명령어를 이용하여 vendor 소스를 관리할 수 있도록 도와주는 확장이다. &lt;code&gt;git-subtree&lt;/code&gt;를 이용해서 소스를 체크 아웃하고 업데이트된 내용들을 관리할 수 있도록&amp;nbsp;해준다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vendor&lt;/code&gt;는 golang에서 vendor 종속성을 관리하는 패턴에 따라서 작업을 진행한다고&amp;nbsp;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연관되는 소스들은 &lt;code&gt;vendor/&lt;/code&gt; 디렉토리에&amp;nbsp;저장된다.&lt;/li&gt;
&lt;li&gt;프로젝트에대한 전체 위치로 폴더가 생성되게&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;기본&amp;nbsp;명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git vendor add [--prefix &amp;lt;dir&amp;gt;] &amp;lt;name&amp;gt; &amp;lt;repository&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : 새로운 vendor 연관 소스&amp;nbsp;추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor list [&amp;lt;name&amp;gt;]&lt;/code&gt; : 현재 레포에 있는 vendor 연관 소스&amp;nbsp;보기.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor update &amp;lt;name&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : vendor 연관 소스&amp;nbsp;업데이트.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설치는&amp;nbsp;알아서&amp;hellip;&lt;/p&gt;
&lt;h3 id="_2"&gt;예제&lt;/h3&gt;
&lt;p&gt;Readme에 있는 예제를 가져왔다. 만들어보는 것보다 낫다 판단해서. 아직 &lt;code&gt;git-subtree&lt;/code&gt;를 모르겠는데&amp;nbsp;뭐&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="c1"&gt;# Chekout github.com/brettlangdon/forge@v0.1.6 를 가져온다.&lt;/span&gt;
$ git vendor add forge https://github.com/brettlangdon/forge v0.1.6
+ git subtree add --prefix vendor/github.com/brettlangdon/forge --message &lt;span class="s1"&gt;&amp;#39;Add &amp;quot;forge&amp;quot; from &amp;quot;https://github.com/brettlangdon/   forge@v0.1.6&amp;quot;&lt;/span&gt;

&lt;span class="s1"&gt;git-vendor-name: forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-dir: vendor/github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-repository: https://github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-ref: v0.1.6&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; https://github.com/brettlangdon/forge v0.1.6 --squash
git fetch https://github.com/brettlangdon/forge v0.1.6
warning: no common commits
remote: Counting objects: &lt;span class="m"&gt;405&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
remote: Total &lt;span class="m"&gt;405&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, reused &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;delta &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused &lt;span class="m"&gt;404&lt;/span&gt;
Receiving objects: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;405&lt;/span&gt;/405&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;68&lt;/span&gt;.31 KiB &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; bytes/s, &lt;span class="k"&gt;done&lt;/span&gt;.
Resolving deltas: &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;227&lt;/span&gt;/227&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;.
From https://github.com/brettlangdon/forge
 * tag               v0.1.6     -&amp;gt; FETCH_HEAD
Added dir &lt;span class="s1"&gt;&amp;#39;vendor/github.com/brettlangdon/forge&amp;#39;&lt;/span&gt;

$ &lt;span class="c1"&gt;# 목록으로보면..&lt;/span&gt;
$ git vendor list
forge@v0.1.6:
    name:   forge
    dir:    vendor/github.com/brettlangdon/forge
    repo:   https://github.com/brettlangdon/forge
    ref:    v0.1.6
    commit: 3335840c5f0ad9e821006588f1b16a3385d9c318

$ &lt;span class="c1"&gt;# 업데이트를 하면&lt;/span&gt;
$ git vendor update forge v0.1.7
From https://github.com/brettlangdon/forge
    * tag               v0.1.7     -&amp;gt; FETCH_HEAD
Merge made by the &lt;span class="s1"&gt;&amp;#39;recursive&amp;#39;&lt;/span&gt; strategy.
 vendor/github.com/brettlangdon/forge/forge_test.go &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; ++
 vendor/github.com/brettlangdon/forge/scanner.go    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; ++++
 vendor/github.com/brettlangdon/forge/test.cfg      &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; +
 &lt;span class="m"&gt;3&lt;/span&gt; files changed, &lt;span class="m"&gt;7&lt;/span&gt; insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;

$ &lt;span class="c1"&gt;# 확인하면..&lt;/span&gt;
$ git vendor list
forge@v0.1.7:
    name:   forge
    dir:    vendor/github.com/brettlangdon/forge
    repo:   https://github.com/brettlangdon/forge
    ref:    v0.1.7
    commit: 071c5f108e0af39bf67a87fc766ea9bfb72b9ee7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;관련&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brettlangdon/git-vendor"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brettlangdon.github.io/git-vendor/"&gt;Manpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="git"></category><category term="git-vendor"></category><category term="git-subtree"></category><category term="dependencies"></category></entry><entry><title>1월 23일부터 2월 5일까지 OpenStack에서 나온 이야기들</title><link href="https://ujuc.github.io/2016/02/16/1%EC%9B%94-23%EC%9D%BC%EB%B6%80%ED%84%B0-2%EC%9B%94-5%EC%9D%BC%EA%B9%8C%EC%A7%80-openstack%EC%97%90%EC%84%9C-%EB%82%98%EC%98%A8-%EC%9D%B4%EC%95%BC%EA%B8%B0%EB%93%A4/" rel="alternate"></link><published>2016-02-16T21:48:00+09:00</published><updated>2016-02-16T21:48:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-16:/2016/02/16/1월-23일부터-2월-5일까지-openstack에서-나온-이야기들/</id><summary type="html">&lt;p&gt;그냥 궁금해서 번역했는데 더 궁금해졌다. 메일링을&amp;nbsp;봐야되나&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.openstack.org/blog/2016/02/openstack-developer-mailing-list-digest-20160205/"&gt;원&amp;nbsp;페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;철지난 소식이긴하지만 읽을 거리가 많아서&amp;nbsp;번역해둔다.&lt;/p&gt;
&lt;h2 id="successbot-says"&gt;SuccessBot&amp;nbsp;Says&lt;/h2&gt;
&lt;p&gt;역: 해당 파트는 무언가 릴리즈가되면 메일링으로 메일을 쏘아주는 사람들의 글들을 모아둔&amp;nbsp;것.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Liberty 12.0.5&amp;nbsp;릴리즈.&lt;/li&gt;
&lt;li&gt;stevemar: Devstack에서 Keystone &lt;span class="caps"&gt;API&lt;/span&gt; v3로 구성을&amp;nbsp;바꿈.&lt;/li&gt;
&lt;li&gt;boris-42: osprofiler 기능 잡 통과&lt;a href="https://review.openstack.org/#/c/269908/"&gt;^1&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Kilo 11.2.9 릴리즈&lt;a href="https://launchpad.net/openstack-ansible/+milestone/11.2.9"&gt;^2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;odyssey4me: OpenStack Ansible Liberty 12.0.6&amp;nbsp;릴리즈[^3[(https://launchpad.net/openstack-ansible/+milestone/12.0.6).&lt;/li&gt;
&lt;li&gt;전체보기: &lt;a href="https://wiki.openstack.org/wiki/Successes"&gt;Successes -&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cross-project-specs"&gt;Cross-Project&amp;nbsp;Specs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;모든 프로젝트에 접근할 수 있는 공통 정책 시나리오&lt;a href="https://review.openstack.org/#/c/245629/"&gt;^4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Web UI에서의 쿼리 구성&lt;a href="https://review.openstack.org/#/c/242852/"&gt;^5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api-guidelines"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Guidelines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;더이상 서버 쪽의 traceback을 리턴하지 않습니다&lt;a href="https://review.openstack.org/#/c/183599"&gt;^6&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;더 이상 서버쪽으로 tracebacks/stacktraces에 대한 반환값을 사용자에게 반환하지 않도록 안내&amp;nbsp;추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="service-type-vs-project-name-for-use-in-headers"&gt;Service Type vs. Project Name For Use In&amp;nbsp;Headers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Header를 서비스 타입으로 할지, 프로젝트 이름으로 할지에 대한 논의가&amp;nbsp;있었습니다.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 마이크로버전에 대한 버전 추가에 대한 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/243429"&gt;^7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;실험 단계의 API에 대한 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/273158"&gt;^8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 마이크로버전에 대한 클라이언트 상호작용 가이드라인 추가&lt;a href="https://review.openstack.org/#/c/243414"&gt;^9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;텀에 대한 각 프로젝트의 일반 이름 추가&lt;a href="https://review.openstack.org/#/c/243414"&gt;^10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt; 사용자에게 더 좋게 제공할 수 있으며, &lt;a href="https://www.openstack.org/community/members/profile/1346"&gt;Dean Troyer&lt;/a&gt;에 의하면 &lt;span class="caps"&gt;API&lt;/span&gt; 워킹 그룹과 같이 올바른 방향으로 갈 수 있도록&amp;nbsp;선택해야합니다.&lt;/li&gt;
&lt;li&gt;엔트포인트와 &lt;span class="caps"&gt;API&lt;/span&gt; 서비스에 대한 기본 식별자(identifier)로서 서비스 타입은 잘 확립되어있고, 서비스 카탈로그가 제대로 작동하는 방법입니다. 서비스 타입에 따라 이동하는 방법이&amp;nbsp;있어야합니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/085145.html"&gt;service type vs. project name for use in&amp;nbsp;headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;역: 뭔가 짧게 줄인게 더 이해가&amp;nbsp;안되네&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="openstack-ansible-without-containers"&gt;OpenStack Ansible Without&amp;nbsp;Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Gyorgy가 새로운 OpenStack installer로 GPLv3 라이센스로 Ansible을 사용해서 발표했으며 여기에는 컨테이너는&amp;nbsp;빠져있다.&lt;/li&gt;
&lt;li&gt;이미 OpenStack에는 Ansible 프로젝트와 &lt;a href="https://wiki.openstack.org/wiki/Kolla"&gt;Kolla&lt;/a&gt; 가 있는데 왜 새로운 installer를 만들었을까?:&lt;ul&gt;
&lt;li&gt;컨테이너에 불필요한 복잡성&amp;nbsp;추가.&lt;/li&gt;
&lt;li&gt;패키지: pip 패키지와 배포판 패키지를 섞어 사용하고 있지 않음. 배포판 패키지는 init 스크립트, 적당한 시스템 사용자, 업그레이드 가능한 것들&amp;hellip;이 포함되어있는 것을&amp;nbsp;말함.&lt;/li&gt;
&lt;li&gt;Kevin Carter의 답장에서는 이 내용은 OpenStack Ansible 프로젝트에 포함되어있는 내용이라고&amp;nbsp;발혔다고&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너를 사용하지 않고 동시에 모든 서비스를 업그레이드를 한뒤 하나의 컨트롤러를 업데이트 하는건 까다롭고 깨질수도 있습니다. 롤백도&amp;nbsp;쉽구요.&lt;/li&gt;
&lt;li&gt;역: 제대로 번역을 못하겠어서 원본을 같이&amp;nbsp;첨부&lt;/li&gt;
&lt;li&gt;원: Without containers, upgrading a single controller can be tricky and disruptive since you have to upgrade every service at the same time. Rollbacks are also&amp;nbsp;easier.&lt;/li&gt;
&lt;li&gt;OpenStack Ansible 프로젝트에서 오늘(?) &lt;code&gt;is_metal=true&lt;/code&gt; 값을 이용해서 컨테이너 없이 배포가&amp;nbsp;가능합니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/084963.html"&gt;OpensTack&amp;nbsp;installer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="release-countdown-for-week-r-8-feb-8-12"&gt;Release Countdown for Week R-8, Feb&amp;nbsp;8-12&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;집중:&lt;/li&gt;
&lt;li&gt;2주정도 전에 이번 사이클에서 non-client 라이브러리에 대한 릴리즈&amp;nbsp;완료&lt;/li&gt;
&lt;li&gt;3주정도 전에 클라이언트 라이브러리 릴리즈&amp;nbsp;완료&lt;/li&gt;
&lt;li&gt;프로젝트들은 모든 라이브러리 기능 작업 마무리에&amp;nbsp;집중.&lt;/li&gt;
&lt;li&gt;릴리즈&amp;nbsp;작업:&lt;/li&gt;
&lt;li&gt;릴리즈팀에서 업격하게 3주에서 M3전에 라이버리를 릴리즈 프리징을 할&amp;nbsp;것입니다.&lt;/li&gt;
&lt;li&gt;주요&amp;nbsp;일정:&lt;/li&gt;
&lt;li&gt;Non-client 라이브러리 릴리즈 완료: 2월&amp;nbsp;24일&lt;/li&gt;
&lt;li&gt;클라이언트 라이브러리 릴리즈 완료: 3월&amp;nbsp;2일&lt;/li&gt;
&lt;li&gt;Mitaka 3: 2월 29일 - 3월 4일 ( 기능 프리징과 소프트 문자 프리징&amp;nbsp;포함해서)&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085705.html"&gt;Release countdown for week R-8, Feb&amp;nbsp;8-12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="no-open-core-in-2016"&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;No Open Core&amp;rdquo; in&amp;nbsp;2016&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenStack은 이름을 가지기 전, &amp;ldquo;four opens&amp;rdquo;라는 신념은 우리가 커뮤니티를 운영하는 방법을 정의하는데&amp;nbsp;만들어졌습니다.&lt;/li&gt;
&lt;li&gt;OpenStack이 시작하였던 2010년, 우리는 제품 코어를 오픈소스화하는 방법으로 불편한 커뮤니티 에디션과 &amp;ldquo;엔터프라이즈 버전&amp;rdquo;으로 내놓는 다른 오픈소스 클라우드 플랫폼(Eucalyptus)과는&amp;nbsp;달랐습니다.&lt;/li&gt;
&lt;li&gt;오늘날 우리는 &amp;ldquo;엔터프라이즈 에디션&amp;rdquo;을 할 수 없는 비영리 독립&amp;nbsp;재단입니다.&lt;/li&gt;
&lt;li&gt;현재 화원사들은 아파치 라이센스인 업스트림 프로젝트 위에 &amp;ldquo;기업 제품&amp;rdquo;을 만들 수 있습니다. 일부는 고유 구성요소에서 기능들을 보여줘야되는 드라이버로&amp;nbsp;되어있습니다.&lt;/li&gt;
&lt;li&gt;그럼 2016년 &amp;ldquo;not do open core&amp;rdquo;는 뭔가요? 어떤것은 가능하고 어떤것은 안되는&amp;nbsp;것인가요?&lt;/li&gt;
&lt;li&gt;Thierry Carrez는 OpenStack 공식 프로젝트들이 새롭게 변화하는 시간으로 받아 들일 것이라&amp;nbsp;믿습니다.&lt;/li&gt;
&lt;li&gt;그것은 제품에 대한 모든 기능들을 오픈 소스로&amp;nbsp;구현해야합니다.&lt;/li&gt;
&lt;li&gt;여러분이 모든 프로젝트를 사용하는 상용 기업의 독점 소프트웨어가 필요하다면, OpenStack 공식 프로젝트로 허용되지 않을 것입니다.&lt;ul&gt;
&lt;li&gt;하지만 이 프로젝트는 비공식 프로젝트로는 허용되며, 여전히 OpenStack 인프라에서 호스팅이&amp;nbsp;가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doug Hellmann은 공식 OpenStack 프로젝트로 적용되는 &lt;a href="https://review.openstack.org/#/c/273756/"&gt;Poppy&lt;/a&gt;를 제출&amp;nbsp;하였습니다.&lt;/li&gt;
&lt;li&gt;컨텐트 제공 네트워크의 렙퍼인데, 오픈소스 솔루션이&amp;nbsp;없었스니다.&lt;/li&gt;
&lt;li&gt;공식 프로젝트가 될 수 있을까? 그럼 이게 오픈&amp;nbsp;코어인가?&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085855.html"&gt;&amp;ldquo;No Open Core&amp;rdquo; in&amp;nbsp;2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-trouble-with-names"&gt;The Trouble with&amp;nbsp;Names&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A few issues have crept up recently with the service catalog, &lt;span class="caps"&gt;API&lt;/span&gt; headers, &lt;span class="caps"&gt;API&lt;/span&gt; end points, and even similarly named resources in different resources (e.g. backup), that are all circling around a key problem. Distributed teams and naming&amp;nbsp;collision.&lt;/li&gt;
&lt;li&gt;각 프로젝트는 OpenStack 네임스페이스에 git 저장소에의해 보장되는 고유 이름이&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;Nova/Compute 와 같은 일반적인 이름을 가진 프로젝트 이름을 대체하려는 움직임이&amp;nbsp;있습니다:&lt;/li&gt;
&lt;li&gt;Service&amp;nbsp;catalog&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;headrs&lt;/li&gt;
&lt;li&gt;우리가 가질 수 있는&amp;nbsp;선택사항들:&lt;/li&gt;
&lt;li&gt;코드 이름을 사용하는 것: nova, glance, swift 과 같은.&lt;ul&gt;
&lt;li&gt;장점:  충돌 문제는&amp;nbsp;해결&lt;/li&gt;
&lt;li&gt;프로젝트에서 알고 있는 비밀 디코더 링이&amp;nbsp;필요합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;공통된 이름에 대한 저장소.&lt;ul&gt;
&lt;li&gt;장점: 공통된 이름을 사용해서 어디서든 안전하게 사용할 수 있으며, 충돌에 대한 공포를 줄일 수&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;단점: 다른 논쟁점이 있을&amp;nbsp;수도&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커뮤니티의 사람들은 공통 이름을 가지고서 저장소를 만들기를 바라고 있다. 어쩌면 가버넌트 &lt;a href="https://git.openstack.org/cgit/openstack/governance/tree/reference/projects.yaml"&gt;projects.yaml&lt;/a&gt;에 있지&amp;nbsp;않을까?&lt;/li&gt;
&lt;li&gt;이 목록은 기술 커밋들이 공식 프로젝트들에서 사용되는 것들만 포함하고 있습니다. 따라서 프로젝트에서만 공통 이름을 예약할 수&amp;nbsp;있습니다.&lt;/li&gt;
&lt;li&gt;OpenStack 클라이언트들은 이미 프로젝트에서 공통 이름으로&amp;nbsp;인코드했습니다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-February/085748.html"&gt;the trouble with&amp;nbsp;names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="annuncing-ekko-scalable-block-based-backup-for-openstack"&gt;Annuncing Ekko - Scalable Block-Based Backup for&amp;nbsp;OpenStack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ekko의 목적은 Nova 인스턴스의 증분 블록 레벨 백업과 복원을&amp;nbsp;제공합니다.&lt;/li&gt;
&lt;li&gt;중복되는 목표가&amp;nbsp;있습니다:&lt;/li&gt;
&lt;li&gt;증분 백업에 의존하지 않는 Cinder&amp;nbsp;볼륨&lt;/li&gt;
&lt;li&gt;Nova 인스턴스&lt;ul&gt;
&lt;li&gt;OpenStack Freezer 에서는 노바 스냅샷 기능을&amp;nbsp;사용합니다.&lt;/li&gt;
&lt;li&gt;Ekko는 Nova 인스턴스의 실시간 증분 블록 레벨 백업을 활용하는&amp;nbsp;것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jay Pipes는 &lt;span class="caps"&gt;REST&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; 엔드포인트가 중복되는지 확인하기위한 것과 두개의 프로젝트(Freezer와 Ekko)에 대해서 논의를 시작함. 거의 동일한 백업을 수행하기위해 두개의 API를 가지는 것은 좋지&amp;nbsp;않다고&amp;hellip;&lt;/li&gt;
&lt;li&gt;Ekko 젝작자는 다른 백업 프로젝트와 동일한 API를 호출할 경우에도 &amp;ldquo;실제 구현체와 최종 결과물은 완전히다르다&amp;rdquo;고&amp;nbsp;밝혔다.&lt;/li&gt;
&lt;li&gt;Jay는 다음 엔트포인트가 존재하는 지금을 이해할 수&amp;nbsp;없다고:&lt;/li&gt;
&lt;li&gt;Freezer &lt;code&gt;/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Cinder &lt;code&gt;/{tenant_id}/backups&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이 엔드포인트로 나쁜 사용자 경험을 만들어 혼란을 마들고&amp;nbsp;있다고&amp;hellip;&lt;/li&gt;
&lt;li&gt;현재 거버넌스 모델에서는 프로젝트간 경쟁을 하길 바라지 않습니다. 두 프로젝트는 &lt;span class="caps"&gt;API&lt;/span&gt; 엔트포인트가 겹치는 경우, 논의를 하여 협력하는 방법으로&amp;nbsp;나가야한다.&lt;/li&gt;
&lt;li&gt;메일 쓰레드: &lt;a href="http://lists.openstack.org/pipermail/openstack-dev/2016-January/084739.html"&gt;Announcing Ekko &amp;ndash; Scalable block-based backup for&amp;nbsp;OpenStack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;먼가 번역을 하다보니 2주가 지났다&amp;hellip; 이런 내용들이 매주 업데이트가 되고있으니.. 언제 다 보나.ㅡ.ㅡ;; 따라가는 것도 힘들고. 몇몇 내용은 봐도&amp;nbsp;모르겠고.&lt;/p&gt;
&lt;p&gt;그래도 봐야지 흐름이라도&amp;nbsp;알지&amp;hellip;&lt;/p&gt;</content><category term="openstack"></category><category term="mailling"></category><category term="digest"></category></entry><entry><title>[번역] Tig Manual</title><link href="https://ujuc.github.io/2016/02/10/tig-manual/" rel="alternate"></link><published>2016-02-10T02:08:00+09:00</published><updated>2019-03-23T16:50:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-10:/2016/02/10/tig-manual/</id><summary type="html">&lt;p&gt;Tig 메뉴얼 번역&amp;nbsp;축약본&lt;/p&gt;</summary><content type="html">&lt;p&gt;Git을 사용하기 위한 프로그램들이 많다. 그중에서도 번역하려고 하는 것은 Tig. 터미널 환경에 맞게 구성이되어 있으며, Git CLI와 같이 사용하면 왠만한 &lt;span class="caps"&gt;GUI&lt;/span&gt; 프로그램 못지않은 사용성을 보여주고 있다. 단지&amp;hellip; 명령어가 많아질&amp;nbsp;뿐이다&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jonas/tig"&gt;Tig&amp;nbsp;Homepage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tig snap" src="https://ujuc.github.io/img/2016-02-10_tig_snap.png"&gt;&lt;/p&gt;
&lt;p&gt;실행시키면 위와 같은 모습을 보여주게된다. 간단한 설명은 여기까지하고 메뉴얼이나 보자. 다수의 의역이 포함되어있다. 안할려고 했으나 하루죙일 하다보니&amp;hellip; 그리고 한국어로 곧장 옮기니 이상한 부분이&amp;nbsp;있어&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="http://jonas.nitro.dk/tig/manual.html"&gt;The Tig&amp;nbsp;Manual&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;이 문서는 Tig에 대한 메뉴얼이며, Tig는 Git에 대한 ncurses 기반의 텍스트 모드 인터페이스로 작성되었습니다. Tig는 Git 저장소의 변화를 확인하고 추가적으로 다양한 Git 명령에 대한 출력 내용을 확인할 수 있는 pager로 사용할 수 있습니다. Pager로 사용할 경우, stdin에서 입력을 표시하고, 생상을 추가할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;저장소 확인용으로 사용할 경우, Tig는 기초적인 Git 명령을 사용하여 요약된 커밋 로그, 로그 메시지에서의 커밋 내용, diffstat, diff 와 같은 다양한 뷰를 이용하여 사용자에게&amp;nbsp;보여줍니다.&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-calling-conventions"&gt;1. Calling Conventions (호출 규칙)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#pager-mode-pager"&gt;Pager Mode (Pager&amp;nbsp;모드)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-command-options-git"&gt;Git Command Options (Git 명령어&amp;nbsp;옵션)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-the-viewer"&gt;2. The Viewer (뷰어)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#views"&gt;Views&amp;nbsp;(뷰)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browsing-state-and-user-defined-commands"&gt;Browsing State and User-defined Commands (상태 확인과 사용자 정의&amp;nbsp;명령어)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#title-windows"&gt;Title Windows (제목&amp;nbsp;윈도우)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-environment-variables"&gt;3. Environment Variables (환경 변수)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#configuration-files"&gt;Configuration Files (구성&amp;nbsp;파일)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#repository-references"&gt;Repository References (저장소&amp;nbsp;참조)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#diff-options-diff"&gt;Diff options (Diff&amp;nbsp;옵션)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-default-keybindings"&gt;4. Default Keybindings (기본 키 바인딩)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#view-switching"&gt;View Switching (뷰&amp;nbsp;전환)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#view-manipulation"&gt;View Manipulation (뷰&amp;nbsp;조작)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#view-specific-actions"&gt;View Specific Actions (뷰 지정&amp;nbsp;동작)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cursor-navigation"&gt;Cursor Navigation (커서&amp;nbsp;네비게이션)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scrolling"&gt;Scrolling&amp;nbsp;(스크롤링)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#searching"&gt;Searching&amp;nbsp;(검색)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#misc"&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prompt"&gt;Prompt&amp;nbsp;(프롬프트)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#external-commands"&gt;External Commands (외부&amp;nbsp;명령어)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-revision-specification"&gt;5. Revision Specification (리버전 사항)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#limit-by-path-name"&gt;Limit by Path Name (패치 이름&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limit-by-date-or-number"&gt;Limit by Date or Number (날짜나 숫자&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limiting-by-commit-ranges"&gt;Limiting by Commit Ranges (커밋 범위&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limiting-by-reachability"&gt;Limiting by Reachability (도달 가능&amp;nbsp;제한)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#combining-revisions-specification"&gt;Combining Revisions Specification (변경 사항&amp;nbsp;연결)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examining-all-repository-references"&gt;Examining All Repository References (모든 저장소 참조&amp;nbsp;검사)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-more-information"&gt;6. More Information (정보를 더&amp;nbsp;원하시면)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-copyright"&gt;7. Copyright&amp;nbsp;(저작권)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-see-also"&gt;8. See Also&amp;nbsp;(더보기)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="1-calling-conventions"&gt;1. Calling Conventions (호출&amp;nbsp;규칙)&lt;/h2&gt;
&lt;h3 id="pager-mode-pager"&gt;Pager Mode (Pager&amp;nbsp;모드)&lt;/h3&gt;
&lt;p&gt;Stdin 파이프를 사용할 경우, 모든 로그나 diff 옵션은 무시되고 pager 뷰는 stdin으로 들어온 데이터를 로딩하여 확인할 수 있습니다. Pager 모드는 다양한 Git 명령에 대한 출력값을 색상을 추가하여 확인할 수 있도록&amp;nbsp;도와줍니다.&lt;/p&gt;
&lt;p&gt;예로 &lt;code&gt;git-show(1)&lt;/code&gt; 명령에 대한 출력을 색상을 추가한 버전으로 보고&amp;nbsp;싶다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git show &lt;span class="p"&gt;|&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git-show&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="git-show" src="https://ujuc.github.io/img/2016-02-10_tig_1-1.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git-show | tig&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="git-show|tig" src="https://ujuc.github.io/img/2016-02-10_tig_1-2.png"&gt;&lt;/p&gt;
&lt;h3 id="git-command-options-git"&gt;Git Command Options (Git 명령어&amp;nbsp;옵션)&lt;/h3&gt;
&lt;p&gt;명령 줄에서 모든 Git 명령어 옵션은 주어진 명령에 전달되고 셸에 모두 전달되기 전에 인용 셸을 통과할&amp;nbsp;것입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;주의: 메인 뷰에 대한 옵션을 지정하는 경우엔, 메인 뷰에서 사용하는 형식으로 자동 설정되는 &lt;code&gt;--pretty&lt;/code&gt; 옵션을 사용할 수&amp;nbsp;없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;커밋과 author, 커미터 정보를 모두 보여주는 방법에 대한&amp;nbsp;예:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig show --pretty&lt;span class="o"&gt;=&lt;/span&gt;fuller
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Git 명령에 대해 지원되는 변경 옵션 지원에 대한 소개는 &lt;a href="#5-revision-specification"&gt;지정 리버전&lt;/a&gt; 섹션을 참조하세요. 특정 Git 명령 옵션에 대한 자세한 설명은 해당 명령의 맨 페이지를&amp;nbsp;참조하세요.&lt;/p&gt;
&lt;h2 id="2-the-viewer"&gt;2. The Viewer&amp;nbsp;(뷰어)&lt;/h2&gt;
&lt;p&gt;디스플레이는 하나 이상의 뷰와 스크린으로 구성되어있으며, 맨 마지막 라인은 상태 윈도우로 사용됩니다. 기본 값은 한번에 하나의 뷰만을 보여줍니다. 하지만 메인과 로그 뷰로 나눠서 커밋 diff를 확인할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;현재 라인이 커밋 라인일때, 로그 뷰에서 엔터키를 누르게되면 다음과 같은 명령이 실행되는 것과&amp;nbsp;같습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;commit 4d55caff4cc89335192f3e566004b4ceef572521
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;뷰를 나눠서 볼 수 있는데, 로그 뷰는 윈도우 상단에, diff 뷰는 윈도우 하단에 위치시킬 수 있습니다. 탭을 눌러 두 뷰사이를 왔다갔다 할 수 있습니다. 로그 뷰만 보려면 &lt;code&gt;l&lt;/code&gt;를 누르면&amp;nbsp;됩니다.&lt;/p&gt;
&lt;h3 id="views"&gt;Views&amp;nbsp;(뷰)&lt;/h3&gt;
&lt;p&gt;저장소에서 여러가지 &lt;code&gt;views&lt;/code&gt;를 볼 수 있습니다. 각 뷰는 확장 명령, &lt;code&gt;git log&lt;/code&gt;, &lt;code&gt;git diff&lt;/code&gt;, &lt;code&gt;git show&lt;/code&gt;로부터 나오는 출력 값에 기반하여&amp;nbsp;보여줍니다.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;메인&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;기본 뷰이며, 리버전의 선택된 목록에서 각 커밋을 요약하여 보여줍니다. 요약한 내용에서는 author 날짜, author, 로그 메시지 첫 줄을 포함하고 있습니다. 추가적으로 태그와 같은 저장소 참조 표시도 같이&amp;nbsp;표시됩니다.&lt;/dd&gt;
&lt;dt&gt;로그&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;전체 로그 메시지와 diffstat에대한 리버전 로그를 보여주는 다양한 뷰를&amp;nbsp;제공합니다.&lt;/dd&gt;
&lt;dt&gt;Diff&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;현재 작업 트리에 대한 diff, 즉, 마지막 커밋이후 변화분, 로그 메시지, diffstat, diff에 대한 커밋 diff 완료 내용을&amp;nbsp;나타냅니다.&lt;/dd&gt;
&lt;dt&gt;트리&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;디렉토리 목록을 트리로 표현하여 현재 리버전에대한 하위 디렉토리로 내려가며 확인하거나 올라오며 확인할 수 있으며 파일의 blob에 대해서도 확인이&amp;nbsp;가능합니다.&lt;/dd&gt;
&lt;dt&gt;Blob&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;파일 내용이나 파일 이름에 대한 관련 데이터의 &amp;ldquo;blob&amp;rdquo;을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Blame&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;파일 내용의 주석이나 커밋에 대한 blam을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Refs&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;저장소에서 브런치, 리모트, 태그를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Status&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;작업 트리내의 파일 상태나 staged/unstaged 변화분 확인과 추적되지 않는 파일의 추가를 좀 더 쉽게&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Stage&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;stage된 변화분, unstage된 파일의 추적분, 추적되지 않는 파일의 내용에 대한 diff를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Stash&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;저장소의 Stash 목록을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Grep&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;검색 패턴과 동일한 내용으로 모든 라인과 파일 목록을&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;dt&gt;Pager&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;Stdin으로 입력과 내부 프롬프트에서 입력된 Git 명령어로부터 출력 모두를 보여주는데&amp;nbsp;사용됩니다.&lt;/dd&gt;
&lt;dt&gt;도움말&amp;nbsp;뷰&lt;/dt&gt;
&lt;dd&gt;키 바인딩에 대한 간단한 참조를&amp;nbsp;보여줍니다.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="browsing-state-and-user-defined-commands"&gt;Browsing State and User-defined Commands (상태 확인과 사용자 정의&amp;nbsp;명령어)&lt;/h3&gt;
&lt;p&gt;뷰어는 head와 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt; 모두를 추적하고, 현재 상태를 보여줍니다. 커밋 ID는 커서 라인에 따라가며 다른 커밋을 선택할때마다 강조표시가 변경됩니다. 커밋 ID가 변경되면, diff 뷰에선 열때마다 재로드됩니다. Head ID는 지나온 로그를 보면서 리버전된 것이 나타내는 메인과 로그 뷰를 확인할때&amp;nbsp;사용됩니다.&lt;/p&gt;
&lt;p&gt;Tig에서 명령을 사용하거나 제공하는 명령을 구성할 수 있습니다. &lt;a href="#3-environment-variables"&gt;환경 변수&lt;/a&gt;의 일부와 &lt;a href="#external-commands"&gt;외부 명령&lt;/a&gt;을 사용할 수 있습니다. 사용자 정의 명령의 경우 다음 변수들을 이용하여 현재 브라우징 상태에 대한 참조 인자로 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;변수 값&lt;/th&gt;
&lt;th align="left"&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(head)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 보여지는 &lt;code&gt;haed&lt;/code&gt; &lt;span class="caps"&gt;ID&lt;/span&gt;. 기본값은 &lt;code&gt;HEAD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(commit)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(blob)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 blob &lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(branch)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 브런치 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(stash)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 stash 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(directory)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 트리 뷰에서 보여지는 위치, 루트 디렉토리일 경우, 빈칸으로 표시&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(file)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 파일&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(lineno)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 선택된 라인 번호. 기본 값은 &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(ref)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;참조에서 재공되는 blame 또는 정의되지 않았을 경우, &lt;code&gt;HEAD&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(revargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;명령 라인에서 리버전 인수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(fileargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;명령 라인에서 파일 인수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(cmdlineargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;명령 라인에서 다른 옵션 인자 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(diffargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;diff-options&lt;/code&gt;나 diff 뷰에 대한 &lt;code&gt;TIG_DIFF_OPTS&lt;/code&gt;에서 사용되는 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(logargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Blame 뷰에 대한 &lt;code&gt;blame-options&lt;/code&gt;에서 사용된 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(mainargs)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;로그 뷰에 대한 &lt;code&gt;log-options&lt;/code&gt;에서 사용된 옵션&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%(prompt)&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;인자 값에 대한 프롬프트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;사용자 정의 명령어&amp;nbsp;예제들:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;마지막 커밋에 대해 amend&amp;nbsp;적용:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic + !git commit --amend
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;크립 보드에서 커밋 &lt;span class="caps"&gt;ID&lt;/span&gt;&amp;nbsp;복사:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic &lt;span class="m"&gt;9&lt;/span&gt; !@sh -c &lt;span class="s2"&gt;&amp;quot;echo -n %(commit) | xclip -selection c&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리뷰 즁 현재 커밋에서 사용된 노트&amp;nbsp;추가/수정:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic T !git notes edit %&lt;span class="o"&gt;(&lt;/span&gt;commit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git 대화형으로 파일 내용에 세밀한 staging 추가&amp;nbsp;입력:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; generic I !git add -i %&lt;span class="o"&gt;(&lt;/span&gt;file&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;선택된 브런치의 최상위에서 현재 브런치로&amp;nbsp;리배이스:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; refs &lt;span class="m"&gt;3&lt;/span&gt; !git rebase -i %&lt;span class="o"&gt;(&lt;/span&gt;branch&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="title-windows"&gt;Title Windows (제목&amp;nbsp;윈도우)&lt;/h3&gt;
&lt;p&gt;각 뷰는 뷰 이름에 대한 제목 윈도우를 가집니다. 가능하다면 현재 커밋 ID로도 나태낼 수 있으며, 뷰에서는 다음과 같이&amp;nbsp;위치됩니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt; c622eefaa485995320bc743431bae0d497b1d875 - commit &lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;61&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;기본 값으로 현재 뷰의 제목은 굵은 폰트를 사용하여 강조됩니다. 긴 로딩이 있는 뷰의 경우(3초 이상), 로딩이 시작된 시간으로 부터의 시간이 추가되어&amp;nbsp;보여집니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt; 77d9e40fbcea3238015aea403e06f61542df9a31 - commit &lt;span class="m"&gt;1&lt;/span&gt; of &lt;span class="m"&gt;779&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;%&lt;span class="o"&gt;)&lt;/span&gt; 5s
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="3-environment-variables"&gt;3. Environment Variables (환경&amp;nbsp;변수)&lt;/h2&gt;
&lt;p&gt;Git 인터페이스에 관련된 몇가지 옵션을 환경 옵션을 통해 구성할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="configuration-files"&gt;Configuration Files (구성&amp;nbsp;파일)&lt;/h3&gt;
&lt;p&gt;시작시 Tig는 시스템 전체 구성 파일(기본 값 &lt;code&gt;{sysconfigdir}/tigrc&lt;/code&gt;)을 읽은 다음 사용자 구성 파일(기본 값 &lt;code&gt;~/.tigrc&lt;/code&gt;)을 읽습니다. 이 파일 중 하나의 경로를 다음과 같은 환경 변수를 이용하여 재정의 할 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;TIGRC_USER&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;사용자 구성 파일&amp;nbsp;위치&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;TIGRC_SYSTEM&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;시스템 전체 구성 파일&amp;nbsp;위치&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="repository-references"&gt;Repository References (저장소&amp;nbsp;참조)&lt;/h3&gt;
&lt;p&gt;태그와 브런치 head가 참조하는 커밋은  &lt;code&gt;[&lt;/code&gt;과 &lt;code&gt;]&lt;/code&gt;에 둘러쌓여 참조 이름으로&amp;nbsp;표시됩니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;2006&lt;/span&gt;-03-26 &lt;span class="m"&gt;19&lt;/span&gt;:42 Petr Baudis         &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;cogito-0.17.1&lt;span class="o"&gt;]&lt;/span&gt; Cogito &lt;span class="m"&gt;0&lt;/span&gt;.17.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;브런치가 보여지는 것을 제한하길 원한다면, 보여질 브런치의 이름이 &lt;code&gt;master&lt;/code&gt;이거나 &lt;code&gt;feature/&lt;/code&gt; 로 접두어로 시작하는 경우엔 다음과 같이 변수를 설정할 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TIG_LS_REMOTE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git ls-remote . master feature/*&amp;quot;&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는 여러분의 환경에서 영구적으로 변수를 설하여 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;TIG_LS_REMOTE&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;모든 저장소에 대한 참조를 검색하는 명령을 설정합니다. 명령을 사용하게 되면 &lt;code&gt;git-ls-remote(1)&lt;/code&gt; 과같은 포맷으로 데이터를 출력할 수 있습니다. 기본 값은 다음과 같습니다:&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git ls-remote .
&lt;/pre&gt;&lt;/div&gt;


&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="diff-options-diff"&gt;Diff options (Diff&amp;nbsp;옵션)&lt;/h3&gt;
&lt;p&gt;Diff 뷰에 대해 diff를 어떻게 표시할 것인가에 대한 내용으로 수정이 가능합니다. 예를 들어 커멧과 author 날짜를 상대 날짜와 같이 보길&amp;nbsp;원한다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;TIG_DIFF_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--relative-date&amp;quot;&lt;/span&gt; tig
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는 여러분의 환경에서 영구적으로 변수를 설정하여 사용할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h2 id="4-default-keybindings"&gt;4. Default Keybindings (기본 키&amp;nbsp;바인딩)&lt;/h2&gt;
&lt;p&gt;기본 키 바인딩에 대해서는 아래와&amp;nbsp;같습니다.&lt;/p&gt;
&lt;h3 id="view-switching"&gt;View Switching (뷰&amp;nbsp;전환)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; | 메인 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig main view" src="https://ujuc.github.io/img/2016-02-10_tig_2-1_main.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; | diff 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig diff view" src="https://ujuc.github.io/img/2016-02-10_tig_2-2_diff.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; | 로그 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig log view" src="https://ujuc.github.io/img/2016-02-10_tig_2-3_log.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; | pager 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig parger view" src="https://ujuc.github.io/img/2016-02-10_tig_2-4_pager.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; | 디렉토리 트리 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig tree view" src="https://ujuc.github.io/img/2016-02-10_tig_2-5_tree.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; | 파일 blob 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig file blob view" src="https://ujuc.github.io/img/2016-02-10_tig_2-6_file.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; | grep 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig grep view" src="https://ujuc.github.io/img/2016-02-10_tig_2-7_grep.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; | blame 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig blame view" src="https://ujuc.github.io/img/2016-02-10_tig_2-8_blame.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; | refs 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig refs view" src="https://ujuc.github.io/img/2016-02-10_tig_2-9_refs.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; | stash 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig stash view" src="https://ujuc.github.io/img/2016-02-10_tig_2-10_stash.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; | 도움말 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig help view" src="https://ujuc.github.io/img/2016-02-10_tig_2-11_help.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; | status 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig status view" src="https://ujuc.github.io/img/2016-02-10_tig_2-12_status.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; | stage 뷰로&amp;nbsp;전환&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tig stage view" src="https://ujuc.github.io/img/2016-02-10_tig_2-13_stage.png"&gt;&lt;/p&gt;
&lt;h3 id="view-manipulation"&gt;View Manipulation (뷰&amp;nbsp;조작)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;뷰를 닫는다. 여러뷰가 열려있다면, 뷰 스택 안에서 이전 뷰로 되돌아가게 된다. 마지막 뷰라면, Tig에서 나오게 됨. &lt;code&gt;Q&lt;/code&gt;를 이용하면 모든 뷰를 닫는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Enter&lt;/td&gt;
&lt;td align="left"&gt;이 키는 현재보고 있는 뷰에서 &amp;ldquo;상황에 맞게(context sensitive)&amp;rdquo; 동작합니다. 커밋줄에서의 로그 뷰나 메인 뷰일땐 뷰를 분활하여 커밋 diff를 보여줍니다. diff 뷰에서는 간단하게 한줄을 내리는데 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Tab&lt;/td&gt;
&lt;td align="left"&gt;다음 뷰로 전환&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 뷰를 리로드하거나 새로고침&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;O&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 뷰를 화면에 꽉차도록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Up&lt;/td&gt;
&lt;td align="left"&gt;&amp;ldquo;상황에 맞게(context sensitive)&amp;rdquo; 작동하며, 한 줄 위로 이동합니다. 그러나 메인 뷰에서(split이나 전체 화면에서) diff 뷰를 열경우, 메인 뷰에서는 이전 커밋으로 커서를 변경하고 해당 diff 뷰를 보여주게 됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Down&lt;/td&gt;
&lt;td align="left"&gt;&lt;em&gt;Up&lt;/em&gt;과 동일하며 단지 아래로 내려갑니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;상위로 이동합니다. 트리 뷰에서는 상위 디렉토리로 이동하게 됩니다. blame 뷰에서는 상위 커밋에 대한 blame가 표시됩니다. 머지의 경우, 상위가 쿼리됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="view-specific-actions"&gt;View Specific Actions (뷰 지정&amp;nbsp;동작)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;파일 상태를 업데이트 합니다. Status 뷰에서는 다음 커밋에 대해 추가하지 않은 파일이나 stage 변경 파일에 대해서 추가할 수 있습니다.(&lt;code&gt;git-add &amp;lt;filename&amp;gt;&lt;/code&gt;과 동일한 작업입니다.) Stage 뷰에서는 diff 청크 라인에서는 다음 커밋에 대한 청크만 stage 합니다. diff에 표시되는 모든 변화가 diff 청크 라인에서 stage 되지는 않습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;M&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;git-mergetool(1)&lt;/code&gt;을 실행하여 머지되지 않은 파일을 해결합니다. 주의, 원하는 머지 도구를 사용하기 위해 초기 구성이 필요할 수 있습니다. 올바르게 작동하는지 확인하세요. &lt;code&gt;git-mergetool(1)&lt;/code&gt;의 맨페이지를 확인하세요.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Unstage된 변경을 파일에서 체크아웃합니다. 마지막 커밋한 콘텐츠가 포함된 파일을 재설정합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Stage 싱글 diff 라인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Stage 뷰에서 다음 청크로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;diff 콘텍스트 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;[&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;diff 콘텍스트 축소&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="cursor-navigation"&gt;Cursor Navigation (커서&amp;nbsp;네비게이션)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;커서 한 라인 위로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;커서 한라인 아래로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;PgUp, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;커서 한 페이지 위로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;PgDown, Space&lt;/td&gt;
&lt;td align="left"&gt;커서 한 페이지 아래로 이동&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;End&lt;/td&gt;
&lt;td align="left"&gt;마지막 라인으로 점프&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Home&lt;/td&gt;
&lt;td align="left"&gt;첫 라인으로 점프&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="scrolling"&gt;Scrolling&amp;nbsp;(스크롤링)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Insert&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 라인 위로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Delete&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 라인 아래로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ScrBack&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 페이지 위로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;ScrFwd&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 페이지 아래로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Left&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 컬럼 왼쪽으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;Right&lt;/td&gt;
&lt;td align="left"&gt;뷰 한 컬럼 오른쪽으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;뷰 첫 칼럼으로 스크롤&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="searching"&gt;Searching&amp;nbsp;(검색)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;뷰에서 검색. 열려진 프롬프트에서 정규식을 사용해서 찾을 수 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;뷰에서 뒤에서부터 검색. 이것도 정규식 사용 가능.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 검색 정규식과 동일한 다음 검색&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;현재 검색 정규식과 동일한 이전 검색&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="misc"&gt;Misc&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;나가기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;&amp;lt;C-L&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;스크린 새로고침&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;모든 백그라운드 로딩 정지. 리버전 로그의 제한 없이 긴 히스토리를 가진 저장소에서 Tig를 사용할때 필요할 수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;버전 확인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;옵션 메뉴 열기&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;#&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;라인 번호 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;날짜 표시 on/off/short/relative/local&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;A&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Author 표기 on/off/abbreviated/email/email 사용자 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;G&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;리버전 그래프 시각화 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;라인 그래프 모드 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;F&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;참조 표시 on/off (태그, 브런치 이름)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;W&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;diff에 대한 공백 무시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;커밋 &lt;span class="caps"&gt;ID&lt;/span&gt; 표시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;모든 diff 대신에 현재 선택한 파일에 대한 diff를 참조하기 위한 파일 필터링 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;커밋 제목 넘어감에 대한 강조표시 on/off&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;프롬프트 열기. 특정 명령어를 실행할 수 있도록 허용&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;에디터에서 파일 열기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="prompt"&gt;Prompt&amp;nbsp;(프롬프트)&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;특정 라인 번호로 점프. 예 &lt;code&gt;:80&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:&amp;lt;sha&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;특정 커밋으로 점프. 예 &lt;code&gt;:2f12bcc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;일치하는 키 바인딩 실행. 예 &lt;code&gt;:q&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:!&amp;lt;command&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Pager 내에서 시스템 명령어 실행. 예 &lt;code&gt;:!git log -p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:&amp;lt;action&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;Tig 명령 실행. 예 &lt;code&gt;:edit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:save-display &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;에서 현재 화면 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:save-options &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;에서 현재 옵션 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:script &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;로부터 명령어 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;&lt;code&gt;:exec &amp;lt;flags&amp;gt;&amp;lt;args...&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;&amp;lt;flags&amp;gt;&lt;/code&gt;에 정의된 확장 사용자 정의 명령 옵션과 &lt;code&gt;&amp;lt;args&amp;gt;&lt;/code&gt; 사용하여 명령 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="external-commands"&gt;External Commands (외부&amp;nbsp;명령어)&lt;/h3&gt;
&lt;p&gt;사용자에 따라 외부 명령어가 더 필요한 경우, 쉽게 스크립트다 프로그램을 사용할 수 있는 방법을 제공합니다. 현재 커밋 ID로 키를 연결하고 현재 보여지는 상태에서 정보를 사용할 수 있습니다. Tig에서 기본 등록되어있는 확장&amp;nbsp;명령어:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;Keymap&lt;/th&gt;
&lt;th align="left"&gt;키&lt;/th&gt;
&lt;th align="left"&gt;동작&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;main&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;git cherry-pick %(commit)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;status&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;generic&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;C&lt;/code&gt;&lt;/td&gt;
&lt;td align="left"&gt;&lt;code&gt;git gc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="5-revision-specification"&gt;5. Revision Specification (리버전&amp;nbsp;사항)&lt;/h2&gt;
&lt;p&gt;이 세션에서는 리버전을 표시하거나 볼 수 있는 내용을 제한할 수 있도록 설정하는 방법에 대해서 설명합니다. Tig에서는 구문 분석을 하지 않습니다. 리버전 옵션에 대한 자세한 설명은 Git 메뉴얼 페이지에서 확인하십시오. 연관된 맨페이지는 &lt;code&gt;git-log(1)&lt;/code&gt;을 기준으로 &lt;code&gt;git-diff(1)&lt;/code&gt;과 &lt;code&gt;git-rev-list(1)&lt;/code&gt;입니다.&lt;/p&gt;
&lt;p&gt;설정 가능한 옵션을 사용하여 Git과 상호 작용을 이 세션에서 설명합니다. 예를 들어 &lt;a href="#diff-options-diff"&gt;diff 옵션&lt;/a&gt;에 대한 세션에서 설명된 환경 변수를 사용하여 구성할 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="limit-by-path-name"&gt;Limit by Path Name (패치 이름&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;특정 파일 (또는 여러 파일) 변경에 대해서만 확인하고 싶다면 다음과 같이 목록으로&amp;nbsp;나타냅니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig Makefile README
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tig의 하위 명령 또는 태그 이름과 같은 저장소 참조에서 발생할 수 있는 모호성을 방지하기 위해 Git 옵션의 경우 &lt;code&gt;--&lt;/code&gt;를 사용하여 구분해야됩니다. &lt;code&gt;states&lt;/code&gt;라는 이름을 가진 파일이 있다면, &lt;code&gt;status&lt;/code&gt; 하위 명령과 충돌을 일으킬꺼니 다음과 같이&amp;nbsp;사용해야합니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig -- status
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="limit-by-date-or-number"&gt;Limit by Date or Number (날짜나 숫자&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;Git과의 상호작용 속도를 올리기 위해 로그와 메인 뷰에서 보여지는 커밋의 수를 제한할 수 있습니다. 예를 들어, 날짜로 제한을 걸 경우엔 &lt;code&gt;--since=1.month&lt;/code&gt;, 커밋 수로 제한을 걸 경우엔 &lt;code&gt;-n400&lt;/code&gt;와 같이&amp;nbsp;사용합니다.&lt;/p&gt;
&lt;p&gt;만약 두 날짜 사이에 발생한 변경분에 대해서 확인하고&amp;nbsp;싶다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --after&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;May 5th&amp;quot;&lt;/span&gt; --before&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2006-05-16 15:44&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;주의, 공간을 포함하는 날짜를 사용하지 않는다면 &lt;code&gt;.&lt;/code&gt;를 이용하여 나타낼 수 있습니다. 예, &lt;code&gt;--after=May.5th&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="limiting-by-commit-ranges"&gt;Limiting by Commit Ranges (커밋 범위&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;대안으로 &amp;ldquo;&lt;code&gt;tag-1.0&lt;/code&gt;과 &lt;code&gt;tag-2.0&lt;/code&gt; 사이의 모든 커밋&amp;rdquo;과 같은 특정 범위로 제안할 수 있습니다. 예를&amp;nbsp;들면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig tag-1.0..tag-2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;원격 브런치로 푸시되지 않은 커밋의 검색 제한은 다음과 같은 방법으로 가능합니다. &lt;code&gt;origin&lt;/code&gt;을 업스트림 원격 브런치고 가정하고&amp;nbsp;사용한다면:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig origin..HEAD
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;원격 브런치에서 푸시된 내용들을 나열 합니다. 선택적으로 &lt;code&gt;HEAD&lt;/code&gt;는 생략될 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="limiting-by-reachability"&gt;Limiting by Reachability (도달 가능&amp;nbsp;제한)&lt;/h3&gt;
&lt;p&gt;Git 인터프리트에서는 &amp;ldquo;tag-1.0&amp;hellip;tag-2.0&amp;rdquo;을 사용하는 경우, &amp;ldquo;&lt;code&gt;tag-1.0&lt;/code&gt;를 제외하고 &lt;code&gt;tag-2.0&lt;/code&gt;까지의 모든 커밋&amp;rdquo;으로 지정할 수 없습니다. 도달 가능한 참조는 물음의 브런치의 원형 (또는 히스토리의 일부분)의 커밋 또는 테그된 리버전일 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;p&gt;이 방법으로 다음 미리 커밋을 지정하려는&amp;nbsp;경우:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig tag-2.0 ^tag-1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;부정 연산자로 &lt;code&gt;^&lt;/code&gt;를 생각할 수 있습니다. 이 대체 문법을 사용하면 위의 여려 브런치의 cut off를 지정하여 커밋 브런치를 없애버릴 수&amp;nbsp;있습니다.&lt;/p&gt;
&lt;h3 id="combining-revisions-specification"&gt;Combining Revisions Specification (변경 사항&amp;nbsp;연결)&lt;/h3&gt;
&lt;p&gt;리버전 옵션은 다음과 같이 연결하여 사용할 수 있습니다. &amp;ldquo;&lt;code&gt;Documentation/&lt;/code&gt; 디렉토리에 있는 파일의 변경 사항들을 마지막달 20개 커밋까지 보여다오.&amp;rdquo;를 다음과 같이 나타낼 수&amp;nbsp;있습니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --since&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.month -n20 -- Documentation/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="examining-all-repository-references"&gt;Examining All Repository References (모든 저장소 참조&amp;nbsp;검사)&lt;/h3&gt;
&lt;p&gt;일부 경우엔 저장소에 대한 모든 참조를 걸쳐서 변화를 조회하는 것이 편할 수 있습니다. 다음 예제는 &amp;ldquo;이 저장소의 개발 라인에서 지난주내 특정파일이 변경되었는지&amp;rdquo;에 대해 묻는 것입니다. 다음 명령으로&amp;nbsp;가능합니다:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tig --all --since&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.week -- Makefile
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="6-more-information"&gt;6. More Information (정보를 더&amp;nbsp;원하시면)&lt;/h2&gt;
&lt;p&gt;Tig &lt;a href="http://jonas.nitro.dk/tig"&gt;홈페이지&lt;/a&gt;나 &lt;a href="https://github.com/jonas/tig"&gt;메인 Git 저장소&lt;/a&gt;를 방문하여 새로운 릴리즈 내용, 버그 리포트 내용, 기능 요청에 대한 정보를 얻어가시길&amp;nbsp;바랍니다.&lt;/p&gt;
&lt;h2 id="7-copyright"&gt;7. Copyright&amp;nbsp;(저작권)&lt;/h2&gt;
&lt;p&gt;Copyright (c) 2006-2014 Jonas Fonseca &lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#106;&amp;#111;&amp;#110;&amp;#97;&amp;#115;&amp;#46;&amp;#102;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#99;&amp;#97;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#106;&amp;#111;&amp;#110;&amp;#97;&amp;#115;&amp;#46;&amp;#102;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#99;&amp;#97;&amp;#64;&amp;#103;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This program is free software; you can redistribute it and/or modify it under the terms of the &lt;span class="caps"&gt;GNU&lt;/span&gt; General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later&amp;nbsp;version.&lt;/p&gt;
&lt;h2 id="8-see-also"&gt;8. See Also&amp;nbsp;(더보기)&lt;/h2&gt;
&lt;p&gt;맨&amp;nbsp;페이지:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://jonas.nitro.dk/tig/tig.1.html"&gt;tig(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jonas.nitro.dk/tig/tigrc.5.html"&gt;tigrc(5)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="tig"></category><category term="transelate"></category></entry><entry><title>un~ 너는 뭐니?</title><link href="https://ujuc.github.io/2016/02/03/un-%EB%84%88%EB%8A%94-%EB%AD%90%EB%8B%88/" rel="alternate"></link><published>2016-02-03T00:02:00+09:00</published><updated>2016-02-03T00:02:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-03:/2016/02/03/un-너는-뭐니/</id><summary type="html">&lt;p&gt;언제부터인가 &lt;code&gt;un~&lt;/code&gt;으로 끝나는 파일이 생성되기&amp;nbsp;시작했다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;모르겠다. 얼마 안됐다. 분명 이전에는 없었다. 그런데 언제부터인가. &lt;code&gt;.blabla.un~&lt;/code&gt;이라는 파일이 생성되기 시작했다. 그래서&amp;nbsp;찾았다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimhelp.appspot.com/vim_faq.txt.html#faq-7.2"&gt;Vimhelp -&amp;nbsp;faq-7.2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;수정하고 저장할때마다 &lt;code&gt;un~&lt;/code&gt; 접미사가 붙은 파일이 생간다는 이야기에 대한 내용이다. undo 기능을 사용하기위해서 vim에서 사용하는 파일이라고 한다. 그래서 열었더니 이상한 것들만&amp;nbsp;보여줬구나&amp;hellip;&lt;/p&gt;
&lt;p&gt;끄는 방법은 &lt;code&gt;:set noundofile&lt;/code&gt;을 처주거나 vimrc 파일에 넣어두면된다. 그러면 관련 파일들이 생성되지 않는다. 기존에 있던것들은&amp;nbsp;지워야겠지만&amp;hellip;&lt;/p&gt;</content><category term="vi"></category><category term="undo"></category><category term="vimrc"></category></entry><entry><title>unattended-upgrade 써보자</title><link href="https://ujuc.github.io/2016/01/29/unattended-upgrade-%EC%8D%A8%EB%B3%B4%EC%9E%90/" rel="alternate"></link><published>2016-01-29T22:35:00+09:00</published><updated>2016-01-29T22:35:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-29:/2016/01/29/unattended-upgrade-써보자/</id><summary type="html">&lt;p&gt;Ubuntu에서 보안 업데이트만&amp;nbsp;해보자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;AWS에서 서비스를 Ubuntu로 하고 있는데, 요즘 보안 이슈들이 계속 올라오고 있고,&lt;br&gt;
그것에 대한 패치들도 많이 올라오고 있다. 사용하다가 서비스를 하고 있는 패키지들&lt;br&gt;
을 업데이트를 할 수는 없고 (서비스에서 사용하는 패키지의 경우엔.. 답이 없다. &lt;br&gt;
했다가 무슨 소릴 들을지 모르기도하고 어디서 문제가 발생했는지 모르기도 하고)&lt;br&gt;
보안 패치만큼은 하고&amp;nbsp;싶은데&amp;hellip;&lt;/p&gt;
&lt;p&gt;찾다보니 &lt;code&gt;unattended-upgrade&lt;/code&gt;를 사용해서 할 수가&amp;nbsp;있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/lucid/man8/unattended-upgrade.8.html"&gt;Ubuntu manpage -&amp;nbsp;unattended-upgrade&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;사용법&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;하게되면 알아서 보안 패치를 업그레이드하고 관련된 내용들을 &lt;code&gt;/var/log/unattended-upgrades.log&lt;/code&gt;에서 확인할 수 있다. 관련해서 추가적으로 만들어지는 내용들도 있고, 특정된 내용들을 구성할 수도&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;만약 설치를 하지 않고, 어떠한 보안업데트가 되는지를 확인하고 싶다면, 아래와 같은 명령어를 사용하여 업그레이드를&amp;nbsp;하면된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo unattended-upgrade --dry-run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;왠만해서는 &lt;code&gt;--dry-run&lt;/code&gt; 옵션을 이용하여, 업그레이드를 할 수 있도록 확인해주면 되는데, 쉽지는&amp;nbsp;않지&amp;hellip;&lt;/p&gt;
&lt;p&gt;단점은 아직 1.0이 아니다. 그래서 그런지 외부로 출력되는게 없고, 전부 log파일로만&amp;nbsp;나온다&amp;hellip;&lt;/p&gt;</content><category term="ubuntu"></category><category term="manage"></category><category term="upgrade"></category><category term="security"></category><category term="command"></category></entry><entry><title>mysql 복제 오류</title><link href="https://ujuc.github.io/2016/01/28/mysql-%EB%B3%B5%EC%A0%9C-%EC%98%A4%EB%A5%98/" rel="alternate"></link><published>2016-01-28T01:10:00+09:00</published><updated>2016-01-28T01:10:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-28:/2016/01/28/mysql-복제-오류/</id><summary type="html">&lt;p&gt;오랜만에 RDS를 확인하러 들어갔더니&amp;hellip; error 이벤트가&amp;hellip;&amp;nbsp;딱!&lt;/p&gt;</summary><content type="html">&lt;p&gt;오랜만에 설정할 일이 있어서 RDS로 접속했더니&amp;hellip; &lt;span class="caps"&gt;RDS&lt;/span&gt; 인스턴스에서 error 이벤트가&lt;br&gt;
발생하고 있었다. 복제 기능을 사용하면서 신경안 쓸려고 하고 있었는데&amp;hellip; 여기서&lt;br&gt;&amp;nbsp;문제가&amp;hellip;&lt;/p&gt;
&lt;p&gt;RDS를 제외하고 관련 내용을 찾았더니, &lt;code&gt;my.cnf&lt;/code&gt; 파일에다가 뭘 넣고 수정하라고&lt;br&gt;
한다. 이렇게 할려면 RDS는 안된다. 명령어를 입력하라는 말도 있었다. 그런데&amp;hellip;&lt;br&gt;
이넘의 RDS에서 사용자는 말그대로 사용자일 뿐이다. 어떠한 database에 대한 수정을&lt;br&gt;
가할 수 있는 권한 자체가 없다. 그 사용자 이름을 &lt;code&gt;root&lt;/code&gt;로 했다고 해도&amp;nbsp;말이다.&lt;/p&gt;
&lt;p&gt;결국.. 찾다 돌아온 곳은.&lt;br&gt;
&lt;a href="http://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/UserGuide/mysql_rds_skip_repl_error.html"&gt;Amazon Relational Database Service - mysql_rds_skip_repl_error&lt;/a&gt;&lt;br&gt;
부분. 그냥 접근해서 &lt;code&gt;CALL mysql.rds_skip_repl_error&lt;/code&gt; 입력하면&amp;nbsp;된단다.&lt;/p&gt;
&lt;p&gt;그런데 이건 mysql에서만 발생하는 오류인것같다. mariadb에서는 해당 오류가 없다.&lt;br&gt;
mariadb를 사용하는게 정신 건강에&amp;nbsp;좋은&amp;hellip;&lt;/p&gt;</content><category term="aws"></category><category term="rds"></category><category term="mysql"></category><category term="mariadb"></category><category term="replication"></category></entry><entry><title>Stderr check in zshell</title><link href="https://ujuc.github.io/2016/01/27/stderr-check-in-zshell/" rel="alternate"></link><published>2016-01-27T00:57:00+09:00</published><updated>2016-01-27T00:57:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-27:/2016/01/27/stderr-check-in-zshell/</id><summary type="html">&lt;p&gt;zsh 가상환경 설정한대서 계속 걸쩍지근하게 나오는 에러 문구를 없애고&lt;br&gt;&amp;nbsp;싶었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Shell로 zsh를 사용중이다. 얼마전부터 개발 환경 설정을 해놓고 이곳저곳에서&lt;br&gt;
쓰다보니 해당 개발 환경이 꾸며져있지 않으면, 없다고 해당 문구가&amp;nbsp;출력된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stderr" src="https://ujuc.github.io/img/2016-01-26_shell_error.png"&gt;&lt;/p&gt;
&lt;p&gt;은근히 신경쓰인다. 만약 두개를 설정해놨는데 둘다 없다면 줄이 두 줄로&amp;nbsp;늘어난다.&lt;/p&gt;
&lt;p&gt;그래서 찾았다. 찾다보니 내가 무심코 사용했던 내용에대해 조금더 볼 기회가&amp;nbsp;생긴듯.&lt;/p&gt;
&lt;p&gt;우선 Shell에서 기본 I/O 스트림을 통해서 나오는 값들에대해서 다음 숫자로 제어할&lt;br&gt;
수&amp;nbsp;있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Handle&lt;/th&gt;
&lt;th align="center"&gt;Name&lt;/th&gt;
&lt;th align="center"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;stdin&lt;/td&gt;
&lt;td align="center"&gt;Standard input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;stdout&lt;/td&gt;
&lt;td align="center"&gt;Standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;stderr&lt;/td&gt;
&lt;td align="center"&gt;Standard error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;간단히 하자.&lt;br&gt;
go가 설치되어 있는지 확인을 한다. 제대로 설치됐다면 stdout으로 설치된 경로가 나올&amp;nbsp;것이다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_1" src="https://ujuc.github.io/img/2016-01-26_ex1_1.png"&gt;&lt;/p&gt;
&lt;p&gt;요놈을 안나오게&amp;nbsp;해보자.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which go &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex1_2" src="https://ujuc.github.io/img/2016-01-26_ex1_2.png"&gt;&lt;/p&gt;
&lt;p&gt;오~~~&lt;/p&gt;
&lt;p&gt;stderr 값이 나오면 안나오게 할려고 보면&amp;hellip; 이건 설치가 되어있으니&amp;hellip;&amp;nbsp;없는걸로&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_1" src="https://ujuc.github.io/img/2016-01-26_ex2_1.png"&gt;&lt;/p&gt;
&lt;p&gt;이걸 위와 같이 &lt;code&gt;1&lt;/code&gt; 을&amp;nbsp;사용하면&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ which rbenv &lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; /dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="ex2_2" src="https://ujuc.github.io/img/2016-01-26_ex2_2.png"&gt;&lt;/p&gt;
&lt;p&gt;음&amp;hellip; 출력되는 문구가 stderr로 나오는 건줄 알았는데 아닌갑다. &lt;code&gt;1&lt;/code&gt;로 출력되는걸&amp;nbsp;막으라했더니&amp;hellip;&lt;/p&gt;
&lt;p&gt;그럼 Python에서는 어디로&amp;nbsp;나올까?&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sub&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;check_rbenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_rbenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;음?? 암것도&amp;nbsp;안나온다&amp;hellip;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;출력값이 256이라니&amp;hellip; 혹시나 해서 봤더니 8bit밀란다. 저걸 밀면 1이 떨어지는데&amp;hellip;&lt;br&gt;
리눅스에서 반환값이 1이면 비정상 종료일때로 알고 있다. 고로니 저넘은 제대로&lt;br&gt;
실행된 아이가 아니라는&amp;nbsp;말씀&amp;hellip;&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;which&lt;/code&gt; 명령어를 사용하여 명령어를 실행하게 되면, 정상종료면 위치를&lt;br&gt;
말해줄꺼고 비정상 종료면 stdout으로 없다는 메시지를 남기고 비정상 종료를&lt;br&gt;
시킨다고 해석하면&amp;nbsp;될듯.&lt;/p&gt;
&lt;p&gt;결국 내가 하고 싶은데로 안되는거네&amp;hellip;&amp;nbsp;이런!&lt;/p&gt;
&lt;p&gt;다른 방법으로 찾아야지 뭐 별수 있나&amp;hellip; 그래도 이번에 건진건 저렇게 숫자를&lt;br&gt;
사용해서 내가 원하는 값들만 넣을 수 있는 방법을 찾았다는거&amp;hellip; 그정도면 1시간동안&lt;br&gt;
작업한 것에 대한 내용은&amp;nbsp;될듯.&lt;/p&gt;</content><category term="zsh"></category><category term="operation"></category></entry><entry><title>`_vim_files: function definition files net found` on zsh</title><link href="https://ujuc.github.io/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/" rel="alternate"></link><published>2016-01-16T22:53:00+09:00</published><updated>2016-01-16T22:53:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-16:/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</id><summary type="html">&lt;p&gt;zsh이 올라가고 난뒤에 vim도 같이 올라갔더니 에러를&amp;nbsp;뿝네&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;아&amp;hellip; 오랜만에 vim으로 작업을 하려고 탭을 두번 클릭했더니 아래와 같은 에러가 뜬다. 이넘을 어떻게&amp;nbsp;해야되지.&lt;/p&gt;
&lt;p&gt;&lt;img alt="error!" src="https://ujuc.github.io/img/2016-01-16_error.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;원인&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zcompdump&lt;/code&gt; 때문이라고 하고, 이건 매번 문제가&amp;nbsp;있나보다.ㅡ.ㅡ;;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh/issues/518"&gt;github/robbyrusell/oh-my-zsh/issues/518&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;해결방법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rm ~/.zcompdump&lt;/code&gt;를 삭제하면 된다고&amp;hellip;&lt;br&gt;
그리고 꼭 하고 난뒤에 &lt;code&gt;exec zsh&lt;/code&gt;를 하도록&amp;nbsp;하자.&lt;/p&gt;</content><category term="dev"></category><category term="zsh"></category><category term="vim"></category></entry><entry><title>Git flow, GitHub flow, GitLab flow</title><link href="https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/" rel="alternate"></link><published>2015-12-16T08:50:00+09:00</published><updated>2019-03-24T00:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-12-16:/2015/12/16/git-flow-github-flow-gitlab-flow/</id><summary type="html">&lt;p&gt;Git flow, GitHub flow, GitLab flow 에대해서 좀 알아보자.&amp;nbsp;머리아프다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;회사에서  &lt;code&gt;git&lt;/code&gt;을 가지고서 버전 관리를 본격적으로 하면서, 너무 많은 부분에서 문제가 발생을 하는 것을 보고 이걸 어떤 방식으로 사용하면 조금 더 꼬이는 것을 방지할 수 있을까라는 생각을 하고 있다. &lt;br&gt;
물론 새로운 프로젝트를 진행하면서 어떤 방법으로 진행하는 것이 맞는 것인지도 필요하기도 했고, 그러다가 &lt;a href="http://koalabot-weirdmeetup.herokuapp.com/slack"&gt;이상한 모임 Slack&lt;/a&gt;에서 관련 이야기가 나오면서 커밋을 하기 위한 방법론 중 하나인 &lt;code&gt;git-flow&lt;/code&gt;의 종류가 3가지나 된다는 것을 보고 이놈들의 다른 점이 무엇인지 어떤 방법에서 편한 것인지에 대한 내용을 확인하고 싶어&amp;nbsp;졌다.&lt;/p&gt;
&lt;h2 id="git-flow"&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;Git&amp;nbsp;Flow&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;Vincent Driessen이 말한 branching model&lt;/a&gt;를 구현한 Git 확장 모듈이다. - &lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본 브런치는 5가지를 이야기한다. &lt;code&gt;feature &amp;gt; develop &amp;gt; release &amp;gt; hotfix &amp;gt; master&lt;/code&gt; 브런치가 존재하며, 머지 순서는 앞에서 뒤로 진행된다. &lt;code&gt;release&lt;/code&gt; 브런치와 &lt;code&gt;hotfix&lt;/code&gt; 브런치의 경우, &lt;code&gt;develop&lt;/code&gt; 브런치의 오른쪽에 존재하기에 모두 &lt;code&gt;develop&lt;/code&gt; 브런치도 머지를 하도록 구성이&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;Vincent Driessen은 관련하여 스크립트로 명령을 구성해놨으며, 그냥 설치를 하여 CLI에서 명령으로 작업을 하여도 되고, &lt;span class="caps"&gt;GUI&lt;/span&gt; 툴들에서 기본 내장 git-flow 명령이나 플러그인을 설치하여 작업을 진행할 수 있도록 보편화되어있는 브런칭&amp;nbsp;모델이다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git Flow model" src="http://nvie.com/img/git-model@2x.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;구조와&amp;nbsp;흐름&lt;/h3&gt;
&lt;p&gt;가장 중심이 되는 브런치는 &lt;code&gt;master&lt;/code&gt;랑 &lt;code&gt;develop&lt;/code&gt; 브런치이며, 이 두 개 브런치는 무조건 있어야 한다. 이름은 바뀔 수 있다만 웬만해서는 변경하지 않고 진행하도록 하자. Git도 Production에서 사용하는 브런치는 &lt;code&gt;master&lt;/code&gt;를 사용하게 되니 관련된 부분을 변경하면 새로운 사람이 왔을때 스터디 커브가 존재할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;머지된 &lt;code&gt;feature&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;hotfix&lt;/code&gt; 브런치는 삭제하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4 id="feature"&gt;Feature&amp;nbsp;브런치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브런치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브런치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;release-*&lt;/code&gt;, &lt;code&gt;hotfix-*&lt;/code&gt;를 제외한 어떤 것이든&amp;nbsp;가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기능을 추가하는 브런치이다.&lt;br&gt;
&lt;code&gt;feature&lt;/code&gt;브런치는 &lt;code&gt;origin&lt;/code&gt;에는 반영하지 않고, 개발자의 reop애만 존재하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서 머지를 할 때, &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 브런치에서 머지가 되었음을 git 기록에 남겨두도록 한다. 이렇게 되면 나중에 히스토리 관리가 어려워지는 부분이 존재한다고 한다만&amp;hellip; 그것을 확인할 수 있는 방법들은 많으니&amp;nbsp;뭐&amp;hellip;&lt;/p&gt;
&lt;h4 id="release"&gt;Release&amp;nbsp;브런치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브런치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브런치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;release-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 Production 릴리즈를 위한 브런치이다.&lt;br&gt;
지금까지 한 기능을 묶어 &lt;code&gt;develop&lt;/code&gt; 브런치에서 &lt;code&gt;release&lt;/code&gt; 브런치를 따내고, &lt;code&gt;develop&lt;/code&gt; 브런치에서는 다음번 릴리즈에서 사용할 기능을 추가한다.&lt;br&gt;
&lt;code&gt;release&lt;/code&gt; 브런치에서는 버그 픽스에 대한 부분만 커밋하고, &lt;strong&gt;릴리즈가 준비되었다고 생각하면&lt;/strong&gt; &lt;code&gt;master&lt;/code&gt;로 머지를 진행한다. (이때도 &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 머지하였음을 남긴다.) &lt;br&gt;
&lt;code&gt;master&lt;/code&gt;로 머지 후 &lt;code&gt;tag&lt;/code&gt; 명령을 이용하여 릴리즈 버전에 대해 명시를 하고, &lt;code&gt;-s&lt;/code&gt; 나 &lt;code&gt;-u &amp;lt;key&amp;gt;&lt;/code&gt; 옵션을 이용하여 머지한 사람의 정보를 남겨두도록 한다. 그런 뒤 &lt;code&gt;develop&lt;/code&gt; 브런치로 머지하여, &lt;code&gt;release&lt;/code&gt; 브런치에서 수정된 내용이 &lt;code&gt;develop&lt;/code&gt; 브런치에&amp;nbsp;반영한다.&lt;/p&gt;
&lt;h4 id="hotfix"&gt;Hotfix&amp;nbsp;브런치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;브런치 나오는 곳 : &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브런치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Production에서 발생한 버그들은 전부 여기로&amp;hellip; 수정 끝나면, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt; 브런치에 반영하고, &lt;code&gt;master&lt;/code&gt;에 다가는 &lt;code&gt;tag&lt;/code&gt; 를 추가해준다.&lt;br&gt;
만약 &lt;code&gt;release&lt;/code&gt; 브런치가 존재한다면, &lt;code&gt;release&lt;/code&gt; 브런치에 &lt;code&gt;hotfix&lt;/code&gt; 브런치를 머지하여 릴리즈 될 때 반영이 될 수 있도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h3 id="_2"&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;명령어가&amp;nbsp;나와있다.&lt;/li&gt;
&lt;li&gt;웬만한 에디터와 IDE에는 플러그인으로&amp;nbsp;존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_3"&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브런치가 많아&amp;nbsp;복잡하다.&lt;/li&gt;
&lt;li&gt;안 쓰는 브런치가 있다. 그리고 몇몇 브런치는 애매한&amp;nbsp;포지션이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_4"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model - Vincent&amp;nbsp;Driessen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&amp;nbsp;cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huns.me/development/1131"&gt;gifflow, 쉬운 git brunch 관리 - 개발왕&amp;nbsp;김코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ohgyun.com/402"&gt;git 브랜칭 전략과 git flow -&amp;nbsp;꿀벌개발일지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="github-flow"&gt;GitHub&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Scott chacon은 &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Flow&lt;/a&gt;에서 Git flow가 좋은 방식이긴 하지만 GitHub에서 사용하기에는 복잡하다 여겨 사용하지 않고 &lt;code&gt;GitHub Flow&lt;/code&gt;라는 내용으로 사용을 하고 있다고 한다. 그리고 &lt;strong&gt;자동화의 개념이 들어가 있다는 점&lt;/strong&gt;. 자동화가 안되어있는 곳에서는 수동으로 관련 작업을 진행하면&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;흐름이 단순한 만큼 룰도 단순하다. &lt;code&gt;master&lt;/code&gt; 브런치에 대한 &lt;code&gt;role&lt;/code&gt;만 정확하다면 나머지 브런치들에는 관여를 하지 않는다. 그리고 &lt;code&gt;pull request&lt;/code&gt; 기능을 사용하도록 권장을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="GitHub Flow Model" src="http://cdn-ak.f.st-hatena.com/images/fotolife/s/shoma2da/20151104/20151104223339.png"&gt;&lt;/p&gt;
&lt;h3 id="_5"&gt;특징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt; 브런치가 명확하지 않은 시스템에서 사용에 맞게&amp;nbsp;되어있다.&lt;/li&gt;
&lt;li&gt;여기에는 GitHub의 서비스 특성상. 릴리즈라는 개념이 없는 서비스를 진행하고 있어서 그런 것으로 보이며, 웹 서비스들이 릴리즈라는 개념이 없이지고 있으니 사용하기 편할 것으로&amp;nbsp;보인다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hotfix&lt;/code&gt;와 가장 작은 기능을 구분하지 않는다. 어차피 둘 다 개발자가 수정해야 되는 일중에 하나이다. 단지 우선순위가 어디가 높냐라는&amp;nbsp;단계이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_6"&gt;그럼 어떻게 사용할&amp;nbsp;것인가?&lt;/h3&gt;
&lt;h4 id="1-master"&gt;1. &lt;code&gt;master&lt;/code&gt; 브런치는 어떤 때든 배포가&amp;nbsp;가능하다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; 브런치는 항상 최신의 상태이며, stable 상태로 Product에 배포되는 브런치이다. 그리고 이 브런치에 대해서는 엄격한 &lt;em&gt;role&lt;/em&gt;를 주어&amp;nbsp;사용한다.&lt;/p&gt;
&lt;h4 id="2-master"&gt;2. 새로운 일을 시작하기 위해 브런치를 &lt;code&gt;master&lt;/code&gt;에서 딴다면 이름은 어떤 일을 하는지 명확하게&amp;nbsp;작성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와는 다르게 &lt;code&gt;feature&lt;/code&gt; 브런치나 &lt;code&gt;develop&lt;/code&gt; 브런치가 존재하지 않는다. 그렇기에 새로운 기능을 추가하거나 버그를 해결하기 위한 브런치의 이름은 자세하게 어떤 일을 하고 있는지에 대해서 작성해주도록 하자. Github 페이지에서 보면 어떤 일들이 진행되고 있는지를 확인하기 쉽게&amp;nbsp;말이다.&lt;/p&gt;
&lt;h4 id="3-push"&gt;3. 원격지 브런치로 수시로 push를&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와 가장 상반되는 방식이다. 항상 원격지에 자신이 하고 있는 일들을 올려 다른 사람들도 확인할 수 있도록 해준다.&lt;br&gt;
이 방법의 좋은 점은 하드웨어에 문제가 발생하여 작업하던 부분이 없어지더라도 원격지에 있는 소스를 받아서 작업을 할 수 있도록&amp;nbsp;해준다.&lt;/p&gt;
&lt;h4 id="4-pull-request"&gt;4. 피드백이나 도움이 필요할 때, 그리고 머징 준비가 완료되었을 때는 &lt;code&gt;pull request&lt;/code&gt;를&amp;nbsp;생성한다.&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pull request&lt;/code&gt; 는 코드 리뷰를 도와주는 시스템이다. &lt;br&gt;
그렇기에 이것을 이용하여 자신의 코드를 공유하고, 리뷰를 받을 수 있도록 한다. 물론 머지가 준비 완료되어 &lt;code&gt;master&lt;/code&gt; 브런치로 반영을 요구하여도&amp;nbsp;된다.&lt;/p&gt;
&lt;h4 id="5-master"&gt;5. 기능에 대한 리뷰와 사인이 끝난 후 &lt;code&gt;master&lt;/code&gt;로&amp;nbsp;머지한다.&lt;/h4&gt;
&lt;p&gt;곧장 product로 반영이될 기능이기에 이해관계가 연결된 사람들과 충분한 논의 이후 반영하도록&amp;nbsp;한다.&lt;/p&gt;
&lt;h4 id="6-master"&gt;6. &lt;code&gt;master&lt;/code&gt;로 머지되고 푸시되었을 때는 즉시 배포되어야&amp;nbsp;한다.&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;GitHub Flow&lt;/strong&gt;의 핵심인듯한 &lt;code&gt;master&lt;/code&gt;로 머지가 일어나면 &lt;code&gt;hubot&lt;/code&gt;을 이용하여 자동으로 배포가 되도록&amp;nbsp;설정해놓는다.&lt;/p&gt;
&lt;h3 id="_7"&gt;장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브런치 전략이&amp;nbsp;단순하다.&lt;/li&gt;
&lt;li&gt;처음 git을 접하는 사람에게 정말 좋은 시스템이&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Github 사이트에서 제공하는 기능을 모두 사용하여 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;코드 리뷰를 자연스럽게 사용할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;CI가 필수적이며, 배포는 자동으로 진행할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;Github가 작업을 할 때 이렇게 작업하고&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_8"&gt;단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CI와 배포 자동화가 되어있지 않은 시스템에서는 사람이 관련된 업무를&amp;nbsp;진행한다.&lt;/li&gt;
&lt;li&gt;많은 것들이 올라오기 시작하면&amp;hellip; 그때부터는&amp;nbsp;헬이&amp;hellip;&lt;/li&gt;
&lt;li&gt;너무 간단하니&amp;hellip; 이거 단점이 있나&amp;nbsp;싶다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_9"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/flow/"&gt;Understanding the GitHub&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dogfeet.github.io/articles/2011/github-flow.html"&gt;GitHub Flow -&amp;nbsp;dogfeet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucamezzalira.com/2014/03/10/git-flow-vs-github-flow/"&gt;Git Flow vs Github&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/1557-github-flow-in-the-browser"&gt;GitHub Flow in teh&amp;nbsp;Browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="gitlab-flow"&gt;GitLab&amp;nbsp;Flow&lt;/h2&gt;
&lt;p&gt;Github에서 말하는 flow는 너무나도 간단하여 배포, 환경 구성, 릴리즈, 통합에 대한 이슈를 남겨둔 것이 많았다. 그것을 보안하기 위해 GitLab에서 관련 내용들을 추가적으로 덧붙여 설명한 것을&amp;nbsp;일컫는다.&lt;/p&gt;
&lt;h3 id="production-branch-with-gitlab-flow"&gt;Production branch with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - production branch" src="https://about.gitlab.com/images/git_flow/production_branch.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;production&lt;/code&gt; 브런치가 존재하여 커밋한 내용들을 일방적으로 디플로이를 하는 형태. GitHub에서 브런치 하나를 더 구성하여 사용하는 이것도 조금은 간단한 구성이다.&lt;br&gt;
이렇게 구성하면 배포 자동화가 되어있 지않은 구성에서 어떻게 배포를 진행할 것인가에 대한 내용을 담았다. 물론 이걸로 부족하여 다음의 것도&amp;nbsp;추가되었다.&lt;/p&gt;
&lt;h3 id="environment-branches-with-gitlab-flow"&gt;Environment branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - environment branch" src="https://about.gitlab.com/images/git_flow/environment_branches.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt;와 &lt;code&gt;production&lt;/code&gt; 사이에 &lt;code&gt;pre-production&lt;/code&gt;을 두어 개발한 내용을 곧장 반영하지 않고 시간을 두고 반영을 하는 것을 말한다. Staging을위한 공간을 만드는&amp;nbsp;거지&amp;hellip;&lt;/p&gt;
&lt;h3 id="release-branches-with-gitlab-flow"&gt;Release branches with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - Release branch" src="https://about.gitlab.com/images/git_flow/release_branches.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;release&lt;/code&gt;한 브런치를 두고서 보안상 문제가 발생한 것이나 백 포트를 위해서 작업을 할 경우, cherry-pick을 이용해서 작업을 진행할 수 도 있다. 아니면 해당 릴리즈에서 발생하는 버그들을 묶어서 수정하는 방식으로 작업한다. 일반적으로 말하는 &amp;lsquo;upstream first&amp;rsquo;&amp;nbsp;정책이다.&lt;/p&gt;
&lt;h3 id="mergepull-requests-with-gitlab-flow"&gt;Merge/pull requests with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Pull request를 사용하는 방법이다. GitHub Flow에서 하는 방법과 동일하다. 원문은 길게 적어놨는데&amp;hellip;&amp;nbsp;딱히&amp;hellip;&lt;/p&gt;
&lt;h3 id="issues-with-gitlab-flow"&gt;Issues with GitLab&amp;nbsp;flow&lt;/h3&gt;
&lt;p&gt;Issue 트러커와 연결하여 사용하는 것을 말한다. 긴~~ 시간 동안 작업을 할 경우, 이슈를 생성하여 작업을 진행하는 것으로&amp;hellip;&lt;br&gt;
브런치 이름에는 이슈번호를 적어 작업 중인 이슈가 어떤 것인지를 명확하게 해주는 것이 필요하다.&lt;br&gt;
작업이 끝나거나 코드 공유가 필요한 시점이면 Merge/pull requsts를&amp;nbsp;보낸다.&lt;/p&gt;
&lt;p&gt;다 적을려고 봤더니 그냥 GitLab 사용법에 대해서만 추가적으로 말하고 있어서 이쯤적고 영어로 읽자. 영어가 어렵다면&amp;hellip; 일본어를 번역해서 읽으면 좀 더 쉽게 읽을 수&amp;nbsp;있다.&lt;/p&gt;
&lt;h3 id="_10"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;GitLab&amp;nbsp;Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://postd.cc/gitlab-flow/"&gt;GitLab&amp;nbsp;flowから学ぶワークフローの実践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.gitlab.com/ee/workflow/gitlab_flow.html"&gt;GitLab&amp;nbsp;Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoma2da.hatenablog.com/entry/2015/11/04/233534"&gt;アプリ開発にはGitlab&amp;nbsp;flowが合うと思います&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_11"&gt;끝&lt;/h2&gt;
&lt;p&gt;하&amp;hellip; 길었다. 모든 자료는 공식적으로 첫 번째로 작성된 포스트의 내용을 가져와 작성하였다. 그쪽의 내용이 가장 먼저 말한 사람의 생각이 들어가 있다고 생각했기 때문이다. &lt;br&gt;
그리고 찾으면서 발견한 글들의 경우, 참고 사이트로 작성을 해놨으니 그것을 확인하면&amp;nbsp;될듯.&lt;/p&gt;
&lt;p&gt;Git flow가 편한줄 알았더니&amp;hellip; GitHub나 GitLab을 사용하고 있다면, 굳이 Git flow가 아니더라도 괜찮겠다는 생각이 드는데 딱히 OpenSource를 하는 그룹에서도 Git flow를 사용하기보다는 자신의 코드가 들어가 있는 플랫폼을 가지고서 작업을 하는 경우가 많아서&amp;hellip; 뭐. 업스트림에 작업을 할 수 있는 사람이&amp;nbsp;한정되어있으니까&amp;hellip;&lt;/p&gt;
&lt;p&gt;이런 방법들을 어떻게 사용해보는 것이 좋을련지를 고민해보는 것도 필요하지 않을까 한다. 간단하게 하는 방법도 있고 하니까.. 그리고 내꺼나 차근차근 구축해 나가야&amp;nbsp;되는데&amp;hellip;&lt;/p&gt;
&lt;h3 id="_12"&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nzakas/5511916"&gt;Using GitHub inside a company -&amp;nbsp;Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nczonline.net/blog/2013/05/21/github-workflows-inside-of-a-company/"&gt;GitHub workflows inside of a&amp;nbsp;company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tkhm/items/cc7855d32d640687b43c"&gt;Git利用時のフローはどれを使うか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The&amp;nbsp;gitworkflows(7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;2019-03-24: 죽은 링크 삭제, 맞춤법&amp;nbsp;검사&lt;/p&gt;</content><category term="git"></category><category term="workflow"></category><category term="github"></category><category term="gitlab"></category></entry><entry><title>git-town 사용해보자</title><link href="https://ujuc.github.io/2015/10/26/git-town-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/" rel="alternate"></link><published>2015-10-26T01:11:00+09:00</published><updated>2015-10-26T01:11:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-10-26:/2015/10/26/git-town-사용해보자/</id><summary type="html">&lt;p class="first last"&gt;Git 플러그인중 하나인 git-town에 대해서&amp;nbsp;알아보자.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;아무런 생각없이 메일 온것을 확인중&amp;#8230; 발견한 &lt;a class="reference external" href="https://github.com/Originate/git-town"&gt;git-town&lt;/a&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;솔직히 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 와 다른게 먼가 있을 것같아서 사용을 해볼려고 깔아뒀고,
지금 작성하는 글도 브런치를 &lt;tt class="docutils literal"&gt;git town&lt;/tt&gt; 명령어중 하나를 사용해서 브런치를
딴 후&amp;nbsp;작성중이다.&lt;/p&gt;
&lt;p&gt;명령어 9가지에 대해서 좀 알아보자. 사용법도 같이 좀&amp;nbsp;써보게&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Development Workflow&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-hack.md"&gt;git hack&lt;/a&gt; : 중심 가지에서 새로운 기능 가지를 때는데&amp;nbsp;사용함.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-sync.md"&gt;git sync&lt;/a&gt; : 원본 저장소의 변화분들을 현재 가지에&amp;nbsp;업데이트.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-new-pull-request.md"&gt;git new-pull-request&lt;/a&gt; : 새로운 풀리퀘&amp;nbsp;생성.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-ship.md"&gt;git ship&lt;/a&gt; : 기능 가지를 중심 가지로 넣고&amp;nbsp;꺽기.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repository Maintenance&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-kill.md"&gt;git kill&lt;/a&gt; : 새로운 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-prune-branches.md"&gt;git prune-branches&lt;/a&gt; : 합쳐진 가지&amp;nbsp;꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-rename-branch.md"&gt;git rename-branch&lt;/a&gt; : 이름&amp;nbsp;변경&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-repo.md"&gt;git repo&lt;/a&gt; : 저장소&amp;nbsp;홈페이지로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration and Help&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-town.md"&gt;git town&lt;/a&gt; : 도움말 보기, 구성 확인 및&amp;nbsp;변경.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;확인용이자 기억용으로 작성한건데&amp;#8230; 옵션이 많다&amp;#8230; 그냥 필요할때만&amp;nbsp;봐야지..&lt;/p&gt;
&lt;p&gt;각 명령어별로 어떻게 돌아가는지에 대해서는 &lt;a class="reference external" href="https://github.com/Originate/git-town/tree/master/features"&gt;features&lt;/a&gt;
폴더로 확인하는 편이 좋다. BDD로 테스트를 진행해서 해당 기능들이 어떻게 진행하고
있는지를 그나마 보기 쉽게 되어있기&amp;nbsp;때문이다.&lt;/p&gt;
&lt;p&gt;솔직히 내부 기능들이 Bash로 작성되어있어서 찾아다니기&amp;nbsp;힘들다&amp;#8230;&lt;/p&gt;
</content><category term="git"></category><category term="git-town"></category><category term="git plugins"></category></entry><entry><title>[번역] Vim mouse mode</title><link href="https://ujuc.github.io/2015/07/25/vim-mouse-mode/" rel="alternate"></link><published>2015-07-25T13:22:00+09:00</published><updated>2019-03-23T17:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-07-25:/2015/07/25/vim-mouse-mode/</id><summary type="html">&lt;p class="first last"&gt;.vimrc 설정을 하는데 사용했던 &amp;#8220;mouse&amp;#8221; 명령어에 대한&amp;nbsp;내용.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;나도 &lt;a class="reference external" href="http://github.com/ujuc/dotrc"&gt;vimrc&lt;/a&gt; 설정을 따로 만들었다만, 그것들을 전부 다른 애들이 설정해놓은 것들에서 수정해서 만든거라. 자세히 매뉴얼을 읽어보고 만들지는&amp;nbsp;않았다.&lt;/p&gt;
&lt;p&gt;그런데 얼마전부터 &lt;a class="reference external" href="http://neovim.io"&gt;NeoVim&lt;/a&gt; 매뉴얼을 번역하면서 기능들을 보고 있는데, 사용하고 있는 것들에대해서 나올때마다 작성을 해놔야지&amp;#8230; 안그러면 또 안찾아볼 가능성이&amp;nbsp;높으니&amp;#8230;&lt;/p&gt;
&lt;p&gt;마우스와 관련된 옵션은 &lt;tt class="docutils literal"&gt;mouse&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousefocus&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;moushide&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousemodel&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mouseshape&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;mousetime&lt;/tt&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;옵션 설명(이라쓰고&amp;nbsp;번역&amp;#8230;)&lt;/h2&gt;
&lt;div class="section" id="mouse"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouse'"&gt;mouse&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;string (기본값&amp;nbsp;&amp;#8220;a&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용할 수 있도록 설정한다. 터미널에서는 100%. GUI에서 작동하는 것에 대해서 알고 싶으면, | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse"&gt;gui-mouse&lt;/a&gt; | 를&amp;nbsp;확인하도록.&lt;/p&gt;
&lt;p&gt;모드에서 사용하려면 다음 옵션을&amp;nbsp;달아준다:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모등&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;: &lt;a class="reference external" href="http://neovim.io/doc/user/cmdline.html#Command-line"&gt;Command-line&lt;/a&gt;&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#h"&gt;h&lt;/a&gt;: 도움말 파일에서 수정할때, 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;a: 모든&amp;nbsp;모드&lt;/li&gt;
&lt;li&gt;r: | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hint-enter&lt;/a&gt; | 와 | &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#more-prompt"&gt;more-prompt&lt;/a&gt; |&amp;nbsp;프롬프트에서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일반적으로 모든 모드에서 사용하길 원한다면 &lt;tt class="docutils literal"&gt;:set mouse=a&lt;/tt&gt; 로 구성해두면 된다.
마우스 모드가 제대로 작동하지 않을땐, &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#GUI"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/a&gt; modeless 섹션에서 마우스를 사용하고 있어서 빠진게 아닌지 확인을&amp;#8230; 아마 텍스트 커서도&amp;nbsp;안움직인다고&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/term.html#mouse-using"&gt;mouse-using&lt;/a&gt; , &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 를&amp;nbsp;보세요.&lt;/p&gt;
&lt;p&gt;노트 : X-server로 접근한 터미널에서 마우스를 사용할 땐, 복사, 붙여넣기를 사용할땐 &amp;#8220;* &lt;a class="reference external" href="http://neovim.io/doc/user/sponsor.html#register"&gt;register&lt;/a&gt; 를 사용하게 됩니다. 마우스 버튼을 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt;  에서 사용하려면, &lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#shift"&gt;shift&lt;/a&gt; 를 누르고 사용하면 됩니다. 자세한건 &lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'clipboard'"&gt;clipboard&lt;/a&gt; 옵션에서&amp;nbsp;확인하세요.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousefocus"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousefocus'"&gt;mousefocus&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousef&amp;#8217;  boolean (기본은 off) - {&lt;span class="caps"&gt;GUI&lt;/span&gt; 에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt; 에서 마우스 포인터를 자동으로 활성화 시킬 수 있습니다. 윈도우 레이아웃이나 다른 방법으로 윈도우 초점을 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#changing"&gt;changing&lt;/a&gt;) 하려한다면, 마우스 포인터는 윈도우에서 이동하게된다는데&amp;#8230;
딱히 GUI로 할일은&amp;nbsp;없음&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousehide"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousehide'"&gt;mousehide&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mh&amp;#8217;  boolean (기본은 on) - {GUI에서만&amp;nbsp;작동}&lt;/p&gt;
&lt;p&gt;입력할때 마우스 포인터를 감추고, 마우스가 움직이면 그때사&amp;nbsp;보여줌.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousemodel"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mousem&amp;#8217;  string (기본은 &amp;#8220;extend&amp;#8221;, &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서는&amp;nbsp;&amp;#8220;popup&amp;#8221;)&lt;/p&gt;
&lt;p&gt;마우스를 사용하는 모델을 설정한다. 마우스 오른쪽 키를 눌렸을때 뭘할지에 대해서 설정하는&amp;nbsp;것.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;extend: 마우스 오른쪽 키를 누르면 섹션이 확장됩니다. &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서의 내용과 동일하게&amp;nbsp;동작함.&lt;/li&gt;
&lt;li&gt;popup: 마우스 오른쪽 키를 누르면 팝업 메뉴가 뜸. 마우스 왼쪽키를 누르고 있으면, 섹션을 확장 합니다. &lt;span class="caps"&gt;MS&lt;/span&gt; Windows의 작업과&amp;nbsp;동일함.&lt;/li&gt;
&lt;li&gt;popup_setpos: &amp;#8220;popup&amp;#8221;과 유사. 커서가 마우스 클릭된 곳으로 움직임. 자세한건 한번 읽어보는&amp;nbsp;걸로.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설정별 마우스&amp;nbsp;동작&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="27%" /&gt;
&lt;col width="32%" /&gt;
&lt;col width="41%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;mouse&lt;/th&gt;
&lt;th class="head"&gt;extend&lt;/th&gt;
&lt;th class="head"&gt;popup(_setpost)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 클릭&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;td&gt;커서 위치&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;왼쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;td&gt;섹션 시작&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;시프트 - 왼쪽&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#word"&gt;word&lt;/a&gt; 검색&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 클릭&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;popup 메뉴 (커서 위치)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;오른쪽 끌기&lt;/td&gt;
&lt;td&gt;섹션 확장&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;가운데 키&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;td&gt;붙이기&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;popup&amp;#8221; 모델에서는 pop-up 메뉴를 구성할 수 있음. | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#popup-menu"&gt;popup-menu&lt;/a&gt; | 에서 확인할&amp;nbsp;것.&lt;/p&gt;
&lt;p&gt;마우스 버튼 맵핑을 바꿀려면 | &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#gui-mouse-mapping"&gt;gui-mouse-mapping&lt;/a&gt; | 확인. modeless 섹션에서는 작동&amp;nbsp;안함.&lt;/p&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousemodel'"&gt;mousemodel&lt;/a&gt;&amp;#8216; 옵션은 &lt;a class="reference external" href="http://neovim.io/doc/user/gui.html#:behave"&gt;:behave&lt;/a&gt; 명령어로 설정할 수&amp;nbsp;있음.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mouseshape"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mouseshape'"&gt;mouseshape&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouses&amp;#8217;  string (기본은 &amp;#8220;i:beam,r:beam,s:updown,sd:corss,m:no,ml:up-arrow,v:rightup-arrow&amp;#8221;) - {| &lt;a class="reference external" href="http://neovim.io/doc/user/various.html#+mouseshape"&gt;+mouseshape&lt;/a&gt; | 기능이 켜진채로 컴파일이 되었을 경우, 사용&amp;nbsp;가능}&lt;/p&gt;
&lt;p&gt;다른 모드에서 마우스 포인터가 작동하는 것에대한 것들을 VIM에게 알려주는&amp;nbsp;옵션(?).&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;적용할 수 있는 모드&amp;nbsp;목록:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;일반&amp;nbsp;윈도우:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/pattern.html#n"&gt;n&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;ve&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'selection'"&gt;selection&lt;/a&gt;&amp;#8216; &amp;#8220;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#exclusive"&gt;exclusive&lt;/a&gt;&amp;#8220;가 포함된 &lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#Visual"&gt;Visual&lt;/a&gt; 모드 (특정짓지 않은 거라면, &lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#as"&gt;as&lt;/a&gt; &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/visual.html#v"&gt;v&lt;/a&gt;&amp;#8216;와&amp;nbsp;동일)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#o"&gt;o&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Operator-pending"&gt;Operator-pending&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#i"&gt;i&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Insert"&gt;Insert&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#r"&gt;r&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#Replace"&gt;Replace&lt;/a&gt;&amp;nbsp;모드&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt&gt;나머지:&lt;/dt&gt;
&lt;dd&gt;&lt;dl class="first last docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#c"&gt;c&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서&amp;nbsp;추가&lt;/dd&gt;
&lt;dt&gt;ci&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 삽입(&lt;a class="reference external" href="http://neovim.io/doc/user/insert.html#inserting"&gt;inserting&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;cr&lt;/dt&gt;
&lt;dd&gt;커멘드 라인에서 변경(&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#replacing"&gt;replacing&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#m"&gt;m&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;&lt;span class="caps"&gt;HIT&lt;/span&gt; &lt;span class="caps"&gt;ENTER&lt;/span&gt;&amp;#8217;나 &amp;#8216;More&amp;#8217;&amp;nbsp;프롬프트에서&lt;/dd&gt;
&lt;dt&gt;ml&lt;/dt&gt;
&lt;dd&gt;idem, 마지막 줄에 커서일&amp;nbsp;경우&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#e"&gt;e&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 포인터에 마지막 &lt;a class="reference external" href="http://neovim.io/doc/user/windows.html#window"&gt;window&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#s"&gt;s&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인 위에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;sd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 상태 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;vs&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인에&amp;nbsp;포인터&lt;/dd&gt;
&lt;dt&gt;vd&lt;/dt&gt;
&lt;dd&gt;어떤 모드든, 수직 분할 라인으로&amp;nbsp;드래그&lt;/dd&gt;
&lt;dt&gt;a&lt;/dt&gt;
&lt;dd&gt;어디든&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;마우스 모양(shape)는 다음 모양으로&amp;nbsp;보여짐&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="18%" /&gt;
&lt;col width="74%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;avail&lt;/th&gt;
&lt;th class="head"&gt;이름&lt;/th&gt;
&lt;th class="head"&gt;뭐냐면&amp;#8230;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;arrow&lt;/td&gt;
&lt;td&gt;기본(&lt;a class="reference external" href="http://neovim.io/doc/user/intro.html#Normal"&gt;Normal&lt;/a&gt;) 마우스 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;blank&lt;/td&gt;
&lt;td&gt;모든 곳에서 포인터가 아닌경우 (사용시 주의!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;beam&lt;/td&gt;
&lt;td&gt;I-빔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;updown&lt;/td&gt;
&lt;td&gt;상하 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;leftright&lt;/td&gt;
&lt;td&gt;좌우 크기 조절 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;busy&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 busy 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;시스템에서 사용하는 &amp;#8216;no input&amp;#8217; 포인터&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;udsizing&lt;/td&gt;
&lt;td&gt;상하 크기 재조절을 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;lrsizing&lt;/td&gt;
&lt;td&gt;좌우 크기 재조절를 가르킴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crosshair&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;+&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand1&lt;/td&gt;
&lt;td&gt;검은색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;hand2&lt;/td&gt;
&lt;td&gt;흰색 손&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;pencil&lt;/td&gt;
&lt;td&gt;뭘 쓰고 싶을때&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;question&lt;/td&gt;
&lt;td&gt;큰 &amp;#8216;?&amp;#8217;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;rightup-arrow&lt;/td&gt;
&lt;td&gt;오른쪽 위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt; &lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;up-arrow&lt;/td&gt;
&lt;td&gt;위를 가르키는 화살표&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&amp;lt;number&amp;gt;&lt;/td&gt;
&lt;td&gt;모든 X11 포인트 숫자 (&lt;tt class="docutils literal"&gt;X11/cursorfont.h&lt;/tt&gt; 에서 확인 가능)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;avail&amp;#8221; 칼럼의 내용에서 &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/motion.html#w"&gt;w&lt;/a&gt;&amp;#8216; 의 경우 &lt;a class="reference external" href="http://neovim.io/doc/user/os_win32.html#Win32"&gt;Win32&lt;/a&gt; 에서 사용하는 것이고, &amp;#8216;&lt;a class="reference external" href="http://neovim.io/doc/user/change.html#x"&gt;x&lt;/a&gt;&amp;#8216; 는 X11에서 사용하는 것에 대한 것임.
Any modes not specified or shapes not available use the normal mouse pointer. - 영어의 짧음으로 뭔말인지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;p&gt;예로 &lt;tt class="docutils literal"&gt;:set mouseshape=s:udsizing,m:mo&lt;/tt&gt; 요로케 작성가능. 이렇게 해놓으면, (클릭이후 마우스가 이상태에서 효과가 없으면,)상태 바에 마오스를 올리면 크기 조절 화살표로 변경되고, 화면에서 &lt;a class="reference external" href="http://neovim.io/doc/user/message.html#hit-enter"&gt;hit-enter&lt;/a&gt; 프롬프트일때 no input을&amp;nbsp;가르키게됩니다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mousetime"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://neovim.io/doc/user/options.html#'mousetime'"&gt;mousetime&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;mouset&amp;#8217;  number (기본&amp;nbsp;500)&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;, &lt;span class="caps"&gt;MS&lt;/span&gt;-&lt;span class="caps"&gt;DOS&lt;/span&gt;, Win32, Unix의 &lt;tt class="docutils literal"&gt;xterm&lt;/tt&gt; 에서만 사용 가능. 다중 클릭으로 인식할 수 있는 두 번째 클릭에 대한 msec의 최대 값을&amp;nbsp;정의함.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="vim"></category><category term="vi"></category><category term="vimrc"></category><category term="mouse"></category><category term="기본 설정"></category><category term="transelate"></category></entry><entry><title>Cloud Native Computing Foundation</title><link href="https://ujuc.github.io/2015/07/22/cncf-org/" rel="alternate"></link><published>2015-07-22T22:36:00+09:00</published><updated>2015-07-22T22:36:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-07-22:/2015/07/22/cncf-org/</id><summary type="html">&lt;p class="first last"&gt;Google에서 Kubernetes v1.0을 발표하면서 Cloud Native Computing Foundation과 함께 진행한다고 했다. 깊은글 아니다 소개 글이다. 깊은 글을 10분만에 적을 수&amp;nbsp;있겠는가?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;얼마 전 아시는 분께서 공유를 해주신 사이트&amp;#8230;
구글에서 &lt;a class="reference external" href="http://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; v1.0을 공개하면서 &lt;a class="reference external" href="https://cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt; 와 함께 Container의 생태계를 만들어나갈 거라 전함. &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기의 목표(?) 미션은 현대 분산 시스템 환경에 특화된 새로운 컴퓨팅 패러다임을 생성하고 진행하는 데 있다고 한다. &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[2]&lt;/a&gt; (무의식적으로 번역하고&amp;nbsp;있었다.;;)&lt;/p&gt;
&lt;p&gt;또 번역하다가&amp;nbsp;때리치웠&amp;#8230;&lt;/p&gt;
&lt;p&gt;이번껀 구글에서는 Container를 직접 구현하는 것보다는 그것은 _OpenContainers 로 넘기고 자기들은 오케스트레이션에 더 많은 작업을 하겠다는 의도가 보이는 건 나만의&amp;nbsp;느낌&amp;#8230;&lt;/p&gt;
&lt;p&gt;참가 업체들을 보면 항상 보던 업체들이 많이 보여서&amp;#8230; 뭐 딱히 뭐라 말하기&amp;nbsp;뭐하다는&amp;#8230;&lt;/p&gt;
&lt;p&gt;잘 진행될까 고민되고, 언제쯤 저들이 사용한 것들에 대한 내용을 말해줄 것인지에 대한 내용을 확인 할 수 있을는지 두고두고 봐야 될 프로젝트가&amp;nbsp;늘었다.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;관련&amp;nbsp;소식기사&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://techcrunch.com/2015/07/21/as-kubernetes-hits-1-0-google-donates-technology-to-newly-formed-cloud-native-computing-foundation-with-ibm-intel-twitter-and-others/?ncid=pushup"&gt;As Kubernetes Hits 1.0, Google Donates Technology To Newly Formed Cloud Native Computing&amp;nbsp;Foundation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.linuxfoundation.org/news-media/announcements/2015/07/new-cloud-native-computing-foundation-drive-alignment-among"&gt;New Cloud Native Computing Foundation to Drive Alignment Among Container&amp;nbsp;Technologies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://googlecloudplatform.blogspot.kr/2015/07/Kubernetes-V1-Released.html"&gt;http://googlecloudplatform.blogspot.kr/2015/07/Kubernetes-V1-Released.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://cncf.io/about/our-mission"&gt;https://cncf.io/about/our-mission&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="google"></category><category term="kubernetes"></category><category term="cloud"></category><category term="container"></category></entry><entry><title>OpenStack 새로운 버전 매기기 변경</title><link href="https://ujuc.github.io/2015/06/28/openstack-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B2%84%EC%A0%84-%EB%A7%A4%EA%B8%B0%EA%B8%B0-%EB%B3%80%EA%B2%BD/" rel="alternate"></link><published>2015-06-28T22:24:00+09:00</published><updated>2015-06-28T22:24:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-06-28:/2015/06/28/openstack-새로운-버전-매기기-변경/</id><summary type="html">&lt;p class="first last"&gt;OpenStack 버전 매기는 방법이 변경되었다. &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 에서 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;X.Y.&lt;/span&gt;Z&lt;/tt&gt; 로..&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Liberty 부터는 버전에 관련된 부분이 변경이 되었다. 이번에 Liberty-1 개발 마일스
톤 이메일 &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; 에서 보면 알 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;그리고 이것에 대한 자세한 내용은 &lt;a class="reference external" href="http://ttx.re/new-versioning.html"&gt;New OpenStack Component Versioning&lt;/a&gt; 에서 확인&amp;nbsp;하면된다.&lt;/p&gt;
&lt;p&gt;언제부터인가 OpenStack 버전은 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 으로 버전을 진행하고 있었고,  Kilo의 경우도
2015.1로 넘어가고 있었다. 스위프트의 경우에는 다르게 &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;X.Y.&lt;/span&gt;Z&lt;/tt&gt; 버전으로 계속 발
표를 해오기도했다. (이건 Swift를 주도적으로 개발하고 있는 &lt;a class="reference external" href="https://swiftstack.com"&gt;SwiftStack&lt;/a&gt; 이라는 회사
에서 관리하고 있는&amp;nbsp;부분이기도하다.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;YEAR&lt;/span&gt;.N&lt;/tt&gt; 형식으로 진행하면서 문제가 좀 있었나보다. 글을 읽어보면 백포트 하기도
쉽지 않고, 모든 프로젝트들이 정식 릴리즈 일시와 맞지 않으면 중간에 버전을 따로
해서 내놓고 전체 출시할때는 같은 방법으로 내고 해서 햇갈리는 부분도 있고&amp;nbsp;했던듯.&lt;/p&gt;
&lt;p&gt;라이브러리가 릴리즈되면서 어떤게 어떤건지도 모르겠다는&amp;#8230;&amp;nbsp;말도나온건가&amp;#8230;&lt;/p&gt;
&lt;p&gt;저번 벤쿠퍼 디자인 서밋에서 기본 이야기를 나누고 메일링까지 와서 이야기를 나눈후
이전에 발표된 버전을 통합하여 계산하는 것으로 했다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;Nova의 경우, 첫 Austin 부터 진행해왔으니 12.0.0. Bexar에서 추가된 Glance는
11.0.0. Diablo에서 추가된 Keystone, Horizon은 8.0.0.
(이해가 안되는건 왜 Cinder가&amp;#8230; 8.0.0&amp;nbsp;인건지&amp;#8230;;)&lt;/p&gt;
&lt;p&gt;이렇게 바뀌면 혼란스런 부분이 있겠지만 장기적으로 본다면, 수정하거나 백포트하여
구성할때는 괜찮기도 하겠다는&amp;#8230; 생각이 들기도한다. 그리고 년도 표기를 하지 않음
으로써 실제 서비스시 관련된 내용들을 모두 보여주지 않아도된다는 느낌도 없지 않아&amp;nbsp;있고&amp;#8230;&lt;/p&gt;
&lt;p&gt;그런데 이것보다 중요한건&amp;#8230; 버전업을 6개월마다 하는 것보다는 조금 더 안정적인 버
전이나 &lt;span class="caps"&gt;LTS&lt;/span&gt; 버전같은게 나와줘야되지 않을까하는데&amp;#8230; 뭐 이건 관련 내용을 찾으면 다
시 말을 해야겠다. 너부 빨리 바뀌는 부분들이 많아서 조직에 개발자가 없다면, 특히
나 우리나라 SI의 경우에는 대응하기가 쉽지&amp;nbsp;않아보인다.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html"&gt;http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="openstack"></category><category term="versioning"></category></entry><entry><title>CentOS 7 에서 zabbix-server 에러</title><link href="https://ujuc.github.io/2015/06/14/centos-7-%EC%97%90%EC%84%9C-zabbix-server-%EC%97%90%EB%9F%AC/" rel="alternate"></link><published>2015-06-14T22:30:00+09:00</published><updated>2015-06-14T22:30:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-06-14:/2015/06/14/centos-7-에서-zabbix-server-에러/</id><summary type="html">&lt;p class="first last"&gt;숙제를 늦게하고 있는데 잘안되서&amp;nbsp;찾다보니&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2주전에 받은 숙제인데, 회사일이 바빠서 못하고 있다가 조금 시간이 있어서 설정하고&amp;nbsp;있는데.&lt;/p&gt;
&lt;p&gt;CentOS 7에다가 Zabbix를 올리고있다. VM에서 4시간동안 서비스가 제대로 안돌아서, 내 설정이 잘못되었나 하여, 설치하는 메뉴얼도 바꿔서 확인을 했는데도 안되길레 혹시나 로그에는 있나하여 들어갔더니 &lt;tt class="docutils literal"&gt;journal&lt;/tt&gt; 로 보여지는 것 말고도
&lt;tt class="docutils literal"&gt;/var/log/zabbix&lt;/tt&gt; 가 보여서&amp;nbsp;확인했더니..&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
using configuration file: /etc/zabbix/zabbix_server.conf
current database version (mandatory/optional): 02040000/02040000
required mandatory version: 02040000
listener failed: zbx_tcp_listen() fatal error: unable to serve on any address [[-]:10051]
Got signal [signal:11(SIGSEGV),reason:1,refaddr:0x18]. Crashing ...
&lt;/pre&gt;
&lt;p&gt;음? 서버를 못찾는다고..?? 뭔 말이지. 그래서 그냥 통짜로 복사&amp;nbsp;붙여넣기.&lt;/p&gt;
&lt;p&gt;구글에서 말하는 것들이 많은데 그 중에서 일본사람이 작성한 글. &lt;a class="reference external" href="http://qiita.com/_BSmile_/items/61932e45de5330190027"&gt;CentOS7.1 で zabbix-serverの起動が失敗する話とその解決方法&lt;/a&gt; 에서는 &lt;span class="caps"&gt;CV&lt;/span&gt;#-2014-0092는&amp;#8230; gnutls에 패치가되었는데..
&lt;span class="caps"&gt;CVE&lt;/span&gt;-2014-8564는 적용이 안되서 그부분에 대한 내용을 추가하던지 수정을 해야된다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;자세한건 구글 번역기로 사이트를 돌려서 보도록하자. 그렇다보니 여기서 추천하는 방법은 &lt;tt class="docutils literal"&gt;trousers&lt;/tt&gt; 를 업데이트 하는 방법을 추천하고&amp;nbsp;있다.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ sudo rpm -Uvh https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Retrieving https://kojipkgs.fedoraproject.org/packages/trousers/0.3.11.2/3.fc20/x86_64/trousers-0.3.11.2-3.fc20.x86_64.rpm
Preparing...                          ################################# [100%]
Updating / installing...
1:trousers-0.3.11.2-3.fc20         ################################# [ 50%]
Cleaning up / removing...
2:trousers-0.3.11.2-3.el7          ################################# [100%

$ sudo systemctl start zabbix-server
&lt;/pre&gt;
&lt;p&gt;작동되는 것을 확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;이 글은 &lt;strong&gt;CentOS 7.1.1503&lt;/strong&gt; 버전, &lt;strong&gt;Zabbix 2.4.5&lt;/strong&gt; 버전에서 확인되었고 테스트되었다. 이후 버전에서는 관련 버그가&amp;nbsp;잡히길.&lt;/p&gt;
</content><category term="zabbix"></category><category term="centos"></category></entry><entry><title>Rocket.Chat 번역기</title><link href="https://ujuc.github.io/2015/06/02/rocket.chat-%EB%B2%88%EC%97%AD%EA%B8%B0/" rel="alternate"></link><published>2015-06-02T22:45:00+09:00</published><updated>2015-06-02T22:45:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-06-02:/2015/06/02/rocket.chat-번역기/</id><summary type="html">&lt;p class="first last"&gt;어제 짧아서 번역을&amp;nbsp;했는데&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;어제 //build/ Seoul 행사를 끝내고, 곧장 내려와 메일을 읽던 중, Github 데일리 메
일링에 추가된 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat"&gt;Rocket.Chat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;심심해서 코드 보던 중 발견한 &lt;tt class="docutils literal"&gt;i18n&lt;/tt&gt;. 클클클 번역이나 해야지 짧을 꺼야&amp;#8230; 그런 심보
로 시작. 10분 만에 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt;&amp;nbsp;등록.&lt;/p&gt;
&lt;p&gt;이유는 영어와 한국어의 어순이 반대다 보니&amp;#8230; &lt;tt class="docutils literal"&gt;%s by %s&lt;/tt&gt; 의 경우, 한국어로 &lt;tt class="docutils literal"&gt;%s에서
%s로&lt;/tt&gt; 로 번역이 되어야 되는데. 어떤 놈이 앞의 &lt;tt class="docutils literal"&gt;%s&lt;/tt&gt; 인지 한국어에서는 알 수 없는 문제
가 발생. 그래서 짧은 영어로 적었더니. 친절하게 제목도 바꿔주고, 테스트할 수 있게
PR해줄 수 있느냐기에 신속하게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;&lt;span class="caps"&gt;PR&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;그렇게 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 는 해결되었고, 번역은&amp;nbsp;반영되었다.&lt;/p&gt;
&lt;p&gt;소스 중에 번역 페이지가 있으면 항상 보지는 않았는데&amp;#8230; 이번에는 우연히 번역
을 보았고, PR을 뒤져보니 PR을 보내면 웬만해서는 받아주는 듯하여 &lt;a class="reference external" href="https://github.com/RocketChat/Rocket.Chat/issues/89"&gt;issue&lt;/a&gt; 부터 날리
고 어떻게 할지 기다린 게 잘 된듯하다.
뭐 이렇게 녹색 상자 한 칸 더 체우 는기지&amp;#8230;&amp;nbsp;ㅋㅋㅋㅋㅋ&lt;/p&gt;
</content><category term="자랑질"></category><category term="chat"></category><category term="rocketchat"></category><category term="번역"></category><category term="javascript"></category><category term="meteo"></category></entry><entry><title>Edison pip install error</title><link href="https://ujuc.github.io/2015/05/14/edison-pip-install-error/" rel="alternate"></link><published>2015-05-14T01:39:00+09:00</published><updated>2015-05-14T01:39:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-05-14:/2015/05/14/edison-pip-install-error/</id><summary type="html">&lt;p class="first last"&gt;Edison으로 파이썬을 작업하기위해 패키지를 설치하려보면&amp;#8230; 이넘이 안된
다. 그것에 대한&amp;nbsp;내용이다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;pip를 설치하고 패키지를 확인하려고하면 다음과 같은 에러가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# pip install flask
&lt;/span&gt;Traceback &lt;span class="o"&gt;(&lt;/span&gt;most recent call las&lt;span class="o"&gt;)&lt;/span&gt;:
File &lt;span class="s2"&gt;&amp;quot;/usr/bin/pip&amp;quot;&lt;/span&gt;, line &lt;span class="m"&gt;5&lt;/span&gt;, in &amp;lt;module&amp;gt;
from pkg_resources import load_entry_point
ImportError:No module named pkg_resources
&lt;/pre&gt;
&lt;p&gt;발생하는건 &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; 패키지가 설치되지 않아서&amp;nbsp;문제가&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# wget --no-check-certificate \
&lt;/span&gt;  https://pypi.python.org/packages/source/s/setuptools/setuptools-15.2.tar.gz#md5&lt;span class="o"&gt;=&lt;/span&gt;a9028a9794fc7ae02320d32e2d7e12ee
&lt;span class="c1"&gt;# tar zxf setuptools-15.2.tar.gz
# python setuptools-15.2/ez_setup.py&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pip&lt;/tt&gt; 로 제대로 설치된건지&amp;nbsp;확인하자.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;기본 설치되는 pip 버전이 낮으니.. 업글해줘야되기도&amp;nbsp;해서..&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><category term="edison"></category><category term="pypi"></category><category term="pip"></category><category term="python"></category><category term="error"></category></entry><entry><title>Edison 초기 설정</title><link href="https://ujuc.github.io/2015/05/13/edison-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95/" rel="alternate"></link><published>2015-05-13T22:46:00+09:00</published><updated>2015-05-13T22:46:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-05-13:/2015/05/13/edison-초기-설정/</id><summary type="html">&lt;p class="first last"&gt;Edison을 사용하는데 있어서 초기에 설정하는 부분으로 구성을&amp;nbsp;한다.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="yocta-project-update"&gt;
&lt;h2&gt;Yocta Project&amp;nbsp;Update&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;무엇이든 처음 설정할때는 기본 OS먼저 업데이트를 해줘야된다. 최신 Yocta Project
파일을 받아서&amp;nbsp;설치해준다.&lt;/li&gt;
&lt;li&gt;최신이 아니라면 몇몇 기능이 제대로 되지 않아 다시 설치해줘야될 수 도 있으니 꼭&amp;nbsp;하도록하자.&lt;/li&gt;
&lt;li&gt;컴파일을 진행해도 된다만, 시간이 많거나, 꼭 필요한 패키지가 없거나, 기본적으로
설정을 변경해주어야 할때빼고는&amp;nbsp;하지말자.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intel.com/support/edison/sb/CS-035180.htm"&gt;Yocta 컴파일 이미지&amp;nbsp;다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/intel-edison-flashing-firmware-on-os-x-wired"&gt;플래싱&amp;nbsp;순서&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;위의 사진대로 USB를 연결해주고 (2번에&amp;nbsp;연결)&lt;/li&gt;
&lt;li&gt;Edison 외장디스크가 깨끗한지 확인한다.
* 만약 이전의 이미지 내용이 있다면, &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;Edison/\.*&lt;/span&gt;&lt;/tt&gt; 를 이용하여 모든 내용을 삭제한 다음 받은 이미지를 올리면 된다.
* Edison 파티션의 정보를 확인하여 포멧이 FAT16이라면 디스크 유틸에서 포맷하여 FAT32로&amp;nbsp;변경해주도록.&lt;/li&gt;
&lt;li&gt;다운 받은걸&amp;nbsp;복사하자.&lt;/li&gt;
&lt;li&gt;시리얼 통신으로 Edison에 접근한다.
* &lt;tt class="docutils literal"&gt;screen &lt;span class="pre"&gt;/dev/cu.usbserial-A****&lt;/span&gt; 115200 &lt;span class="pre"&gt;-L&lt;/span&gt;&lt;/tt&gt;
* &lt;tt class="docutils literal"&gt;subserial&lt;/tt&gt; 로 접근을 하면되는데 A뒤의 이름은 변경될 수 있어 작성하지&amp;nbsp;않았다.&lt;/li&gt;
&lt;li&gt;아무런 내용이 안나온다면 들어간 것이니, 엔터&amp;nbsp;두번.&lt;/li&gt;
&lt;li&gt;로그인후 &lt;cite&gt;reboot ota&lt;/cite&gt; 명령어로 재시작.
* &lt;cite&gt;ota&lt;/cite&gt; 로 할 경우, 부팅때 Edison 외장하드에 넣어둔 부팅 이미지들로 새롭게 씌우고 관련 내용들을 업데이트하여 사용할 수 있도록&amp;nbsp;되어있다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 제목에 연결된 링크로 가서 확인하고 작업을&amp;nbsp;진행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Edison&amp;nbsp;구성&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 구성을 하는데 필요한 명령어는 &lt;tt class="docutils literal"&gt;configure_edison&lt;/tt&gt; 으로 작업을 구성하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;전체 설정을 다 변경하고 싶으면 &lt;tt class="docutils literal"&gt;configure_edison &lt;span class="pre"&gt;--setup&lt;/span&gt;&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hostname"&gt;
&lt;h3&gt;Hostname&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --name&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;다음에 나오는 것들에따라서 입력해주면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wifi"&gt;
&lt;h3&gt;Wifi&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --wifi&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;근처에 있는 Wifi들이 다 잡힐 것이나 만약 아무것도 안보인다면 firmware를 업그레
이드 한 뒤에 다시 명령어를 입력하여&amp;nbsp;확인하도록하자.&lt;/li&gt;
&lt;li&gt;버전업이 안되어있는 경우, 잡지&amp;nbsp;못하더라.&lt;/li&gt;
&lt;li&gt;설정이 완료되고 나면 URL을 보여주니 그것을 이용하여 접근하면&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Screen으로 시리얼 접근하는 것은 사용하기가&amp;nbsp;불편하다.&lt;/li&gt;
&lt;li&gt;비밀번호를 설정해주게되면 SSH로 접근이 가능하게 되니 그부분을 추가하여 작업을
진행하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --password&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="package"&gt;
&lt;h2&gt;Package&amp;nbsp;관리자&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edison은 opkg(OpenPackaGe Managemet)라는 비교적 가벼운 패키지 관리자를 사용한
다고 한다. 몇몇 설정이 그렇게 되어있었다. (Yocta Projectdp서 사용하는데,
OpenWRT에서 사용하고&amp;nbsp;있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;패키지 관리자 설치 및&amp;nbsp;설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/managing-devkit-libraries-intel-edison-or-intel-galileo-board"&gt;Intel&amp;nbsp;page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# echo &amp;quot;src intel-iotdk http://iotdk.intel.com/repos/1.1/intelgalactic&amp;quot; &amp;gt; \
&lt;/span&gt;    /etc/opkg/intel-iotdk.conf# opkg update&lt;span class="p"&gt;;&lt;/span&gt; opkg upgrade
&lt;span class="c1"&gt;# opkg update; opkg upgrade&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이렇게하면 기본적인 것들은 추가가 된다만 패키지가 많지는&amp;nbsp;않다.&lt;/li&gt;
&lt;li&gt;더 많은 패키지를 사용하려면 레포지토리를 추가해줘야&amp;nbsp;된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# vi /etc/opkg/base-feeds.conf
&lt;/span&gt;
src/gz all http://repo.opkg.net/edison/repo/all
src/gz edison http://repo.opkg.net/edison/repo/edison
src/gz core2-32 http://repo.opkg.net/edison/repo/core2-32

&lt;span class="c1"&gt;# opkg update&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="edison"></category><category term="개발"></category><category term="embedded"></category><category term="임베디드"></category><category term="intel"></category><category term="iot"></category></entry><entry><title>Status bar &amp; Title bar 숨기기</title><link href="https://ujuc.github.io/2015/04/23/status-bar-&amp;-title-bar-%EC%88%A8%EA%B8%B0%EA%B8%B0/" rel="alternate"></link><published>2015-04-23T01:25:00+09:00</published><updated>2015-04-23T01:25:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-04-23:/2015/04/23/status-bar-&amp;-title-bar-숨기기/</id><summary type="html">&lt;p class="first last"&gt;Android 다 안다는 Status bar, Title bar&amp;nbsp;숨기기.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;요즘 안드로이중이다. 오랜만에 했더니 봐야될께 많다. 특히 UI를 많이 안해서
그런가.. 감이 잘 안온다는&amp;nbsp;문제도&amp;#8230;&lt;/p&gt;
&lt;p&gt;SplashActivity를 추가해줘야되는데. 안드로이드에서 뭘 알아야지.. 그냥 예제에 있는
것들을 찾아서 변경해 추가를 했지만, 정리를 한번 해놔야되서&amp;#8230; 뭐 간단하게 구성은
되어있다만. 이렇게라도 적어놔야 나중에 또 다른곳에서 엉뚱한것을&amp;nbsp;안찾지&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="title-bar"&gt;
&lt;h2&gt;Title bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;이것을 해줄려면 &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; 을 구성해서 해줘야된다. 뭔가 많이 불편해서 다른
곳에서도 가능한가를 찾아봤지만, 안된다. 뭐 특정 구역에서만 가능하게 해놨나보다.
그져 따라서&amp;nbsp;해놔야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에&amp;nbsp;추가한다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Theme.Splash&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:Theme&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windwoNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/stlye&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;위와 같이 구성을 하고서 Activity에 작성을&amp;nbsp;해주면된다.&lt;/p&gt;
&lt;pre class="code c# literal-block"&gt;
&lt;span class="na"&gt;[Activity (Theme = &amp;quot;&amp;#64;style/Theme.Splash&amp;quot;, MainLauncher = true, NoHistory =
ture)]&lt;/span&gt;
&lt;span class="n"&gt;brabra&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;이렇게 하고 필요한 내용들을 추가해주면 된다. 그러면 타이틂 바만 없어지는 것을
확인할 수&amp;nbsp;있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status-bar"&gt;
&lt;h2&gt;Status bar&amp;nbsp;숨기기&lt;/h2&gt;
&lt;p&gt;동일한 &lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에 &lt;tt class="docutils literal"&gt;&amp;lt;item&amp;gt;&lt;/tt&gt; 을&amp;nbsp;변경해주면된다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowFullscreen&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ture&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;참고&amp;nbsp;사이트&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.androidpub.com/4710"&gt;전체화면&amp;nbsp;사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="android"></category><category term="기본"></category><category term="난 모르겠다."></category></entry><entry><title>Odin is?</title><link href="https://ujuc.github.io/2015/04/10/odin-is/" rel="alternate"></link><published>2015-04-10T01:00:00+09:00</published><updated>2015-04-10T01:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-04-10:/2015/04/10/odin-is/</id><summary type="html">&lt;p class="first last"&gt;Parallels에서 이번에 새롭게 런칭한 Cloud 서비스&amp;nbsp;Odin.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Mirantis 블로그를 보다보니&amp;#8230; Parallels의 이름이 올라오면서 &lt;a class="reference external" href="https://www.mirantis.com/blog/parallels-goes-open-source-wants-openstacks-help-penetrate-enterprise/"&gt;Parallels goes open
source, wants OpenStack&amp;#8217;s help to penetrate enterprise&lt;/a&gt; 라는 글이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;내용은 간단하다. Pareallels에서 기업용으로 &lt;a class="reference external" href="http://www.odin.com/"&gt;Odin&lt;/a&gt; 이라는 서비스를 런칭했는데,
자사의 하이퍼 바이저의 개발을 중지하고 KVM을 사용, OpenStack의 도움으로
컨테이너를 이용하는 서비스 개발에 집중을 하겠다는&amp;nbsp;소식&amp;#8230;&lt;/p&gt;
&lt;p&gt;뭐 서비스 측이랑 이야기가 조금 다른 부분이 있긴하다만&amp;#8230; Parallels가 OpenStack
기업 멤버로 등록 Odin으로 등록되어있다. 골드맴버로 들어올려는걸 파운데이션에서&amp;nbsp;거절했다고&amp;#8230;&lt;/p&gt;
&lt;p&gt;그냥 푸념이지만&amp;#8230; 분명 많은 곳에서 하고 있는 것같은데&amp;#8230; 파운데이션 후원사
목록에는 아무도 없다는게&amp;#8230; 좀&amp;nbsp;그래&amp;#8230;&lt;/p&gt;
&lt;p&gt;여는 글은 Odin으로 했으나 맺는 글은&amp;#8230; 오픈소스 프로젝트 기부에대한&amp;nbsp;푸념으로&amp;#8230;&lt;/p&gt;
</content><category term="openstack"></category><category term="cloud"></category><category term="parallels"></category></entry><entry><title>백업 완료</title><link href="https://ujuc.github.io/2015/04/03/%EB%B0%B1%EC%97%85-%EC%99%84%EB%A3%8C/" rel="alternate"></link><published>2015-04-03T00:57:00+09:00</published><updated>2015-04-03T00:57:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-04-03:/2015/04/03/백업-완료/</id><summary type="html">&lt;p class="first last"&gt;이제 다시 시작. Jekyll &amp;gt; Octopress &amp;gt; Pelican&amp;nbsp;정착기.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;github에 블로그를 만든 이유는 한가지&amp;#8230; 놀면서 개발에대한 이야기를 써보자 였다.
그래서 첫 툴로 많이 사용하는 &lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; 을 이용해서 구축&amp;#8230; 그러나 얼마 가지 못해
Jekyll이 제대로 돌아가지 못하는 상황에&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;그래서 결국 &lt;a class="reference external" href="http://octopress.org/"&gt;Octopress&lt;/a&gt; 가 쉽다고 하여 갔으나&amp;#8230; 뭔놈의 테마가 마음에 드는넘이
없는지&amp;#8230; 바꾸는데만 일주일&amp;#8230; 아&amp;#8230;&amp;nbsp;안해&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 이번엔 OpenStack 문서화팀에서 문서들을 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ReStructuredText"&gt;reStructuredText&lt;/a&gt; 형식으로 작성하여
Sphinx로 문서를 컴파일 할꺼라는 소리가 있어서&amp;#8230; 배워봐야지 하면서 Python으로
정적 페이지를 만들어주는 &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 으로 스타표시는 오래됐는데 인자사
사용해볼꺼라고&amp;nbsp;작업을&amp;#8230;&lt;/p&gt;
&lt;p&gt;그런데 글쓰기 편하고 설정하기가 쉽다. Python을 좀 했다고 그런건지&amp;#8230; 기본
설정들을 Make 파일로 명령을 내릴 수 있도록 구성을 해놔서 그런지&amp;#8230; 직접 명령어를
칠필요도 없어서&amp;#8230; 그렇다고 내가 작성할 필요도 없는거고 (가장&amp;nbsp;크다.).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 설정법에 대해서는 주말에 작성해야겠다. 이것저것 설정이나 추가하거나
손대야될 것들이 이것저것. 그리고 이놈의 파이썬 개발자들은 옵션을 뭐이리도 많이&amp;nbsp;넣어놓는건지.;;;&lt;/p&gt;
&lt;p&gt;그리고 첫번째때 주의해야할 것들도 있고, 그것때문에 한번 날렸다가 다시&amp;nbsp;만들었&amp;#8230;&lt;/p&gt;
&lt;p&gt;이제 산적해있는 것들이나 빨리&amp;nbsp;써야겠다.&lt;/p&gt;
</content><category term="백업완료"></category></entry><entry><title>TI에서 베터리를 가장 적게 먹는 칩 출시</title><link href="https://ujuc.github.io/2015/03/16/ti-lowpwoer-soc-release/" rel="alternate"></link><published>2015-03-16T23:56:00+09:00</published><updated>2015-04-02T23:05:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-16:/2015/03/16/ti-lowpwoer-soc-release/</id><summary type="html">&lt;p class="first last"&gt;뉴스가 나왔다. 베터리가 필요없는 SOC가 나왔다고, 믿지는 않았다. 그래서
찾아봤다. 역시나&amp;#8230; 그져 대기시에만 오랫동안 지낼수 있도록 가장 적은
전력을&amp;nbsp;사용할뿐&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.kidd.co.kr/news/178946"&gt;산업일보&lt;/a&gt; 에 &amp;#8220;&lt;span class="caps"&gt;TI&lt;/span&gt;, 베터리 없는 IoT 커넥티비티 구현&amp;#8221; 이라는 뉴스가 올라왔다.
뭔일인가 해서 봤더니만&amp;#8230; SimpleLink라는 초전력 플랫폼을 개발했다는&amp;nbsp;소리였다.&lt;/p&gt;
&lt;p&gt;기본 코어는 &lt;span class="caps"&gt;ARM&lt;/span&gt;® Cortext®-M3 MCU를 사용했고, 플래시 / &lt;span class="caps"&gt;RAM&lt;/span&gt;, &lt;span class="caps"&gt;ADC&lt;/span&gt;, 이것 저것들을
같이 묶은 것에 통신은 &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Bluetooth_low_energy"&gt;Bluetooth Low Energy(&lt;span class="caps"&gt;BLE&lt;/span&gt;)&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/ZigBee"&gt;ZigBee®&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/6LoWPAN"&gt;6LoWPAN&lt;/a&gt;,
sub-1GHz, &lt;a class="reference external" href="https://docs.zigbee.org/zigbee-docs/dcn/09/docs-09-5231-03-rmwg-understanding-zigbee-rf4ce.pdf"&gt;ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;™&lt;/a&gt;, 최대 5Mbps 고유모드로 지원한다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;제목에서는 베터리가 없다고 말을 했지만.. 침 설계된 내용들을&amp;nbsp;확인해보면&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;RX&lt;/span&gt;: 5.9&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;TX&lt;/span&gt; at 0 dBm: 6.1&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode Tx at +5 dBm: 9.1&amp;nbsp;mA&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;MCU&lt;/span&gt;: 61&amp;nbsp;µA/MHz&lt;/li&gt;
&lt;li&gt;Active-mode &lt;span class="caps"&gt;MCU&lt;/span&gt;: 48.5&amp;nbsp;CoreMark/mA&lt;/li&gt;
&lt;li&gt;Active-mode Sensor Controller: 8.2&amp;nbsp;µA/MHz&lt;/li&gt;
&lt;li&gt;Standby: 1 µA (&lt;span class="caps"&gt;RTC&lt;/span&gt; Running and &lt;span class="caps"&gt;RAM&lt;/span&gt;/&lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;Retention)&lt;/li&gt;
&lt;li&gt;shutdown: 100 nA (Wakeup on External&amp;nbsp;Events)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#8230;&lt;/p&gt;
&lt;p&gt;적게 먹기는 한다. 전력은 조금 먹지만, 전압이 1.8에서 3.8V라고 적혀있는 걸보면&amp;#8230;
건전지 2개는&amp;nbsp;들어가야되는&amp;#8230;&lt;/p&gt;
&lt;p&gt;이 아이드은 셈플로 몇개 받을 수 있는지 한번 알아볼까&amp;#8230; 최대 GPIO도 31개면&amp;nbsp;괜찮은데&amp;#8230;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2630"&gt;&lt;span class="caps"&gt;CC2630&lt;/span&gt;&lt;/a&gt; : ZigBee,&amp;nbsp;6LoWPAN&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2640"&gt;&lt;span class="caps"&gt;CC2640&lt;/span&gt;&lt;/a&gt; : Bluetooth&amp;nbsp;Smart&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2650"&gt;&lt;span class="caps"&gt;CC2650&lt;/span&gt;&lt;/a&gt; : Bluetooth Smart, ZigBee, 6LoWPAN, ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc1310"&gt;&lt;span class="caps"&gt;CC1310&lt;/span&gt;&lt;/a&gt; :&amp;nbsp;Sub-1GHz&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ti.com/product/cc2620"&gt;&lt;span class="caps"&gt;CC2620&lt;/span&gt;&lt;/a&gt; : ZigBee &lt;span class="caps"&gt;RF4CE&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="ti"></category><category term="chip"></category><category term="iot"></category><category term="m3"></category><category term="arm"></category><category term="ble"></category><category term="low energy"></category></entry><entry><title>xonsh?</title><link href="https://ujuc.github.io/2015/03/16/xonsh/" rel="alternate"></link><published>2015-03-16T23:50:00+09:00</published><updated>2015-04-03T00:23:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-16:/2015/03/16/xonsh/</id><summary type="html">&lt;p class="first last"&gt;Python으로 만든&amp;nbsp;Shell&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://xonsh.org/index.html"&gt;xonsh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python-ish, BASHwards-compatible shell language and command&amp;nbsp;prompt.라고&amp;#8230;&lt;/p&gt;
&lt;p&gt;저장용. Zsh을 쓰고 있어서 이것을 사용할 일이&amp;#8230;
그리고 기본이 3.4라&amp;#8230; 실질적으로 사용하기에는 쉽지 않을듯. 몇몇 3.x 버전을
기본으로 장착한 배포판의 경우엔&amp;nbsp;다르겠지만.&lt;/p&gt;
</content><category term="python"></category><category term="shell"></category></entry><entry><title>sys.json</title><link href="https://ujuc.github.io/2015/03/10/sys-json/" rel="alternate"></link><published>2015-03-10T13:52:00+09:00</published><updated>2015-04-02T22:30:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-10:/2015/03/10/sys-json/</id><summary type="html">&lt;p class="first last"&gt;system에 관련된 내용들을 json 형태로 웹으로 뿌려줄 수 있다.
Linux의 &lt;cite&gt;proc&lt;/cite&gt; 쪽에서 관련 내용을&amp;nbsp;가져온다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/EricR/sys.json"&gt;EricR/sys.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;좀 독특하다고&amp;nbsp;해야되나?&lt;/p&gt;
&lt;p&gt;Golang을 이용해서 웹을 간단히 띄우고, &lt;tt class="docutils literal"&gt;proc&lt;/tt&gt; 를 이용해서 내용들을 불러와 &lt;span class="caps"&gt;JSON&lt;/span&gt;
형태로 뽑아주도록&amp;nbsp;되어있다.&lt;/p&gt;
&lt;p&gt;몇몇 부분을 수정하거나 작업을 해야되긴 하겠지만 이 정도로 작은 아이를 띄워
무리없이 가져올 수 있다면 그것도 좋은 방법이&amp;nbsp;아닐까&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;내가 생각하는 비슷한&amp;nbsp;패키지&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;nicolargo/glances&lt;/a&gt; - Python으로 구성되어있으며, 서버 형식으로 API들을 뽑아 올
수 있다. 물론 간단한 웹으로도&amp;nbsp;가능하다.&lt;/p&gt;
&lt;/div&gt;
</content><category term="go"></category><category term="json"></category><category term="api"></category></entry><entry><title>git-ftp로 ftp 클라이언트를!</title><link href="https://ujuc.github.io/2015/03/04/git-ftp/" rel="alternate"></link><published>2015-03-04T00:00:00+09:00</published><updated>2015-04-02T00:48:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-04:/2015/03/04/git-ftp/</id><summary type="html">&lt;p class="first last"&gt;ftp만 열려있고 ssh가 안되는 웹 호스팅에서 작업하는 개발자를&amp;nbsp;위해&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;백수 3개월 들어가지는지라 깃 배회중&amp;#8230; 누군가 스타를 누른 &lt;a class="reference external" href="https://github.com/git-ftp/git-ftp"&gt;git-ftp&lt;/a&gt;. git을
이용해서 &lt;span class="caps"&gt;FTP&lt;/span&gt; 클라잉너트를&amp;nbsp;만들었다.&lt;/p&gt;
&lt;p&gt;뭔짓이지&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼&amp;#8230; 만든 이유가 FTP만 지원하는 웹호스팅 때문에 만들었다고 &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt;&amp;#8230; 역시 다른
구멍을 파는 사람들이&amp;nbsp;있구나&amp;#8230;&lt;/p&gt;
&lt;p&gt;변화점까지 확인할 수 있다는건 git의 장점을&amp;nbsp;가져왔구나.&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;&lt;a class="reference external" href="https://github.com/git-ftp/git-ftp/blob/develop/INSTALL.md"&gt;설치&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본&amp;nbsp;설치&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git clone https://github.com/git-ftp/git-ftp.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; git-ftp
$ git tag
$ git checkout &amp;lt;tag&amp;gt;
$ sudo make install
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;업그레이드의&amp;nbsp;경우&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git pull
$ git tag
$ git checkout &amp;lt;tag&amp;gt;
$ sudo make install
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mac &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;nbsp;X&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ brew install git
$ brew install curl --with-ssl --with-libssh2
$ brew install git-ftp
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;curl&lt;/tt&gt; 을 기본으로 설치했는데 &lt;tt class="docutils literal"&gt;ssl&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;libssh2&lt;/tt&gt; 를 사용할 수 있도록 설정이
필요한&amp;nbsp;갑다.&lt;/li&gt;
&lt;li&gt;git이 &lt;tt class="docutils literal"&gt;ssl&lt;/tt&gt; 을 사용하긴&amp;nbsp;한다만&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;사용법&lt;/h2&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# Pushing for the fist time
&lt;/span&gt;$ git ftp init -u &amp;lt;user&amp;gt; -P ftp://host.example.com/public_html

&lt;span class="c1"&gt;# using
&lt;/span&gt;$ git ftp push -u &amp;lt;user&amp;gt; -P ftp://host.example.com/public_html
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;더 자세한 내용은 &lt;a class="reference external" href="https://gitub.com/git-ftp/git-ftp/blob/develop/man/git-ftp.1.md"&gt;man page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;제한&amp;nbsp;사항&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;윈도우와 &lt;span class="caps"&gt;OS&lt;/span&gt; X에서는 테스트를 많이 안했으니 관련된 버그가 있으면 말해 줄&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;배포 도구로 만들어지지 않아서&amp;#8230; 커밋이나 체크 아웃 같은건 알아서&amp;#8230;&amp;nbsp;조심히&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://github.com/git-ftp/git-ftp/blob/develop/README.md#about"&gt;https://github.com/git-ftp/git-ftp/blob/develop/&lt;span class="caps"&gt;README&lt;/span&gt;.md#about&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="git"></category><category term="ftp"></category><category term="shell"></category><category term="cli"></category><category term="bash"></category></entry><entry><title>OpenStack rootwrap</title><link href="https://ujuc.github.io/2015/03/04/openstack-rootwrap/" rel="alternate"></link><published>2015-03-04T00:00:00+09:00</published><updated>2015-04-02T21:18:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-04:/2015/03/04/openstack-rootwrap/</id><summary type="html">&lt;p class="first last"&gt;OpenStack의 Oslo에는 root권한을 얻긱위한 rootwrap이라는 라이브러리가&amp;nbsp;존재한다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;OpenStack 프로젝트들에서 사용되는 것들 중&amp;#8230; &lt;strong&gt;root&lt;/strong&gt; 와 관련된 작업을
진행해야하는 경우가 있다. 그럴때 사용하려고 만들어둔 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap"&gt;rootwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wiki에서는 이 &lt;a class="reference external" href="https://fnords.wordpress.com/2011/11/23/improving-nova-privilege-escalation-model-part-1/"&gt;블로그&lt;/a&gt; 에 작성된 문제를 해결하기 위해서 만들어졌다고&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;짧은 내기억으로는 간단한 팡리로만 존재했던 것같은데. (아닐 가능성 100%라논
소리&amp;#8230;), 지금은 oslo 패키지로 관리되고 있다. &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap"&gt;github&amp;nbsp;repo&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;사용자용&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nova.conf&lt;/tt&gt; 에 다음 문구&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rootwrap_config=/etc/nova/rootwrap.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;배포용 패키지를 만드는&amp;nbsp;사람용&lt;/h2&gt;
&lt;div class="section" id="suduers"&gt;
&lt;h3&gt;Suduers&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sudoers&lt;/tt&gt; 에 다음 문구를&amp;nbsp;추가하도록&amp;#8230;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap /etc/nova/rootwrap.conf *
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;필터 위치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;rootwrap&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Nova-provided&lt;/span&gt;&lt;/tt&gt; 필터 파일을 로드하고, &lt;tt class="docutils literal"&gt;rootwrap.d&lt;/tt&gt; 로 확장
사용자의 필터 파일을 로드하도록 설정해&amp;nbsp;줄것.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[DEFAULT]
filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;필터&amp;nbsp;정의&lt;/h3&gt;
&lt;p&gt;각 노드마다 설치를&amp;#8230;&amp;nbsp;해줘야된다고.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;플러그인&amp;nbsp;작성자용&lt;/h2&gt;
&lt;div class="section" id="run-as-root"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;p&gt;root로 동작시킬 것이 있을&amp;nbsp;경우.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;관련 필터 내용은 &lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/foobar.filters&lt;/tt&gt; 에 추가해둘&amp;nbsp;것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;프로젝트&amp;nbsp;개발자용&lt;/h2&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을&amp;nbsp;추가&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할&amp;nbsp;것.&lt;/li&gt;
&lt;li&gt;Nova 코드에서 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nova/rootwrap.d/{filter_name}.ilters&lt;/span&gt;&lt;/tt&gt; 파일에 관련된 내용을
추가해줄 것.&lt;ul&gt;
&lt;li&gt;예로 Compute 노드에서 작동하는 소스라면
&lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/compute.filters&lt;/tt&gt; 에다가&amp;nbsp;추가하도록.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;상위 필터 타입&amp;nbsp;추가&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 필터 타입은 &lt;tt class="docutils literal"&gt;CommandFilter&lt;/tt&gt; 임.&lt;/li&gt;
&lt;li&gt;새로운 타입을 만들거나 지금 존재하는 타입을 확인하고 싶다면 &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap/blob/master/oslo_rootwrap/filters.py"&gt;filters.py&lt;/a&gt; 를
보면 된다. - &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap#Available_Filter_classes"&gt;Available Filter Classes&lt;/a&gt; 가 아닌걸로도 볼 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="openstack"></category><category term="oslo"></category></entry><entry><title>vim을 IDE처럼 만드는 법을 알아보자.</title><link href="https://ujuc.github.io/2015/03/03/vim-to-ide/" rel="alternate"></link><published>2015-03-03T00:00:00+09:00</published><updated>2015-04-01T23:52:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-03:/2015/03/03/vim-to-ide/</id><summary type="html">&lt;p class="first last"&gt;vimrc를 만드는&amp;nbsp;방법에대해서&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;메일로 Github에서 흥하는 레포들을 소개해주는 서비스가 존재한다. 거기서 오랜만에
vim에 관련된 내용이&amp;nbsp;올라왔다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jez/vim-as-an-ide"&gt;jez/vim-as-an-ide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;뭐 특별한 것은 없어 보이지만, Vim을 설정하는 것들에대해 커밋을 통해서 작성해
뒀다. 그래서 더 좋다. 이렇게하면 나중에 누군가에게 vim을 설정하는 방법에 대해서
알려주는 방법에서도 좋을&amp;nbsp;듯함.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;아쉬운것&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 을 사용해서 플러그인을&amp;nbsp;설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그냥 아쉽다. 다른 것들도 많다. &lt;a class="reference external" href="https://github.com/Shougo/neobundle.vim"&gt;NeoVundle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;. 이정도가 내가 아는 플러그인
설치를 도와주는&amp;nbsp;것들이다.&lt;/p&gt;
&lt;p&gt;뭐 Vundle을 사용하는 방법을 안다면 쉽게 작업을 진행할 수 있으니 필요한 것들을
확인해서 설치하는게&amp;nbsp;필요할듯.&lt;/p&gt;
&lt;p&gt;다른 것들은 나도 보면서 배워야할 것들이다. 플러그인들이 많이 설치되는 것들을
설치해서 사용은 하고 있지만&amp;#8230; 그렇게 많은 기능들을 다 사용하지 않는 이상&amp;#8230;
조금씩 덜어내는 것도 필요할&amp;nbsp;듯.&lt;/p&gt;
&lt;/div&gt;
</content><category term="vim"></category><category term="vimrc"></category><category term="ide"></category></entry><entry><title>timesheet.js??</title><link href="https://ujuc.github.io/2015/03/02/timesheet-js/" rel="alternate"></link><published>2015-03-02T00:00:00+09:00</published><updated>2015-04-01T22:21:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-02:/2015/03/02/timesheet-js/</id><summary type="html">&lt;p class="first last"&gt;timesheet.js라는 연대표를 그려주는 &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;라이브러리&lt;/p&gt;
</summary><content type="html">&lt;p&gt;놀다 보니 이것저것 보는 것들도 많다. 그런것들이라도 간단히&amp;nbsp;적어둬야지&amp;#8230;&lt;/p&gt;
&lt;p&gt;노트에다가 작성을 해놓고 넣어두는 것도 한 방법이지만, 봤을때 좋은거라 생각한다면
그것으로 작업이 가능하지 않을까&amp;nbsp;하여&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;timesheet.js&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;홈페이지: &lt;a class="reference external" href="https://github.com/sbstjn/timesheet.js"&gt;sbstjn/timesheet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;손을 좀 대서 자세하게 보이거나 이것저것 손을 볼 수 있을&amp;nbsp;것같은데&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;예제&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 쓸수 없다는게 rst의&amp;nbsp;단점&amp;#8230;&lt;/p&gt;
&lt;p&gt;그래서 &lt;a class="reference external" href="http://jsfiddle.net/fujstt3s/1/"&gt;예제&lt;/a&gt; 는 링크로&amp;#8230;. &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;특이점&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;소스파일로 되어있는기.. &lt;a class="reference external" href="http://haml.info/"&gt;haml&lt;/a&gt; 로 되어있고, &lt;a class="reference external" href="http://sass-lang.com/"&gt;sass&lt;/a&gt; 는 첨가.&lt;ul&gt;
&lt;li&gt;sass는 CSS를 더 변수, 함수, 확장 / 상속 등의 기능을 추가해서 쉽게 만들고,
쉽게 유지보수 할 수 있도록 되어있다고 한다. 여러 종류가 있다고&amp;#8230; &lt;a class="footnote-reference" href="#id6" id="id5"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haml은 &lt;span class="caps"&gt;HTML&lt;/span&gt; abstraction markup language라고 하는걸 줄였다고, 작성을 해놨네.
&lt;span class="caps"&gt;HTML&lt;/span&gt; 태그를 작성하기 더 쉽게 되어있긴한데&amp;#8230; 태그를 변수로 주는게&amp;nbsp;특이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조금이나 더 짧게 쓰고 조금이나마 더 버전 관리가 쉽게 하도록 하는걸 보면, 점점
더 바닥을 아는 사람들이 없어져가고, 그것들을 알 수 있는 방법들도
없어져가는건 안좋은 점 중&amp;nbsp;하나다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://windtale.net/blog/why-i-choose-sass/"&gt;http://windtale.net/blog/why-i-choose-sass/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="javascript"></category><category term="js"></category></entry><entry><title>Clojure 개발 환경 구축</title><link href="https://ujuc.github.io/2015/03/01/clojure-development-env/" rel="alternate"></link><published>2015-03-01T00:00:00+09:00</published><updated>2015-04-01T21:30:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-01:/2015/03/01/clojure-development-env/</id><summary type="html">&lt;p class="first last"&gt;Clojure 개발 환경 구축&amp;#8230; &lt;a class="reference external" href="https://www.facebook.com/weweirdmeetup"&gt;#이상한 모임&lt;/a&gt; 에서 웹 작업을 진행하는데
있어서&amp;#8230; 내가&amp;nbsp;불편하여&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;1.&amp;nbsp;개요&lt;/h2&gt;
&lt;p&gt;Clojure를 공부하려하는데&amp;#8230; 이것 저것 작업을 하려하니 짧은 기억력으로는 계속
봐야되는지라. 이렇게 작성을 해놔야 나중에 볼 듯하고, 또 어딘가에 넣어둔다고해도
찾을때는 잘 못찾는&amp;nbsp;지라&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;1.&amp;nbsp;전재&lt;/h3&gt;
&lt;p&gt;OSX를 기반으로 한다. &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 를 패키지로 모두 작성된다. 만약 Linux에서
작업하게되면 관련해서 문서는 추가로 작성할 예정임. 문제는 언제될지&amp;nbsp;모르겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;2. 설치할&amp;nbsp;것들&lt;/h2&gt;
&lt;div class="section" id="jdk"&gt;
&lt;h3&gt;1. &lt;span class="caps"&gt;JDK&lt;/span&gt;&amp;nbsp;설치&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;검색해서 JDK를 다운받으면&amp;nbsp;된다.&lt;/li&gt;
&lt;li&gt;Apple에서 기본적으로 주는걸 써도 될&amp;nbsp;듯.&lt;/li&gt;
&lt;li&gt;8으로 설치했는데 작업하는데는 아무런&amp;nbsp;이상없다.&lt;/li&gt;
&lt;li&gt;그래서 그냥&amp;nbsp;쓴다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;brew-cask&lt;/span&gt;&lt;/tt&gt; 에 JDK가&amp;nbsp;있다는&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;2. Leiningen&amp;nbsp;설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;brew install leiningen&lt;/tt&gt; 으로&amp;nbsp;설치.&lt;/li&gt;
&lt;li&gt;딱히 설정할 것&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lein"&gt;
&lt;h2&gt;3. lein&amp;nbsp;사용&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이거 쓸려고 넘많이&amp;nbsp;적었다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ lein
    Leiningen is a tool &lt;span class="k"&gt;for&lt;/span&gt; working with Clojure projects.

    Several tasks are available:
    change              Rewrite project.clj by applying a &lt;span class="k"&gt;function&lt;/span&gt;.
    check               Check syntax and warn on reflection.
    classpath           Print the classpath of the current project.
    clean               Remove all files from project&lt;span class="s1"&gt;'s target-path.
    compile             Compile Clojure source into .class files.
    deploy              Build and deploy jar to remote repository.
    deps                Download all dependencies.
    do                  Higher-order task to perform other tasks in succession.
    help                Display a list of tasks or help for a given task.
    install             Install the current project to the local repository.
    jar                 Package up all the project'&lt;/span&gt;s files into a jar file.
    javac               Compile Java &lt;span class="nb"&gt;source&lt;/span&gt; files.
    new                 Generate project scaffolding based on a template.
    plugin              DEPRECATED. Please use the :user profile instead.
    pom                 Write a pom.xml file to disk &lt;span class="k"&gt;for&lt;/span&gt; Maven interoperability.
    release             Perform :release-tasks.
    repl                Start a repl session either with the current project or standalone.
    retest              Run only the &lt;span class="nb"&gt;test&lt;/span&gt; namespaces which failed last &lt;span class="nb"&gt;time&lt;/span&gt; around.
    run                 Run a -main &lt;span class="k"&gt;function&lt;/span&gt; with optional command-line arguments.
    search              Search remote maven repositories &lt;span class="k"&gt;for&lt;/span&gt; matching jars.
    show-profiles       List all available profiles or display one &lt;span class="k"&gt;if&lt;/span&gt; given an argument.
    &lt;span class="nb"&gt;test&lt;/span&gt;                Run the project&lt;span class="s1"&gt;'s tests.
    trampoline          Run a task without nesting the project'&lt;/span&gt;s JVM inside Leiningen&lt;span class="s1"&gt;'s.
    uberjar             Package up the project files and dependencies into a jar file.
    update-in           Perform arbitrary transformations on your project map.
    upgrade             Upgrade Leiningen to specified version or latest stable.
    vcs                 Interact with the version control system.
    version             Print version for Leiningen and the current JVM.
    with-profile        Apply the given task with the profile(s) specified.

    Run `lein help $TASK` for details.

    Global Options:
      -o             Run a task offline.
      -U             Run a task after forcing update of snapshots.
      -h, --help     Print this help or help for a specific task.
      -v, --version  Print Leiningen'&lt;/span&gt;s version.

    See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
    mixed-source, templates, and copying.
&lt;/pre&gt;
&lt;div class="section" id="project"&gt;
&lt;h3&gt;1. project&amp;nbsp;생성&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein new myproject
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt; 에 프로젝트에 관련된 내용들을 작성한다.&lt;ul&gt;
&lt;li&gt;필요한 것들이 있다면 여기다가 차곡차곡&amp;nbsp;넣어준다.&lt;/li&gt;
&lt;li&gt;그리고 이곳에 &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; 으로 사용할 코드의 위치를 작성해 줘야된다.&lt;ul&gt;
&lt;li&gt;키워드는 &lt;tt class="docutils literal"&gt;:main&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;2. 의존하는 라이브러리&amp;nbsp;다운로드&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein deps
&lt;/pre&gt;
&lt;p&gt;위에서 작성해준 패키지들을 받아와서 실행해준다. 그러니 왠만해서는 설치하고&amp;nbsp;하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;3. 코드&amp;nbsp;작성&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;src/myproject/core.clj&lt;/tt&gt; 가 있다. 이곳에다가 코드를 작성해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;4.&amp;nbsp;실행&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein run
&lt;/pre&gt;
&lt;p&gt;쉽게 실행해서 나오는 것을 볼 수 있다. 뭐&amp;nbsp;간단하네&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;5.&amp;nbsp;패키징&lt;/h3&gt;
&lt;p&gt;역시 Java라고 해야될까&amp;#8230; jar 로 만들어두면 멀티 플랫폼에서도 작동이 가능하다는
것이지. 그리고 그것을 묶어서 보여준다. 나중에가서 설정을 좀 해줘야되는 부분이
발생하겠지만, 지금은 그렇게까지는 나올 필요가&amp;nbsp;없으니&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein uberjar
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;6. 라이브러리&amp;nbsp;검색&lt;/h3&gt;
&lt;p&gt;필요한 라이브러리들을 검색 하는건데&amp;#8230; 검색하는게 더 빠를듯&amp;#8230; 너무 많이
나온다. 그리고 가끔 인덱스를 업데이트를 해주긴 해야되는데&amp;#8230; 오래걸려&amp;#8230;
너무&amp;nbsp;오래&amp;#8230;&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein search ring
&lt;/pre&gt;
&lt;p&gt;불편하게&amp;#8230; 페이지별로 나오니. 이름은 정확히 입력하자. 그리고 동일한 페키지
이름으로 버전들이 쭉~~ 나오니 그것도하나 염두해둘 것&amp;#8230; 버전 정보는 명령어를
하나더 쳐서 확인하게 해야지&amp;#8230; 저렇게 다 보여줄 필요가&amp;nbsp;있나&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;7. 패치&amp;nbsp;설정&lt;/h3&gt;
&lt;p&gt;자동으로 잡아준다. 그래도 추가해야된다면 &lt;tt class="docutils literal"&gt;proejct.clj&lt;/tt&gt; 에 키워드
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:extra-classpath-dirs&lt;/span&gt;&lt;/tt&gt; 를 사용하여 리스트 형식으로 추가해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;8. 인터프리터&amp;nbsp;실행&lt;/h3&gt;
&lt;p&gt;인터프리터를 실행해서 작성한 내요이 맞는지 확인이&amp;nbsp;가능하다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein repl
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h2&gt;참고&amp;nbsp;사이트!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://english4u.kr/clojure-memo/index.html"&gt;Clojure 강좌 -&amp;nbsp;김영태&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;emacs로 되어있는 부부만&amp;nbsp;제외했&amp;#8230;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="clojure"></category><category term="개발 환경"></category><category term="lein"></category></entry><entry><title>oh-my-vim 설치후 오류 (OSX)</title><link href="https://ujuc.github.io/2015/02/26/oh-my-vim-error-osx/" rel="alternate"></link><published>2015-02-26T00:00:00+09:00</published><updated>2015-04-01T21:14:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-26:/2015/02/26/oh-my-vim-error-osx/</id><summary type="html">&lt;p class="first last"&gt;oh-my-vim 설치하고나면 오류가 난다. 그것때문에 작성한글이다. 혹시나
동일한 것이 있으면&amp;nbsp;수정합세&amp;#8230;&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/liangxianzhe/oh-my-vim"&gt;oh-my-vim&lt;/a&gt; 으로 vim 플러그인 설정에 관련된 기본 프로그램을 바꿨다 (이것저것
변경하고 있긴하다만&amp;#8230;). 달라진게 없다. 좀 더 화려해지고 플러그인들로 인해서
IDE급으로 에디터가 변경됐을 뿐이다. 단지 80라인 와랩이&amp;nbsp;필요했을뿐인데&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그렇게 쓰다보니 실행할때마다 에러가&amp;nbsp;뜬다.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neocomplete does work this version of Vim.
It requires &amp;quot;if_lua&amp;quot; enabled Vim(7.3.885 or above).
&lt;/pre&gt;
&lt;p&gt;혹시나 해서 검색을 해봤다. 매번 실행할 때마다 엔터 3번은 너무&amp;nbsp;오래걸려서&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Shougo/neocomplete.vim/issues/237"&gt;neocomplete.vim - Vim version and lua&lt;/a&gt; 에서는 실행후 &lt;tt class="docutils literal"&gt;:version&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 가
&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 인지 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 인지 확인을 하라고 말을&amp;nbsp;한다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-lua&lt;/span&gt;&lt;/tt&gt; 면 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 사용 옵션이 빠져있는 것이 되기에 vim 설치시 그에 대한
옵션을 설정해줘야된다는&amp;nbsp;말을&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OSX&lt;/span&gt; 사용자들에게만 나온는 것같은데&amp;#8230; Linux에 대한 오류가 없는&amp;nbsp;걸보면&amp;#8230;&lt;/p&gt;
&lt;p&gt;암튼 그것을 수정하는 방법은 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 설치할때 옵션을 걸어주고 설치하면 된다.
물론 설치했다면, 다시 설치하면된다. 난 삭제하고 다시 설치&amp;#8230; (적다보니&amp;#8230; 자동화
스크립트에 작성해둔거 변경을&amp;nbsp;해줘야겠다&amp;#8230;)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$ brew install vim --with-cscope --with-lua --override-system-vim
&lt;/pre&gt;
&lt;p&gt;설치해주면된다. 그러면 자연스럽게 넘어가고 에러는 밑으로 나올꺼니 엔터칠 일이&amp;nbsp;줄었다.!!!&lt;/p&gt;
</content><category term="vim"></category><category term="setting"></category></entry><entry><title>Pycharm에서 iPython notebook 사용</title><link href="https://ujuc.github.io/2015/02/23/using-ipython-notebook-on-pycharm/" rel="alternate"></link><published>2015-02-23T00:00:00+09:00</published><updated>2015-04-01T21:07:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-23:/2015/02/23/using-ipython-notebook-on-pycharm/</id><summary type="html">&lt;p class="first last"&gt;Pycharm이 4.0으로 판올림되면서 iPython notebook을 사용할 수 있도록
되었다. 아직 불편한감이 없지않아&amp;nbsp;있음.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Pycharm iPython notebook 지원은 4.0에서부터 지원하기 시작했다. 아직 버전업이
안됐으니&amp;nbsp;작년인듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;iPython을 설치하고 Pycharm에서 설치하려고 봤더니 제대로 돌아가질 않는다.
그렇다고 오류가 보이지도 않아서 직접 터미널에서&amp;nbsp;쳤더니&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패키지가 없어서 안된다!!!&lt;/strong&gt; 라는 비명을 볼 수&amp;nbsp;있었다.&lt;/p&gt;
&lt;p&gt;설치해줘야되는 패키지는 &lt;tt class="docutils literal"&gt;pyzmq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tornado&lt;/tt&gt;, (&lt;tt class="docutils literal"&gt;certifi&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;torando&lt;/tt&gt; 설치시 같이
설치가되니 넘어간다.). 편한 방법으로 설치해주고 작동시키면 돌아가는 것을 확인할
수&amp;nbsp;있다만&amp;#8230;&lt;/p&gt;
&lt;p&gt;Pycharm의 iPython notebook 입력기 UI가 너무 안좋다. 그냥 서버를 띄우고 Web에서
작동하는 것이 입력하기도 쉽고 값들을 확인하면서 작성하기가 더 쉽게 되어있으니
사용자가 알아서&amp;#8230; 나는&amp;nbsp;안쓸꺼임&amp;#8230;&lt;/p&gt;
&lt;p&gt;아마 업데이트 하면&amp;#8230; 괜찮아질꺼야&amp;#8230;&amp;nbsp;그럴꺼야&amp;#8230;&lt;/p&gt;
</content><category term="pycharm"></category><category term="ipython"></category><category term="notebook"></category></entry><entry><title>OpenStack Commit</title><link href="https://ujuc.github.io/2015/02/13/openstack-commit/" rel="alternate"></link><published>2015-02-13T00:00:00+09:00</published><updated>2015-03-31T22:29:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-13:/2015/02/13/openstack-commit/</id><summary type="html">&lt;p class="first last"&gt;OpenStack 커밋에 대한 내용. 이번에 커멋히면서 정리한&amp;nbsp;글.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;기본적인 흐름은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 보고서 따라하면 쉽게 작업을 할 수 있다.
그런데&amp;#8230;. 왜이리&amp;nbsp;어려운거지&amp;#8230;.&lt;/p&gt;
&lt;p&gt;신경 써야될 곳은 파란색으로 되어있는 곳만 신경 쓰면되는 그런&amp;#8230; 어렵지 않을
것같아&amp;nbsp;시작&amp;#8230;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;준비 해야될&amp;nbsp;것&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/+login"&gt;Launchpad&lt;/a&gt; 계정&lt;ul&gt;
&lt;li&gt;버그리포팅을 위해서는 Launchpad 계정이&amp;nbsp;있어야한다.&lt;/li&gt;
&lt;li&gt;그리고 왠만한 OpenID를 이걸로 다 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org"&gt;OpenStack Review&lt;/a&gt; 가입&lt;ul&gt;
&lt;li&gt;리뷰를 무조건&amp;nbsp;타야된다&amp;#8230;&lt;/li&gt;
&lt;li&gt;그러니&amp;nbsp;만들어야&amp;#8230;.&lt;/li&gt;
&lt;li&gt;그리고 ssh key등록을&amp;nbsp;해두는게&amp;#8230;&lt;/li&gt;
&lt;li&gt;그리고 메일링은 꺼두는게&amp;#8230; 너무&amp;nbsp;많이와&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="individual-contributor-license-agreement"&gt;
&lt;h2&gt;Individual Contributor License Agreement&amp;nbsp;결재&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://review.openstack.org/#/settings/agreements"&gt;Individual Contributor License Agreement&lt;/a&gt; 간단하게&amp;nbsp;작성하고..&lt;/li&gt;
&lt;li&gt;회사 대신 기여하거나 단체로 한다면 &lt;a class="reference external" href="https://secure.echosign.com/public/hostedForm?formid=56JUVGT95E78X5"&gt;Corporate Contributor License Agreement&lt;/a&gt;
도 한장&amp;#8230; 작성하고 보니 난 이걸&amp;nbsp;왜했지&amp;#8230;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="git-review"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;git-review&lt;/span&gt;&lt;/tt&gt; 설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;맥은 그냥 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 통일시켜서 설치하는게&amp;nbsp;편한듯&amp;#8230;&lt;/li&gt;
&lt;li&gt;문서상으로는 &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; 로 설치하라고&amp;nbsp;했지만&amp;#8230;&lt;/li&gt;
&lt;li&gt;설치하고 제대로 됐는지 확인을 하기위해서는&lt;ul&gt;
&lt;li&gt;하나를&amp;nbsp;클론하고&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git review &lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/tt&gt; 를 해서 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 제대로 접속했는지를 체크를&amp;nbsp;해준다.&lt;/li&gt;
&lt;li&gt;이때 &lt;tt class="docutils literal"&gt;gitreview.username&lt;/tt&gt; 을 &lt;tt class="docutils literal"&gt;.gitconfig&lt;/tt&gt; 파일에 작성해두지 않았다면
설정하라고&amp;nbsp;뜸.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;작업&amp;nbsp;플로워&lt;/h2&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;버그일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;우선 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bugs.launchpad.net/&amp;lt;projectname&amp;gt;&lt;/span&gt;&lt;/tt&gt; 으로 접속하여 버그 리포팅.&lt;ul&gt;
&lt;li&gt;이때 4가지로 테스크가 나뉘는데,&lt;ol class="arabic"&gt;
&lt;li&gt;새로운 버그 확인: &amp;#8220;New&amp;#8221;로 표기된 버그를 &amp;#8220;Confirmed&amp;#8221;로 변경 가능한 상태.
거의 초기를 말한다고&amp;nbsp;보면됨.&lt;/li&gt;
&lt;li&gt;버그 수정 : 버그를 할당하고, &amp;#8220;In Progress&amp;#8221;로&amp;nbsp;등록.&lt;/li&gt;
&lt;li&gt;리뷰중 : &amp;#8220;Incomplete&amp;#8221;로 표기되고 리뷰가 진행되는 상태를 말함. 최대
4주까지 걸린다고&amp;nbsp;함.&lt;/li&gt;
&lt;li&gt;버그가 또다시 발견된 경우 : 그렇다고함&amp;#8230; (뭐라말하기가&amp;#8230; 그냥 나같은
경우엔 리오픈으로 적고 프로세스&amp;nbsp;해버림&amp;#8230;)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커밋할때 버그 진행상태를 남겨둘 수 있음. 자세한건 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages#Including_external_references"&gt;Including external
references&lt;/a&gt; 를&amp;nbsp;보면됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;청사진으로 새로운 기능을 붙일&amp;nbsp;경우&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이건 그냥 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Blueprints"&gt;Blueprints - wiki&lt;/a&gt; 를&amp;nbsp;보자.&lt;/li&gt;
&lt;li&gt;관심 없고, 내가 딱히 추가할 내용도 별로 없어서&amp;#8230; 우선은..&amp;nbsp;빈칸&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;변경을&amp;nbsp;시작해볼까~~~&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;첫 클론을 떠온거라면 상관없지만&amp;#8230; 뜬지 꽤됐으면 업스트림이랑 코드를 맞춰줘야
된다.&lt;ul&gt;
&lt;li&gt;안하면 일 두번하는 생긴다&amp;#8230; &lt;span class="caps"&gt;OTL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;내가 이글을 쓰고 있는 이유기도&amp;nbsp;하다&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$ git remote update
$ git checkout master
$ git pull --ff-only origin master
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;그리고 브런치를 따는데, Blueprint는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bp/&amp;lt;blueprint_name&amp;gt;&lt;/span&gt;&lt;/tt&gt;, Bug는
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;bug/&amp;lt;bug-number&amp;gt;&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;따주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
git checkout -b TOPIC-BRANCH
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;변경 사항&amp;nbsp;커밋&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;제목은 50자 이내로 작성하고, 한줄 띄우고 내용을&amp;nbsp;작성해줘야된다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/GitCommitMessages"&gt;Git commit messages&lt;/a&gt;&amp;nbsp;참고.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code text literal-block"&gt;
summary

brrrrrrbrrrrrra

&amp;lt;if blueprint&amp;gt;
Implements: blueprint &amp;lt;blueprint_name&amp;gt;
&amp;lt;if bug&amp;gt;
Closes-Bug: #&amp;lt;bug_number&amp;gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-id&lt;/span&gt;&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;git review&lt;/tt&gt; 로 올린뒤에 알아서 붙여주는거라 따로 적을 필요는&amp;nbsp;없다.&lt;/li&gt;
&lt;li&gt;리뷰에 반려가되어서 다시 커밋을 해야되는 경우에는 &lt;tt class="docutils literal"&gt;git commit &lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt;
오셤으로&amp;nbsp;해주면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;리뷰&amp;nbsp;등록&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;git reivew&lt;/tt&gt; 로 하면 &lt;tt class="docutils literal"&gt;review.openstack.org&lt;/tt&gt; 에 올라가 있는 것을 확인할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;변경사항이&amp;nbsp;있을때&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;커밋 메시지에 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Change-Id&lt;/span&gt;&lt;/tt&gt; 가없을때는 붙여넣기 해준 다음 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--amend&lt;/span&gt;&lt;/tt&gt; 로&amp;nbsp;커밋.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나머지 자세한 것들은 &lt;a class="reference external" href="http://docs.openstack.org/infra/manual/developers.html"&gt;Developer&amp;#8217;s Guide&lt;/a&gt; 를 확인하도록하자. 이것도 뭐&amp;#8230; 내가
까먹으니까 작성한&amp;nbsp;것이기도하지만&amp;#8230;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="openstack"></category><category term="commit"></category></entry><entry><title>RAM 리뷰에서 본 버전별 특성</title><link href="https://ujuc.github.io/2015/02/09/RAM-reive/" rel="alternate"></link><published>2015-02-09T00:00:00+09:00</published><updated>2015-03-31T21:47:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-09:/2015/02/09/RAM-reive/</id><summary type="html">&lt;p class="first last"&gt;&lt;span class="caps"&gt;RAM&lt;/span&gt; 사양에 대한 내용들로 그냥&amp;nbsp;기억용임.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;RSS에서 &lt;a class="reference external" href="http://www.anandtech.com/show/8959/ddr4-haswell-e-scaling-review-2133-to-3200-with-gskill-corsair-adata-and-crucial"&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt; Haswell-E Scaling Review&lt;/a&gt;: 2133 to 3200 with G.Skill, Gorsair,
&lt;span class="caps"&gt;ADATA&lt;/span&gt; and Crucial 에서 글이올라왔길레&amp;nbsp;봤는데&amp;#8230;&lt;/p&gt;
&lt;p&gt;어떤분께서 그렇게 말씀하시던 RAM이 버전업되면서 달라지 내용과 다른 점이 보여서
머릿속 내용을 업데이트하는 겸해서 작성해두는&amp;nbsp;내용이다.&lt;/p&gt;
&lt;div class="section" id="dram-comparison"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DRAM&lt;/span&gt;&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="31%" /&gt;
&lt;col width="36%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Low Voltage&lt;/th&gt;
&lt;th class="head"&gt;Standard Voltage&lt;/th&gt;
&lt;th class="head"&gt;Performance Voltage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;2.50V&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1.80V&lt;/td&gt;
&lt;td&gt;1.90V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;td&gt;1.50V&lt;/td&gt;
&lt;td&gt;1.65V&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1.05V&lt;/td&gt;
&lt;td&gt;1.20V&lt;/td&gt;
&lt;td&gt;1.35V&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="bandwidth-comparison"&gt;
&lt;h2&gt;Bandwidth&amp;nbsp;Comparison&lt;/h2&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="7%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="19%" /&gt;
&lt;col width="12%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="23%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Bus Clock&lt;/th&gt;
&lt;th class="head"&gt;Internal Rate&lt;/th&gt;
&lt;th class="head"&gt;Prefetch&lt;/th&gt;
&lt;th class="head"&gt;Transfer Rate&lt;/th&gt;
&lt;th class="head"&gt;Channel Bandwidth&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;100-200 MHz&lt;/td&gt;
&lt;td&gt;2n&lt;/td&gt;
&lt;td&gt;0.20-0.40 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;1.60-3.20 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR2&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;200-533 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;4n&lt;/td&gt;
&lt;td&gt;0.40-1.06 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;3.20-8.50 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR3&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;400-1066 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;0.80-2.13 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;6.40-17.0 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;span class="caps"&gt;DDR4&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1066-2133 MHz&lt;/td&gt;
&lt;td&gt;100-266 MHz&lt;/td&gt;
&lt;td&gt;8n&lt;/td&gt;
&lt;td&gt;2.13-4.26 &lt;span class="caps"&gt;GT&lt;/span&gt;/s&lt;/td&gt;
&lt;td&gt;12.80-25.60 GBps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;전압량은 진화될수록 더 낮아져 전력 소비량은 낮아졌고, 속도는 높아졌다. 그런데
어떤분은 전압 부분만 말씀하시던데&amp;#8230; 물론 이 내용은 특정 벤더사의 내용일 수도
있지만, 그래도 많은 부분 수정이 된것은 맞은듯. &lt;span class="caps"&gt;RAM&lt;/span&gt; PCB를 보면 특정 핀의 길이가
다른 핀보다 0.5mm만큼 긴것도 특이하다. 특히, 일정 구간에서는 늘어나는 모습을
보여주는&amp;nbsp;것도&amp;#8230;&lt;/p&gt;
&lt;p&gt;자세한건 기사내용을 보는 것이 더&amp;nbsp;좋은듯.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ram"></category><category term="hw"></category><category term="하드웨어"></category></entry><entry><title>gitworkflows(7)에대한 이야기</title><link href="https://ujuc.github.io/2015/02/02/gitworkflows7/" rel="alternate"></link><published>2015-02-02T00:00:00+09:00</published><updated>2015-03-31T00:13:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-02:/2015/02/02/gitworkflows7/</id><summary type="html">&lt;p class="first last"&gt;Git workflow 7 에대한&amp;nbsp;이야기&lt;/p&gt;
</summary><content type="html">&lt;p&gt;페이스북의 &lt;a class="reference external" href="https://www.facebook.com/groups/kgugs"&gt;Korea Git User Group&lt;/a&gt; 에 &lt;tt class="docutils literal"&gt;gitworkflows&lt;/tt&gt; 에 대한 내용을
이야기하면서 슬라이드 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; 를 하나&amp;nbsp;올려주셨다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7)&amp;nbsp;illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정말 슬라이드를 이렇게까지 만들어주는건 정말 좋은듯. 특히 발표 당시에 그것을
못들었다고 해도 이 슬라이드만 보고도 알 수 있어서 더 좋음. 물론 발표용이라면
이것보다는 간단히 구성하는게&amp;nbsp;맞겠지만&amp;#8230;&lt;/p&gt;
&lt;p&gt;그렇다고 이걸 쓰고 싶지는 않다. 뭔가 복잡하다. 이게 어디서 좋은거지 라는&amp;nbsp;생각이든다.&lt;/p&gt;
&lt;p&gt;브런치 전략은 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 가 가장 쉽게 접근 할 수&amp;nbsp;잇는듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitworkflows/1.8.2.1"&gt;gitworkflows(7) Manual Page&lt;/a&gt; &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt; 를&amp;nbsp;확인하도록하자.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;원문이 일어로 보인다. &lt;a class="reference external" href="(http://www.slideshare.net/ktateish/gitworkflows7)"&gt;図解gitworkflows(7)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;문서가 1.8.2.1 이전과 이후로 많은 부분이 변경된 것으로 보인다. 그만큼
길어졌고 추가된 기능들이 많은것을 볼수 있으니, 관련해서 한번 찾아보는 것이
필요.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="git"></category><category term="workflow"></category></entry><entry><title>단장 완료</title><link href="https://ujuc.github.io/2015/01/31/%EB%8B%A8%EC%9E%A5-%EC%99%84%EB%A3%8C/" rel="alternate"></link><published>2015-01-31T04:10:00+09:00</published><updated>2015-03-30T00:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-01-31:/2015/01/31/단장-완료/</id><summary type="html">&lt;p class="first last"&gt;jekyll 로 변경하면서&amp;nbsp;작성.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;간단하게 작업을 진행해서 뭐 넣은 것 없는 그런페이지가&amp;nbsp;만들어진듯&amp;#8230;&lt;/p&gt;
&lt;p&gt;여기다 아무리 무겁게 글을 써도 불러오는 속도가 빠르니 뭐 간다낳게 작성하기는&amp;nbsp;좋을듯.&lt;/p&gt;
</content><category term="시작"></category></entry><entry><title>[Google Cloud Platfrom] Google Cloud Endpoints</title><link href="https://ujuc.github.io/2014/11/14/google-cloud-platform-google-cloud-endpoints/" rel="alternate"></link><published>2014-11-14T15:05:00+09:00</published><updated>2016-03-01T00:38:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-11-14:/2014/11/14/google-cloud-platform-google-cloud-endpoints/</id><summary type="html">&lt;p&gt;Google Cloud Endpoints 간략하게&amp;nbsp;확인하기.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;App의 API를 구성하기 쉽도록 제공하는&amp;nbsp;서비스&lt;/li&gt;
&lt;li&gt;Remote Procedure Call(&lt;span class="caps"&gt;RPC&lt;/span&gt;)를 이용하여 작업을 진행할 수 있도록&amp;nbsp;구성.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2가지 방법이 존재&lt;ul&gt;
&lt;li&gt;RPC의 &lt;code&gt;message&lt;/code&gt; 클래스를 이용하는&amp;nbsp;방법.&lt;/li&gt;
&lt;li&gt;RPC를 통하지 않고 직접 작업하는&amp;nbsp;방법. &lt;/li&gt;
&lt;li&gt;사용은 RPC를 통하지 않는 방법이&amp;nbsp;간단하긴하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;예제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-helloendpoints-python"&gt;appengine-endpoints-helloendpoints-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; &lt;code&gt;message&lt;/code&gt; 클래스를 이용하도록&amp;nbsp;되어있음.&lt;/li&gt;
&lt;li&gt;랩핑하는 것에 대한 내용이&amp;nbsp;포함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-angular-todos-python"&gt;appengine-endpoints-angular-todos-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;RPC&lt;/span&gt; &lt;code&gt;message&lt;/code&gt; 클래스를 사용하지&amp;nbsp;않음.&lt;/li&gt;
&lt;li&gt;Angular.js를 이용하도록 예제가 되어있어서 확인해보면&amp;nbsp;될듯함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-tictactoe-python"&gt;appengine-endpoints-tictactoe-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;게임 예제로 보이나 아직 테스트해보지&amp;nbsp;않음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;필요&amp;nbsp;패키지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/endpoints-proto-datastore"&gt;endpoints-proto-datastore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ProtoRPC 를 사용하지 않아도 된다고 함. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;지금은 NDB만 지원. 추후 DB지원은&amp;nbsp;모르겠음.&lt;/li&gt;
&lt;li&gt;DB를 사용하려면 전부 분해하고 설정하는 것이 필요할 것으로&amp;nbsp;보임.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/_ah/spi/.*&lt;/code&gt; URL은 &lt;code&gt;app.yaml&lt;/code&gt; 파일에 하나만&amp;nbsp;가능함.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 API를 사용하고 싶으면 &lt;code&gt;main.py&lt;/code&gt; 에 일반 예제들처럼 API클래스를 생성하고 다음과 같이&amp;nbsp;설정해주면됨.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# app.yaml&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_ah&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;/.*&lt;/span&gt;
  &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;

&lt;span class="c1"&gt;# main.py&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;App1_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;App2_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하나의 API에 여러 클래스를 두고 싶다면 아래의 방법으로&amp;nbsp;구성&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# API를 종류별로 나눔 &lt;/span&gt;
&lt;span class="n"&gt;test_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test1_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# API를 처리할 Class구성&lt;/span&gt;
&lt;span class="nd"&gt;@test_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bye&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1.api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api_1"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;등록확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;project-id.appspot.com/_ah/api/explorer&lt;/code&gt; 로 접근하여&amp;nbsp;확인.&lt;/li&gt;
&lt;li&gt;업로드되어 표시되는 시간이 오래걸리니(최소 5분은 걸리는듯.) 올라갔는지 확인을 하려면 Google Developers Console에서 로그로&amp;nbsp;확인하면된다.&lt;/li&gt;
&lt;li&gt;올라갔다면 아래와 같이 표시된다.&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://1-dot-project-id.appspot.com/_ah/api/test@v1.0 Saved
https://1-dot-project-id.appspot.com/_ah/api/test1@v1.0 Saved
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;http://endpoints-proto-datastore.appspot.com/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="google"></category><category term="cloud"></category><category term="gcp"></category><category term="google cloud platform"></category><category term="google cloud endpoint"></category></entry><entry><title>[Google App Engine] NDB - Properties</title><link href="https://ujuc.github.io/2014/11/10/google-app-engine-ndb-properties/" rel="alternate"></link><published>2014-11-10T18:05:00+09:00</published><updated>2016-03-03T21:47:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-11-10:/2014/11/10/google-app-engine-ndb-properties/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;NDB&lt;/span&gt; 문서를 번역해놓은&amp;nbsp;것.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;관련해서 한글로되 문서가 없어서 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties"&gt;2014/10/27일자 문서&lt;/a&gt;를 가지고서&amp;nbsp;정리하였다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;소개&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt;에서 사용할 수 있는 데이터 모델을 말한다. 모델 타입으로 생각하면 쉽겠다. 어려울 것도&amp;nbsp;없다만.&lt;/p&gt;
&lt;h2 id="type"&gt;Type&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property type&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;IntegerProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;64-bit signed 정수 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;FloatProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Double-precision 부동 소수점 숫자 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BooleanProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Boolean 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;StringProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유니코드 스트링 값, 500자까지 가능, 인덱스 가능&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TextProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유니코드 스트링 값, 길이 제한 없음, 인덱스 기능 없음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BlobProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;해석되지 않은 (Uninterpreted) 바이트 스트링, &lt;code&gt;indexed=True&lt;/code&gt;로 설정하게되면 500자로 제한, 인덱스 가능. &lt;br&gt;하지만 &lt;code&gt;False&lt;/code&gt;(기본 값)으로 설정하게 되면, 길이 제한 없으며, 인덱스 기능 없음. (추가 속성으로 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;를 사용할 수 있음)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DateTimeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;날짜와 시간 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Properties&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;DateProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;날짜 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Properties&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TimeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;시간 (자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#Date_and_Time"&gt;Date and Time Propertyes&lt;/a&gt;에서 확인)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GeoPtProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;지리적 정보데이터를 입력 받음. &lt;code&gt;ndb.GeoPt&lt;/code&gt;객체인데, &lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;lon&lt;/code&gt; 값(둘다 부동소수점으로 표기)을 가지고서 작업을 진행.&lt;br&gt;예, &lt;code&gt;ndb.GeoPt(52.37, 4.88)&lt;/code&gt; or &lt;code&gt;ndb.GeoPt("52.37", "4.88")&lt;/code&gt;형식.&lt;br&gt;(&lt;a href="https://cloud.google.com/appengine/docs/python/datastore/typesandpropertyclasses#GeoP"&gt;&lt;code&gt;db.GeoPt&lt;/code&gt;&lt;/a&gt;와 동일한 객체.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KeyProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Datastore key 값&lt;br&gt;선택 키워드로 kind=&lt;em&gt;kind&lt;/em&gt; 형식으로 나오며, 할당된 키는 항상 kind를 지정해야함.&lt;br&gt;문자열이거나, 모델 클레스가 될수도 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BlobKeyProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Blobstore&lt;/code&gt; 키 값&lt;br&gt;이전 &lt;span class="caps"&gt;DB&lt;/span&gt; API의 &lt;code&gt;BlobReferenceProperty&lt;/code&gt;에 해당.&lt;br&gt;&lt;code&gt;BlobInfo&lt;/code&gt;대신 &lt;code&gt;BlobKey&lt;/code&gt;로 속성 값을 사용. &lt;code&gt;BlobInfo(blobkey)&lt;/code&gt;를 사용하여 &lt;code&gt;BlobInfo&lt;/code&gt;를 구성할 수 있긴함.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;UserProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;유저 객체.&lt;br&gt;Google의 사용자 로그인으로 관련된 내용을 저장하여 사용할때 쓴다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;StructuredProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;하나의 kind 내부에 다른 모델을 추가하는 것.&lt;br&gt;&lt;code&gt;C&lt;/code&gt;의 구조체와 비슷하다고 생각하자.&lt;br&gt;여러번 중복이 가능하고 값을 불러오게되면 JSON방식으로 불러오는 것이 편하다.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#structured"&gt;Structured Properties&lt;/a&gt;에서 확인&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;LocalStructuredProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;StructuredProperty&lt;/code&gt;와 비슷하게 사용할 수 있으나, 인덱싱이 안된다. 자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#structured"&gt;Structured Properties&lt;/a&gt;에서 확인.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;JsonProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 객체(리스트, 딕셔너리, 스트링) 값을 파이썬 &lt;code&gt;json&lt;/code&gt;모듈을 이용하여 직열화함.&lt;br&gt;Datastore에서는 blob로 json 직렬화하여 저장.&lt;br&gt;인덱스 안됨.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PickleProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 객체(리스트, 딕셔너리, 스트링) 값을 파이썬 pickle 프로토콜을 이용하여 직열화함.&lt;br&gt;Datastore에서는 blob로 pickle 직렬화하여 저장.&lt;br&gt;인덱스 안됨.&lt;br&gt;추가 속성: &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#compressed"&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;GenericProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;기본 값.&lt;br&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/ndb/entities#expando"&gt;Expando&lt;/a&gt;클래스에서 주로 사용되지만, 명시적으로 사용하기도함.&lt;br&gt;어떤 형식으로도 가능. (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;Key&lt;/code&gt;, &lt;code&gt;BlobKey&lt;/code&gt;, &lt;code&gt;GeoPt&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ComputeProperty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;사용자가 정의한 함수에서 계산 값들을 처리하여 저장.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#computed"&gt;Computed Properties&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compressed&lt;/code&gt; 옵션: &lt;code&gt;True&lt;/code&gt;로 설정시, gzip으로 압축하여 디스크에 저장함. 이때 &lt;span class="caps"&gt;CPU&lt;/span&gt; 인/디코딩하는데 IO를 사용을&amp;nbsp;함. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="property-options"&gt;Property&amp;nbsp;Options&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;indexed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;사용하는 것만 &lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;로 설정시 쿼리는 불가능해지나 쓰기 속도가 높아짐.&lt;br&gt;다 사용가능한건 아님.&lt;br&gt;인덱스 안하는게 인덱스하는 것보다 write 코스트가 적음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repeated&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;파이썬 리스트 형식으로 값으로 표현.&lt;br&gt;중복이 필요한 작업에 사용.&lt;br&gt;&lt;a href="https://cloud.google.com/appengine/docs/python/ndb/properties#repeated"&gt;Repeated Properties&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;required&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;꼭 필요한 값으로 표기.&lt;br&gt;&lt;code&gt;repeated=True&lt;/code&gt;와 같이 사용하지 못하며, &lt;code&gt;default=True&lt;/code&gt;와는 같이 사용할 수 있음.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Property 기본 유형&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;아무것도 지정하지 않을경우, 기본으로 들어감.&lt;br&gt;&lt;code&gt;repeated=True&lt;/code&gt;와 같이 사용하지 못하며, &lt;code&gt;required=True&lt;/code&gt;와 같이 사용할 수 있음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;choices&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;기본 유형의 값 목록&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;값을 선택할 수 있는 목록&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;validator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;함수&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;값을 함수에 맞게 검증하고 그것으로 입력하도록 설정합니다.&lt;br&gt;자세한 내용은 &lt;a href="https://cloud.google.com/appengine/docs/python/ndb/subclassprop"&gt;Writing Property Subclasses&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;verbose_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;문자열&lt;/td&gt;
&lt;td&gt;&lt;code&gt;None&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Jinja2와 같은 웹프레임 워크에서 사용되는 &lt;span class="caps"&gt;HTML&lt;/span&gt; label을 나타냄&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;이후 내용은 그냥 홈피보자.&lt;ul&gt;
&lt;li&gt;딱히 적을 내용도&amp;nbsp;없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="google"></category><category term="cloud"></category><category term="gcp"></category><category term="google cloud platform"></category><category term="ndb"></category></entry><entry><title>Uubntu에서 Nabi 툴바를 tray에 넣기</title><link href="https://ujuc.github.io/2014/11/09/nabi-toolbar-in-tray-on-ubuntu/" rel="alternate"></link><published>2014-11-09T00:44:00+09:00</published><updated>2015-04-12T14:12:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-11-09:/2014/11/09/nabi-toolbar-in-tray-on-ubuntu/</id><summary type="html">&lt;p class="first last"&gt;Ubuntu에서 nabi를 입력기로 사용한다. 그런데 언제부터인가. tray로
들어가지 않는 문제가 발생했다. 거의 업데이트가 안되고 있어서
그런것같기도 하지만, 그것에 대한&amp;nbsp;내용이다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;오랜만에 Ubuntu를 설치하고 &lt;tt class="docutils literal"&gt;ibus&lt;/tt&gt; 가 조금 불편할뻔하다가&amp;#8230;
쓰던거 쓰자해서 &lt;tt class="docutils literal"&gt;nabi&lt;/tt&gt; 를 설치했는데.. 이놈의 tray에 들어갈려고 하지&amp;nbsp;않는다.&lt;/p&gt;
&lt;p&gt;그래서 조금 검색을 했더니&amp;#8230;
&lt;tt class="docutils literal"&gt;gsettings get com.canonical.Unity.Panel &lt;span class="pre"&gt;systray-whitelist&lt;/span&gt;&lt;/tt&gt; 라는 걸로 추가를
해줘야한다고 하는데&amp;#8230; 이넘은 14.10에는 없다. 조금더 찾아보니, 13.04부터는 아예&amp;nbsp;빠져있었다.&lt;/p&gt;
&lt;p&gt;다시 검색어를 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;systray-whitelist&lt;/span&gt;&lt;/tt&gt; 로 검색중 &lt;strong&gt;Web &lt;span class="caps"&gt;UPD8&lt;/span&gt;&lt;/strong&gt; 에 올라온 글을&amp;nbsp;확인.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.webupd8.org/2013/05/how-to-get-systray-whitelist-back-in.html"&gt;How to whitelist systray apps in ubuntu 14.04 or&amp;nbsp;14.10(W/unity)&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;나같은 경우에는  14.10을&amp;nbsp;설치했으니.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-add-repository ppa:guran/systray-utopic
sudo apt-get update&lt;span class="p"&gt;;&lt;/span&gt; sudo apt-get upgrade
&lt;/pre&gt;
&lt;p&gt;그리고 &lt;tt class="docutils literal"&gt;Alt + F2&lt;/tt&gt; 를 눌러 &lt;tt class="docutils literal"&gt;unity&lt;/tt&gt; 를 찾아 클릭해주면 알아서 unity가 재시작되면서
nabi가 트레이에 들어가게&amp;nbsp;된다.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;덧. 아래에보면 관련 ppa를 삭제하는 방법이 나오는데 따로 패키지를 설치할
필요없이 아래의 명령어로 삭제가&amp;nbsp;가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
sudo apt-add-repository -r ppa:guran/systray-utopic
sudo apt-get update&lt;span class="p"&gt;;&lt;/span&gt; sudo apt-get autoremove
&lt;/pre&gt;
</content><category term="linux"></category><category term="ubuntu"></category><category term="nabi"></category><category term="setting"></category></entry><entry><title>[Python] Paramiko</title><link href="https://ujuc.github.io/2014/04/07/python-paramiko/" rel="alternate"></link><published>2014-04-07T01:56:00+09:00</published><updated>2016-03-03T22:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-04-07:/2014/04/07/python-paramiko/</id><summary type="html">&lt;p&gt;Python ssh 모듈인 paramiko에 대한 내용을&amp;nbsp;작성함.&lt;/p&gt;</summary><content type="html">&lt;p&gt;한글로된 글이 없어서 우선 내가 알아낸 곳과 사용한 곳까지 작성을&amp;nbsp;해둘려고한다.&lt;/p&gt;
&lt;h1 id="paramiko"&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.6+, 3.3+에서 사용할 수 있는 SSHv2&amp;nbsp;구현체이다.&lt;/li&gt;
&lt;li&gt;물론 Client, Server를 둘다 사용이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;저 레벨 암호화를 위해서 &lt;a href="http://pycrypto.org/"&gt;PyCrypro&lt;/a&gt;(이부분은 Python C 확장으로 구현)를 제외한 나머지 부분들은 전부 Python으로만&amp;nbsp;구현되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;h3 id="1"&gt;1. 사용&amp;nbsp;예제&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="2-host-keys"&gt;2. Host&amp;nbsp;Keys&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;첫 접근시 받아오는 Host Keys가 있다. 이것을 받아서 저장하던 날려먹던 상관은 하지 않지만 있어야지 접근이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;처음 &lt;code&gt;ssh&lt;/code&gt;로 접근시 무의식적으로 &lt;code&gt;yes&lt;/code&gt;를 누르는&amp;nbsp;그것!!&lt;/li&gt;
&lt;li&gt;그러다보니 여기서도 그것에 관련된 내용을 사용할 수&amp;nbsp;있다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_missing_host_key_policy(policy)&lt;/code&gt;를 이용하여 host keys를 받아 저장할 것인지 아닌지를 판단하게 되는데. 기본값은 &lt;code&gt;RejectPolicy&lt;/code&gt;로 되어있으며, &lt;code&gt;yes&lt;/code&gt;를 받아와야한다면 &lt;code&gt;AutoAddPolicy&lt;/code&gt;를 사용하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_missing_host_key_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoAddPolicy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;물론 Public key를 이용해서 비밀번호 없이 접근이 가능하도록 할 수 있을듯 한데 그건 좀 확인이&amp;nbsp;필요할듯.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3"&gt;3.&amp;nbsp;실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실행 명령어 &lt;code&gt;exec_command&lt;/code&gt;를 실행하게되면, 값을 3개를 &lt;code&gt;tuple&lt;/code&gt;로&amp;nbsp;받아온다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;이다.&lt;br&gt;
*명령어에 대한 값들을 받아와 확인할때는 아래와 같이 작성을&amp;nbsp;하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;만약 &lt;code&gt;sudo&lt;/code&gt;명령어가 필요한&amp;nbsp;경우,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;위와 같이하여 작성을 하도록&amp;nbsp;한다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;code&gt;write&lt;/code&gt;다음에는 &lt;code&gt;flush&lt;/code&gt;를 꼭 해줘야 작동을 하니 그점은 주의하도록 한다. 관련 내용은 &lt;a href="http://docs.paramiko.org/en/latest/api/file.html#paramiko.file.BufferedFile.write"&gt;여기&lt;/a&gt;에&amp;nbsp;있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4"&gt;4. 연결&amp;nbsp;끊기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;작업이 끝났으면 연결을&amp;nbsp;끊어야된다.&lt;/li&gt;
&lt;li&gt;그냥 &lt;code&gt;close()&lt;/code&gt;를 불러오면 알아서&amp;nbsp;끊어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-sftp"&gt;5. &lt;span class="caps"&gt;SFTP&lt;/span&gt;&amp;nbsp;사용.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어찌보면 &lt;code&gt;ssh&lt;/code&gt;를 사용하면서 편했던 것이 &lt;code&gt;sftp&lt;/code&gt;의 사용이다. 간단한 사용방법과 &lt;code&gt;ssh&lt;/code&gt;가 설치가되어있으면 따로 &lt;code&gt;ftp&lt;/code&gt;를 생성하지 않더라도 간단한 파일을 주고 받을 수 있도록 되어있기&amp;nbsp;때문이다.&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;ssh&lt;/code&gt;로 접속한 다음, &lt;code&gt;open_sftp()&lt;/code&gt;후 파일을 가져올때는 &lt;code&gt;get('localfile.py', 'remotefile.py')&lt;/code&gt;를 이용하고, 올려둘때는 &lt;code&gt;put('localfile.py', 'remotefile.py')&lt;/code&gt;를&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;참고&amp;nbsp;자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko&amp;nbsp;Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.paramiko.org/en/latest/index.html"&gt;Docs&amp;nbsp;paramiko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jessenoller.com/blog/2009/02/05/ssh-programming-with-paramiko-completely-different"&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt; Programming With Paramiko | Completely&amp;nbsp;Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segfault.in/2010/03/paramiko-ssh-and-sftp-with-python/"&gt;Paramiko: &lt;span class="caps"&gt;SSH&lt;/span&gt; and &lt;span class="caps"&gt;SFTP&lt;/span&gt; With&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="paramiko"></category><category term="ssh"></category><category term="lib"></category></entry><entry><title>[Monitoring] SkwiSSH 설치 및 구성</title><link href="https://ujuc.github.io/2014/02/28/skwissh-install-n-config/" rel="alternate"></link><published>2014-02-28T21:46:00+09:00</published><updated>2016-03-03T22:08:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-02-28:/2014/02/28/skwissh-install-n-config/</id><summary type="html">&lt;p&gt;Django App으로 ssh를 이용하여 서버 모니터링이 가능하다. 개발이 멈춘지 너무&amp;nbsp;오래됐다.&lt;/p&gt;</summary><content type="html">&lt;h1 id="skwissh"&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;SkwiSSH&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;오늘 Facebook에 공유가된 Monitoring Tool. Django에서 App으로 돌릴 수 있고, 참 깔ㄹ끔하기에 회사에서 서버 볼 때 사용할까하여&amp;nbsp;구성해봤다.&lt;/p&gt;
&lt;p&gt;코드로는 Django v1.5와  v1.5.1을 지원한다고 작성해놨는데 &lt;code&gt;setup.py&lt;/code&gt;를 사용하여 구성하게 되면 Django v1.6을 설치하라며 에러문구가&amp;nbsp;발생한다.&lt;/p&gt;
&lt;p&gt;그리고 외부 서버를 추가하기 위해서 &lt;code&gt;server_ip:22&lt;/code&gt;를 입력해줘야지 외부 서버에 ssh로 접근하여 값들을 읽어오게&amp;nbsp;된다.&lt;/p&gt;
&lt;p&gt;아직은 부족한 점이&amp;nbsp;많다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sensor(명령어를 날려서 값을 받아오는 worker를 의미한다.) 추가하고 변경하려면 변경사항이 적용이 안되는&amp;nbsp;현상.&lt;/li&gt;
&lt;li&gt;Sensor들의 정렬을 임의로 할 수 없다는 것. (오름차순으로&amp;nbsp;구성되어있다.)&lt;/li&gt;
&lt;li&gt;기본 명령어 날리는게 1분간격으로 수정할만한 탭이&amp;nbsp;안보인다.&lt;/li&gt;
&lt;li&gt;기본 DB로 SQLite3 파일을 사용하는데 점점 커지는 모습을 확인 할 수&amp;nbsp;있다.&lt;/li&gt;
&lt;li&gt;bash를 사용할 줄 안다면 정말 쉽게 사용이 가능하다.&lt;ul&gt;
&lt;li&gt;명령을 SSH로 날리기에 그쪽 서버 콘솔로 리턴값을 넘길 수 있는 프로그램이라면 어떻게든&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 글에서는 Sensor에 명령어와 파셔 세팅은 작성하지&amp;nbsp;않았다.&lt;/p&gt;
&lt;h2 id="_1"&gt;기본&amp;nbsp;구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt;: Ubuntu 12.04.4&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;Install&amp;nbsp;Package&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="_2"&gt;패키지&amp;nbsp;설치&lt;/h3&gt;
&lt;h4 id="django"&gt;Django&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip isntall Django
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="django-skwissh"&gt;Django-skwissh&amp;nbsp;설치&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install buid-essential python-dev
$ git clone https://github.com/rsaikali/django-skwissh.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; django-skwissh
$ sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="django_1"&gt;Django&amp;nbsp;설정&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin.py startproject mysite
$ &lt;span class="nb"&gt;cd&lt;/span&gt; mysite
$ vi mysql/settings.py

&lt;span class="nv"&gt;INSTALL_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;kronos&amp;#39;&lt;/span&gt;,
    &lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;

$ vi mysite/urls.py

&lt;span class="c1"&gt;# Skwissh&lt;/span&gt;
url&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh&amp;#39;&lt;/span&gt;, include&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skwissh.urls&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;,
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;데이터 베이스&amp;nbsp;설정&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.p syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Skwissh 테스트&amp;nbsp;설치&lt;/li&gt;
&lt;li&gt;이작업을 하면 crontab에 테스크가&amp;nbsp;등록된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py installtask
&lt;span class="c1"&gt;# crontab에 등록되었는지 확인&lt;/span&gt;
$ crontab -l
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Django 서버&amp;nbsp;작동&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python mange.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;참고&amp;nbsp;페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rsaikali/django-skwissh"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rsaikali.github.io/django-skwissh/"&gt;Gitpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="monitoring"></category><category term="ssh"></category><category term="django"></category></entry><entry><title>pylint</title><link href="https://ujuc.github.io/2014/02/23/pylint/" rel="alternate"></link><published>2014-02-23T11:14:35+09:00</published><updated>2018-03-11T11:14:35+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-02-23:/2014/02/23/pylint/</id><summary type="html">&lt;p&gt;PyLint 간략 사용법에 대해서&amp;nbsp;작성한다.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pylint.org"&gt;pylint&amp;nbsp;홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;설치&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pylint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_2"&gt;사용&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pylint&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;pylint&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;gui&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;GUI를 사용하게 되면 쉽게 확인이&amp;nbsp;가능하다.&lt;/li&gt;
&lt;li&gt;콘솔에서 표기되는 내용들을 탭별로&amp;nbsp;보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;좋은점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IDE를 사용해서 코드를 작성하면 Python PEP8에 작성된 내용과 비슷하게는 되는데 못잡아주는 것도 있어서 이걸&amp;nbsp;사용하면된다.&lt;/li&gt;
&lt;li&gt;모듈 이름도&amp;nbsp;가이드해주더라.&lt;/li&gt;
&lt;li&gt;함수내에 뭔짓을 이렇게 많이 하고 있느냐도&amp;nbsp;물어봐주고&lt;/li&gt;
&lt;li&gt;코드를 작게 줄일 수 있도로 도와주는 역활도&amp;nbsp;함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;귀찮다&amp;hellip;&lt;/li&gt;
&lt;li&gt;자동화가&amp;nbsp;필요하다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="lint"></category><category term="pylint"></category><category term="code convention"></category></entry><entry><title>Python setup.py unilnstall 방법</title><link href="https://ujuc.github.io/2013/11/22/python_setup.py_unilnstall_bang-beob/" rel="alternate"></link><published>2013-11-22T11:22:23+09:00</published><updated>2018-03-11T11:22:23+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-11-22:/2013/11/22/python_setup.py_unilnstall_bang-beob/</id><summary type="html">&lt;p&gt;setup.py를 이용하여 uninstall 하는 방법에 대해서 간략&amp;nbsp;정리.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1550226/python-setup-py-uninstall"&gt;Python setup.py&amp;nbsp;uninstall&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;삭제하는 방법은 모든걸 지워 버려야된다는&amp;nbsp;것.&lt;/p&gt;
&lt;p&gt;우선 &lt;code&gt;setup.py&lt;/code&gt;로 설치하는 경로를 파일로&amp;nbsp;받는다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python setup.,py install --record files.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그러고 난 뒤 그 내용에 있는 것들을 모두 다 지워주면 되는데. 이때, 폴더 내부만 삭제할뿐 생성된 파일이 삭제되지 않으니 유의해서 삭제할 수 있도록 조정해주면&amp;nbsp;된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat files.txt &lt;span class="p"&gt;|&lt;/span&gt; xargs rm -rf
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="setup.py"></category><category term="setup"></category><category term="tool"></category></entry><entry><title>KVM on ARM project</title><link href="https://ujuc.github.io/2013/10/14/kvm_on_arm_project/" rel="alternate"></link><published>2013-10-14T11:29:17+09:00</published><updated>2018-03-11T11:29:17+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-10-14:/2013/10/14/kvm_on_arm_project/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;ARM&lt;/span&gt; 칩에서 KVM을 사용하는 프로젝트가 있어서&amp;nbsp;정리한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://systems.cs.columbia.edu/projects/kvm-arm/"&gt;Project&amp;nbsp;homepage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;ARM&lt;/span&gt; 프로세스에서 지원하는 Virtualization을 이용하여 KVM을 올리는 프로젝트 Cortex-15A에서 작업한 내용이 있음. &lt;span class="caps"&gt;ARM&lt;/span&gt; Core는&amp;nbsp;ARMv7.&lt;/p&gt;
&lt;p&gt;Virtual Open Systems is an innovative, agile and dynamic start-up company operating in embedded Linux, Android, &lt;span class="caps"&gt;SMP&lt;/span&gt; Virtualization and Cloud Computing.&amp;nbsp;이란다.&lt;/p&gt;
&lt;p&gt;얼마전에 ARMv8에서 KVM을 사용하는 방법도 추가해놨다. (4월에 추가되고 7월에 업데이트&amp;nbsp;됨.)&lt;/p&gt;
&lt;p&gt;삼성 Exynos 5250를 사용하는 Arndale Board에서 KVM을 이용하여 올렸는데 보면 QEMU가 작동하는 것을 볼 수 있다. 그러나 확실히 속도는 빠르다. 몇배속으로 돌린것인지 아니면 내가 봐왔던 ARM이&amp;nbsp;느렸던건지..&lt;/p&gt;
&lt;p&gt;&lt;a href="http://youtu.be/yB8bdA2hjYg"&gt;Youtube&amp;nbsp;동영상&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;덧. 2013.01.11에 작성한 글을 옮기면서 변경사항들이 있어&amp;nbsp;추가함.&lt;/p&gt;</content><category term="arm"></category><category term="kvm"></category><category term="hypervisor"></category></entry><entry><title>PCIutils</title><link href="https://ujuc.github.io/2013/02/21/pciutils/" rel="alternate"></link><published>2013-02-21T12:00:45+09:00</published><updated>2018-03-11T12:00:45+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-02-21:/2013/02/21/pciutils/</id><summary type="html">&lt;p&gt;&lt;code&gt;pciutils&lt;/code&gt; 패키지에 대해서&amp;nbsp;알아본다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://mj.ucw.cz/sw/pciutils/"&gt;홈페이지&lt;/a&gt; 에서 말하는 건 아래의&amp;nbsp;영문내용!&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;span class="caps"&gt;PCI&lt;/span&gt; Utilities are a collection of programs for inspecting and manipulating configuration of &lt;span class="caps"&gt;PCI&lt;/span&gt; devices, all based on a common portable library libpci which offers access to the &lt;span class="caps"&gt;PCI&lt;/span&gt; configuration space on a variety of operating&amp;nbsp;systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PCI&lt;/span&gt; 구성을 위한 것도 이것이 해주고, &lt;span class="caps"&gt;PCI&lt;/span&gt; 관련된 프로그램 모음들도 가지고있는. 그런 페키지 pciuils 여기서 정해주지 않으면 아무리 컴퓨터에 좋은걸 끼웠거나… 이전에 사용하지 않았던 제품을 끼웠다고 해서 리눅스에서 먹어주는 것은&amp;nbsp;아니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pci-ids.ucw.cz/v2.2/pci.ids"&gt;4월 9일자 pci.ids&lt;/a&gt; 를 검색해보면 아마.. 지원하는 부품들 안에 자신이 사용하는 보드나 이름들이 없다면… 우리 리눅스 버전업을&amp;nbsp;그만두자.ㅡ.ㅡ…&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PCI&lt;/span&gt; 슬롯에서 못읽어들이는데 어쩔수&amp;nbsp;있냐…..&lt;/p&gt;
&lt;p&gt;뭐 따로 받아서 저것을 추가 해준다면야 사용이 가능하겠지만…………&lt;br&gt;
 왠지 외국에서는 해줄 것같은데..&amp;nbsp;우리나라에서는…………&lt;/p&gt;
&lt;p&gt;&lt;em&gt;만약에 추가가 안되어있으면, 내가 추가하면 되겠네?&lt;/em&gt;라는 생각이 문득들어…&lt;br&gt;
찾아봤다. &lt;code&gt;/usr/share/misc/pci.ids&lt;/code&gt; 여기에 있다. 그런데.. 이것만 바꿔주면 되는&amp;nbsp;것일까??&lt;/p&gt;
&lt;p&gt;음.. 또 찾았다.&amp;nbsp;어디냐면..&lt;/p&gt;
&lt;p&gt;pciutils 최신버전을 다운받아서 풀었더니 &lt;code&gt;update_pciids.sh&lt;/code&gt;가 있다.ㅡ.ㅡ&lt;br&gt;
그냥 이걸 실행시켜주면 알아서 설치가&amp;nbsp;될듯한데..&lt;/p&gt;</content><category term="pci"></category><category term="linux"></category></entry><entry><title>Screen 명령어를 통해서 Serial 통신</title><link href="https://ujuc.github.io/2013/01/09/screen_myeong-ryeong-eo-reur_tong-hae-seo_serial_tong-sin/" rel="alternate"></link><published>2013-01-09T11:39:40+09:00</published><updated>2018-03-11T11:39:40+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-01-09:/2013/01/09/screen_myeong-ryeong-eo-reur_tong-hae-seo_serial_tong-sin/</id><summary type="html">&lt;p&gt;screen으로 serial 통신을 하는 프로그램으로&amp;nbsp;사용하자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;발단은 Coolterm이라는 Serial 통신 프로그램에서 Vi의 값을 변경할 수 없는 상황이&amp;nbsp;발생하여…&lt;/p&gt;
&lt;p&gt;여기 저기 찾다가. &lt;code&gt;Screen&lt;/code&gt;을 이용하여 Serial 통신을 할 수 있다는 포스팅을 찾아서 해보니.. 괜찮다.. 복잡하게 설정을 하지 않아도 되는 상황에서는 이것을 이용하는 편이 가장 편할 듯. &lt;code&gt;minicom&lt;/code&gt;도&amp;nbsp;필요없다.&lt;/p&gt;
&lt;p&gt;명령어 사용법 : &lt;code&gt;screen ‘디바이스 위치’ ‘전송속도’&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Mac&lt;/span&gt;
&lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt; &lt;span class="mi"&gt;115200&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Linux&lt;/span&gt;
&lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ttyXXX&lt;/span&gt; &lt;span class="mi"&gt;115200&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;종료할때는 &lt;Crtl&gt;+&lt;A&gt; &amp;lt;Crtl+&amp;lt;&gt;로 종료할 수&amp;nbsp;있다.&lt;/p&gt;</content><category term="screen"></category><category term="serial"></category></entry><entry><title>Eclipse + AVR Plug-in Development Environment Setting</title><link href="https://ujuc.github.io/2012/10/24/eclipse_+_arm_plug-in_development_environment_setting/" rel="alternate"></link><published>2012-10-24T11:34:15+09:00</published><updated>2018-03-11T11:34:15+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2012-10-24:/2012/10/24/eclipse_+_arm_plug-in_development_environment_setting/</id><summary type="html">&lt;p&gt;Eclipse를 이용해서 &lt;span class="caps"&gt;AVR&lt;/span&gt; 코딩할 수 있는 환경&amp;nbsp;만들기.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eclipse로 &lt;span class="caps"&gt;AVR&lt;/span&gt; 프로그램을 코딩할 수 있다는 소리를 듣고서 곧장 검색을 해서 필요한 것들을 깔았었다.&lt;br&gt;
그런데 뭔가 프로젝트에 x표가 나타나서 신경쓰이게 하던것을 한 블로그에서&amp;nbsp;찾았다!!!!&lt;/p&gt;
&lt;p&gt;그래서 이렇게 남긴다.&amp;nbsp;까먹을까봐서..&lt;/p&gt;
&lt;p&gt;&lt;a href="http://avr-eclipse.sourceforge.net/wiki/index.php/The_AVR_Eclipse_Plugin"&gt;공식&amp;nbsp;홈페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스에서는 기본적으로 컴파일러는 gcc를 이용해서 작동을 시키게&amp;nbsp;된다.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;yaourt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;avr&lt;/span&gt; &lt;span class="n"&gt;avr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;libc&lt;/span&gt; &lt;span class="n"&gt;avrdude&lt;/span&gt; &lt;span class="n"&gt;binutils&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;avr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;을 설치해줬다. Arch Linux에서는 이렇게 해주고 더 필요한 패키지들이&amp;nbsp;있으면,&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;yaourt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Ss&lt;/span&gt; &lt;span class="n"&gt;avr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;로 해줘 찾을 수&amp;nbsp;있다.&lt;/p&gt;
&lt;p&gt;Eclipse를 설치 해주는데 이때 Eclipse는 C/C++용으로 설치해준다.&lt;br&gt;
그리고서 프로젝트 만드는&amp;nbsp;것은&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hoyoung2.blogspot.com/2010/07/avr-developement-environment-setting.html"&gt;Don’t panic! WinAVR + Eclipse + &lt;span class="caps"&gt;AVR&lt;/span&gt; Plug-in Developement Environment&amp;nbsp;Setting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;에서 확인하면&amp;nbsp;끝…&lt;/p&gt;</content><category term="avr"></category><category term="eclipse"></category><category term="development environment"></category><category term="environment"></category><category term="arch"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>잘 밤에 쓸데없는 생각하기 - Develop</title><link href="https://ujuc.github.io/" rel="alternate"></link><link href="https://ujuc.github.io/feeds/develop.atom.xml" rel="self"></link><id>https://ujuc.github.io/</id><updated>2023-08-26T00:00:00+09:00</updated><subtitle>Anythink, Everythink!</subtitle><entry><title>Roam Research - Tag CSS 지정</title><link href="https://ujuc.github.io/2022/02/17/roam-research--tag-css-%EC%A7%80%EC%A0%95/" rel="alternate"></link><published>2022-02-17T21:22:11+09:00</published><updated>2022-02-17T21:22:11+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2022-02-17:/2022/02/17/roam-research--tag-css-지정/</id><summary type="html">&lt;p&gt;Roam Research 에서 tag 지정할때 눈에 좀 띄게하고 싶었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;그냥 본론으로 들어가자.&lt;br&gt;
Roam Research에서는 사용자 CSS를 지원한다. 참 간단하게. 이렇게 간단해도 되나 싶은&amp;hellip;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;[[roam/css]]&lt;/code&gt; 페이지를 생성한다.&lt;ul&gt;
&lt;li&gt;앞으로 모든 CSS 파일을 수정하는건 여기서 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/code block&lt;/code&gt;을 선택한다.&lt;/li&gt;
&lt;li&gt;언어 선택을 &lt;code&gt;css&lt;/code&gt;로 변경해준다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[data-tag="{TAG_NAME}"]&lt;/code&gt; CSS를 먹일 태그를 지정해준다.&lt;ul&gt;
&lt;li&gt;앞뒤로 뭔가를 붙일려면 &lt;code&gt;[data-tag={TAG_NAME}"]::before&lt;/code&gt;, &lt;code&gt;[data-tag="{TAG_NAME}"]::after&lt;/code&gt; 를 이용해서 앞뒤에 특정 내용을 붙일 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="_1"&gt;예제&lt;/h3&gt;
&lt;p&gt;&lt;img alt="생각 tag 나가기" src="https://ujuc.github.io/img/2022-02-17-roam_tag.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;생각&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#1A87C0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;생각&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\f090&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FontAwesome&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Develop"></category><category term="roam research"></category><category term="css"></category><category term="note"></category></entry><entry><title>Github dependabot 설정하기</title><link href="https://ujuc.github.io/2020/07/12/github-dependabot-seor-jeong-ha-gi/" rel="alternate"></link><published>2020-07-12T10:46:57+09:00</published><updated>2020-07-12T10:46:57+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-07-12:/2020/07/12/github-dependabot-seor-jeong-ha-gi/</id><summary type="html">&lt;p&gt;Github Dependabot 설정을 해보자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;블로그 확인 중 Github Dependabot을 설정할 수 있는 기능이 있어서 적용.&lt;/p&gt;
&lt;p&gt;블로그는 간단해서 의존성을 관리할 필요가&amp;hellip; 없지만 블로그는 테스트 용이니까&amp;hellip; 이것을 붙여봤다.&lt;br&gt;
자세한 사용법은 링크 타고 설명페이지에서 확인하도록&amp;hellip; 저거까지하기엔 많아&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;설정 파일&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;구성 옵션&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#package-ecosystem"&gt;package-ecosystem&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#drectory"&gt;drectory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#schedule"&gt;Schedule&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#interval"&gt;interval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#day"&gt;day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#timezone"&gt;timezone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#allow"&gt;allow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assignees"&gt;assignees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-message"&gt;commit-message&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#ignore"&gt;ignore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#labels"&gt;labels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#milestone"&gt;milestone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull-request-branch-nameseparator"&gt;pull-request-branch-name.separator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rebase-strategy"&gt;rebase-strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reviewers"&gt;reviewers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#target-branch"&gt;target-branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#versioning-strategy"&gt;versioning-strategy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;설정 파일&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;./.github/dependabo.yml&lt;/code&gt; 으로 설정 파일을 구성한다. Github Actions랑 같은 위치.&lt;br&gt;
그냥 여기다가 다 넣을 작정인듯.&lt;/p&gt;
&lt;h2 id="_2"&gt;구성 옵션&lt;/h2&gt;
&lt;h2 id="package-ecosystem"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#package-ecosystem"&gt;&lt;code&gt;package-ecosystem&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;필수 항목!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;패키지 메니저에 대한 내용을 정의 한다.&lt;/li&gt;
&lt;li&gt;사용 가능한 패키지 메니저&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bundler&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;composer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elm&lt;/code&gt; (??)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitsubmodule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;github-actions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gomode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maven&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mix&lt;/code&gt; (??)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unget&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terraform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ecosystem별로 하나의 리스트로 사용하여 작업한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="drectory"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#directory"&gt;&lt;code&gt;drectory&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;필수 항목&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;패키지 설정파일의 위치를 패키지 메니저마다 지정해줘야된다.&lt;/li&gt;
&lt;li&gt;Github Actions는 &lt;code&gt;/&lt;/code&gt;로 하면 알아서 &lt;code&gt;.github/workflows&lt;/code&gt;에 있는 파일을 가져다가 쓴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="schedule"&gt;&lt;code&gt;Schedule&lt;/code&gt;&lt;/h3&gt;
&lt;h4 id="interval"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleinterval"&gt;&lt;code&gt;interval&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;필수 항목&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;얼마마다 확인할 것인지에 대해서 정의하는 위치.&lt;/li&gt;
&lt;li&gt;항목은 &lt;code&gt;daily&lt;/code&gt;, &lt;code&gt;weekly&lt;/code&gt;, &lt;code&gt;monthly&lt;/code&gt;가 있다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;daily&lt;/code&gt;는 월~금요일에만 실행한다. (주말은 왜 쉬는거지&amp;hellip;?)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;weekly&lt;/code&gt;는 기본은 월요일에만 실행한다. 밑에서 설명할 &lt;code&gt;day&lt;/code&gt; 항목으로 변경 가능.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monthly&lt;/code&gt;는 매달 한번 1일에 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="day"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleday"&gt;&lt;code&gt;day&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주마다 업데이트할 스케출을 적어준다.&lt;/li&gt;
&lt;li&gt;기본값은 &lt;code&gt;monday 05:00 UTC&lt;/code&gt; 이다.&lt;/li&gt;
&lt;li&gt;항목&lt;ul&gt;
&lt;li&gt;&lt;code&gt;monday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuesday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wednesday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;thursday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;friday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saturday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sunday&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="timezone"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#scheduletimezone"&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;UTC가 기본인데 이걸 바꾸고 싶으면 작성한다.&lt;/li&gt;
&lt;li&gt;Timezone은 풀네임 &lt;code&gt;Asia/Seoul&lt;/code&gt;으로 해준다. &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;다른 타임존&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(?) 여기다가 한국시간을 박아두면 &lt;code&gt;13:00 KST&lt;/code&gt;로 도는건가..음..?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="allow"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleinterval"&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 모든 의존성을 확안하여 PR을 넣게 되는데, 업데이트 하고 싶은 의존성만 허용할 수 있는 옵션이다.&lt;/li&gt;
&lt;li&gt;항목&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dependency-name&lt;/code&gt;: 명시한 이름을 가진 패키지만 업데이트 한다. &lt;code&gt;*&lt;/code&gt;를 이용하여 여러개의 패키지를 지정할 수 있다. (정규식의 &lt;code&gt;*&lt;/code&gt; 사용법과 동일)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependency-type&lt;/code&gt;: 음.. 타입....음..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Support ecosystem&lt;/th&gt;
&lt;th&gt;Allow updates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;direct&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;전부&lt;/td&gt;
&lt;td&gt;명시된 모든 의존성&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;indirect&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;하위 의존성까지 전부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;all&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;전부&lt;/td&gt;
&lt;td&gt;명시된 모든 의존성. &lt;code&gt;bundle&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt; 는 하위 의존성까지 전부&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;production&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;mix&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Product&lt;/strong&gt; 환경에서 사용하는 패키지만&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;development&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;mix&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Developmen&lt;/strong&gt; 환경에서 사용하는 패키지만&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id="assignees"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#assignees"&gt;&lt;code&gt;assignees&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github Dependabot의 PR에 대한 담당자 지정.&lt;/li&gt;
&lt;li&gt;음&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="commit-message"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#commit-message"&gt;&lt;code&gt;commit-message&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github Dependabot이 커밋할때 어떤걸 붙일 건지에 대한 설정&lt;/li&gt;
&lt;li&gt;항목&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prefix&lt;/code&gt;: 앞에 붙일 단어&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prefix-development&lt;/code&gt;: 개발 환경용 앞에 붙일 단어&lt;ul&gt;
&lt;li&gt;지원하는데는 당연히 &lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;mix&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include: "scope"&lt;/code&gt;: 업데이트된 의존성 목록을 점두사 뒤에 넣어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;target-branch&lt;/code&gt;를 사용해서 특정 브런치를 지정하지 않으면, 보안 업데이트 PR에도 영향을 끼칠 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ignore"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#ignore"&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dependabot ignore&lt;/code&gt;를 이용해서 &lt;code&gt;ignore&lt;/code&gt; 된게 있는지 확인하라고 하는데&amp;hellip;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@dependabot&lt;/code&gt;은 어디서&amp;hellip; 사용하나&amp;hellip;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;암튼 뭔가를 하기 싫을때 하는거&lt;/li&gt;
&lt;li&gt;항목&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dependency-name&lt;/code&gt;: 의존성 패키지 이름&lt;/li&gt;
&lt;li&gt;&lt;code&gt;versions&lt;/code&gt;: 제외할 버전이나 버전 범위를 지정한다. 패키지 메니저마다 사용하는 패턴을 이용해서 작성하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;target-branch&lt;/code&gt;를 사용해서 특정 브런치를 지정하지 않으면, 보안 업데이트 PR에도 영향을 끼칠 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="labels"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#labels"&gt;&lt;code&gt;labels&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PR시 명시된 &lt;code&gt;label&lt;/code&gt;을 붙여 요청하게 된다.&lt;/li&gt;
&lt;li&gt;기본값은 &lt;code&gt;dependencies&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="milestone"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#milestone"&gt;&lt;code&gt;milestone&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 milestone을 지정하여 해당 항목에 넣을 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;target-branch&lt;/code&gt;를 사용해서 특정 브런치를 지정하지 않으면, 보안 업데이트 PR에도 영향을 끼칠 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pull-request-branch-nameseparator"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#pull-request-branch-nameseparator"&gt;&lt;code&gt;pull-request-branch-name.separator&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PR마다 브런치를 만드는데, 이때 브런치 이름 구분자 명시용&lt;/li&gt;
&lt;li&gt;기본은 &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rebase-strategy"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#rebase-strategy"&gt;&lt;code&gt;rebase-strategy&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브런치 충돌났을때, 자동으로 PR을 리베이스하는데 이걸 끄고 싶을때 설정하면됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disabled&lt;/code&gt;: 충돌 해결은 사용자가.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;: 기본값&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="reviewers"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#reviewers"&gt;&lt;code&gt;reviewers&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PR시 리뷰를 요청할 사람 지정. 팀도 가능함.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;target-branch&lt;/code&gt;를 사용해서 특정 브런치를 지정하지 않으면, 보안 업데이트 PR에도 영향을 끼칠 수 있음.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="target-branch"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#target-branch"&gt;&lt;code&gt;target-branch&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본으로 확인하는 브런치는 레포에 설정된 기본 브런치로 진행한다.&lt;/li&gt;
&lt;li&gt;이걸 사용하면 명시된 브런치에서 의존성을 검사한다.&lt;/li&gt;
&lt;li&gt;보안 PR에 영향갈 수 있단다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="versioning-strategy"&gt;&lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates#versioning-strategy"&gt;&lt;code&gt;versioning-strategy&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Github Dependabot에서 의존성 업데이트를 진행하면서 명시하는 방법은 두가지 방법이 있다.&lt;ul&gt;
&lt;li&gt;App: 요구 버전이 업데이트 (&lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Library: 버전 범위 업데이트 (&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이 사항을 변경하기 위해서 사용.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;target-branch&lt;/code&gt;를 사용해서 특정 브런치를 지정하지 않으면, 보안 업데이트 PR에도 영향을 끼칠 수 있음.&lt;/li&gt;
&lt;li&gt;사용 가능한 업데이트 옵션&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Support echosystem&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lockfile-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;mix&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lockfile&lt;/code&gt; 업데이트에 대한 것만 PR한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;cargo&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;mix&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;디폴트로 진행한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;widen&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;가능하면 새 버전이랑 이전 버전을 모두 사용할 수 있도록 설정한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;increase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;composer&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;롤링 업데이트!!!!!!!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;increase-if-necessary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bundler&lt;/code&gt;, &lt;code&gt;comopser&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;꼭 필요할때만 업데이트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;참고: &lt;a href="https://docs.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates"&gt;Configuration options for dependency updates&lt;/a&gt;&lt;/p&gt;</content><category term="Develop"></category><category term="github"></category><category term="dependabot"></category><category term="dependencies packages"></category><category term="package manager"></category></entry><entry><title>git switch, restore 훑어보기</title><link href="https://ujuc.github.io/2020/07/04/git-switch-n-restore-hurt-eo-bo-gi/" rel="alternate"></link><published>2020-07-04T08:54:35+09:00</published><updated>2020-07-05T12:21:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-07-04:/2020/07/04/git-switch-n-restore-hurt-eo-bo-gi/</id><summary type="html">&lt;p&gt;git 2.23.0 이상에서 추가된 명령어인 switch, restore에 대해서 정리한다.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;들어가자&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-switch"&gt;git switch&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;옵션별 설명&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#start-point"&gt;&amp;lt;start-point&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-c-create-new-branch"&gt;(-c|--create) &amp;lt;new-branch&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-c-force-create-new-branch"&gt;(-C|--force-create) &amp;lt;new-branch&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-d-detach"&gt;(-d|--detach)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-guess-no-guess"&gt;--guess, --no-guess&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-f-force-discard-changes"&gt;(-f|--force), --discard-changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-m-merge"&gt;(-m|--merge)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-conflictstyle"&gt;--conflict=&amp;lt;style&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-q-quiet"&gt;(-q|--quiet)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-progress-no-progress"&gt;--progress, --no-progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-t-track"&gt;(-t|--track)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-no-track"&gt;--no-track&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-orphan-new-branch"&gt;--orphan &amp;lt;new-branch&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-ignore-other-worktrees"&gt;--ignore-other-worktrees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-recurse-submodules-no-recurse-submodules"&gt;--recurse-submodules, --no-recurse-submodules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#git-restore"&gt;git restore&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;개요&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;옵션별 설명&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#-s-tree-sourcetree"&gt;-s &amp;lt;tree&amp;gt;, --source=&amp;lt;tree&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-p-patch"&gt;(-p|--patch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-w-worktree-s-staged"&gt;(-W|--worktree), (-S|--staged)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-q-quiet_1"&gt;(-q|--quiet)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-progress-no-progress_1"&gt;--progress, --no-progress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-ours-theirs"&gt;--ours, --theirs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-m-merge_1"&gt;(-m|--merge)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-conflictstyle_1"&gt;--conflict=&amp;lt;style&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-ignore-unmerged"&gt;--ignore-unmerged&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-ignore-skip-worktree-bits"&gt;--ignore-skip-worktree-bits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-recurse-submodules-no-recurse-submodules_1"&gt;--recurse-submodules, --no-recurse-submodules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-overlay-no-overlay"&gt;--overlay, --no-overlay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-pathspec-from-filefile"&gt;--pathspec-from-file=&amp;lt;file&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-pathspec-file-nul"&gt;--pathspec-file-nul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-"&gt;--&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pathspec"&gt;&amp;lt;pathspec&amp;gt;...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id="_1"&gt;들어가자&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Note: THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git 2.23.0 이후로 &lt;code&gt;switch&lt;/code&gt;와 &lt;code&gt;restore&lt;/code&gt; 실험 명령어가 추가 되었다. 그래서 &lt;code&gt;switch&lt;/code&gt; 명령을 사용하고는 있지만, 어떻게 써야되는지에 대해서 고민을 해보지 않았던것&amp;hellip;&lt;/p&gt;
&lt;p&gt;요즘에는 &lt;a href="/2020/02/02/git_commit_message_template_man-deur-gi"&gt;git commit message template&lt;/a&gt;를 만들어두고 쓰고 있기에 git cli를 많이 쓰게 되었다. git template을 보여주는건 git 명령을 통해서 실행되는 vim, VSCode가 아니면 보여주지도 않더라. 그러다보니 힘들게 사용중이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="git-switch"&gt;&lt;code&gt;git switch&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;특정 branch로 변경(switching)한다.&lt;/li&gt;
&lt;li&gt;딴 의미 없다. 말그대로 switching 한다는 것.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch&lt;/code&gt; 명령이나 &lt;code&gt;checkout&lt;/code&gt; 명령을 이용해서 작업하던 것 중 branch를 관리하는 것에 대한 내용을&lt;br&gt;
 하나의 명령으로 따로 빼서 구성하도록 변경되었다.&lt;/li&gt;
&lt;li&gt;참고: &lt;a href="https://git-scm.com/docs/git-switch"&gt;git-scm: git-switch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;개요&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git switch [&amp;lt;option&amp;gt;] [--no-guess] &amp;lt;branch&amp;gt;
git switch [&amp;lt;option&amp;gt;] --detach [&amp;lt;start-point&amp;gt;]
git switch [&amp;lt;option&amp;gt;] (-c|-C) &amp;lt;new-brach&amp;gt; [&amp;lt;start-point&amp;gt;]
git switch [&amp;lt;option&amp;gt;] --orphan &amp;lt;new-branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="_3"&gt;옵션별 설명&lt;/h2&gt;
&lt;h3 id="start-point"&gt;&lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Branch를 딸 특정위치를 나타낸다.&lt;/li&gt;
&lt;li&gt;기본은 &lt;code&gt;HEAD&lt;/code&gt;니 딱히 고민할 이유는 없을듯.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-c-create-new-branch"&gt;&lt;code&gt;(-c|--create) &amp;lt;new-branch&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 branch를 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt;에서 생성을 한다.&lt;/li&gt;
&lt;li&gt;같은 명령어: &lt;code&gt;git branch &amp;lt;new-branch&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-c-force-create-new-branch"&gt;&lt;code&gt;(-C|--force-create) &amp;lt;new-branch&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;있어도 그냥 새롭게 만든다.&lt;/li&gt;
&lt;li&gt;같은 명령어: &lt;code&gt;git branch -f &amp;lt;new-branch&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-d-detach"&gt;&lt;code&gt;(-d|--detach)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;뭘 빼버린다는걸까?&lt;/li&gt;
&lt;li&gt;쓸일 없을꺼같으니 같은데&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout --detach [&amp;lt;branch&amp;gt;]&lt;/code&gt;&lt;a href="https://git-scm.com/docs/git-checkout#Documentation/git-checkout.txt-emgitcheckoutem--detachltbranchgt"&gt;[1]&lt;/a&gt;를 보도록 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-guess-no-guess"&gt;&lt;code&gt;--guess&lt;/code&gt;, &lt;code&gt;--no-guess&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;원격 레포에 동일한 이름이 있는 경우, 원걱 branch에서 해당 branch로 매칭한다.&lt;/li&gt;
&lt;li&gt;기본 값은 &lt;code&gt;--guess&lt;/code&gt;, 아마 쓸때는 &lt;code&gt;--no-guess&lt;/code&gt;를 이용할듯.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-f-force-discard-changes"&gt;&lt;code&gt;(-f|--force)&lt;/code&gt;, &lt;code&gt;--discard-changes&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;자세한 설명은 생략한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-m-merge"&gt;&lt;code&gt;(-m|--merge)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이 옵션을 사용하면 변화분이 있더라도 three-way 머지를 진행하고 branch를 딴다.&lt;/li&gt;
&lt;li&gt;충돌나는 부분이 존재하면 해당 내용은 &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt;을 이용해서 해당 내용을 정리한뒤 진행하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-conflictstyle"&gt;&lt;code&gt;--conflict=&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;충돌이 발생했을때 어떤 방법으로 진행할지에 대해서 정의한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-q-quiet"&gt;&lt;code&gt;(-q|--quiet)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;출력끔&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-progress-no-progress"&gt;&lt;code&gt;--progress&lt;/code&gt;, &lt;code&gt;--no-progress&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;터미널이 연결되던 말던 stderr 메시지를 전달한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-progress&lt;/code&gt;는 &lt;code&gt;-q&lt;/code&gt;와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-t-track"&gt;&lt;code&gt;(-t|--track)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;원격 branch에서 새로운 branch를 딴다.&lt;/li&gt;
&lt;li&gt;이때는 &lt;code&gt;origin&lt;/code&gt;, &lt;code&gt;remote/origin&lt;/code&gt;, &lt;code&gt;refs/remote/origin&lt;/code&gt;와 같이 &lt;code&gt;/&lt;/code&gt;를 추가하여 만들어주면 새로운 브런치를 딸 수 있다.&lt;/li&gt;
&lt;li&gt;원격에서 새롭게 따는게 아니라면 &lt;code&gt;-c&lt;/code&gt; 옵션을 같이 사용해야된다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --tracker&lt;/code&gt;&lt;a href="https://git-scm.com/docs/git-branch#Documentation/git-branch.txt--t"&gt;[2]&lt;/a&gt; 에 자세히 적혀있단다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-no-track"&gt;&lt;code&gt;--no-track&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;upstream&amp;rdquo; 구성을 하지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch.autoSetupMerge&lt;/code&gt; 옵션을 &lt;code&gt;true&lt;/code&gt;로 설정하는 것과 동일한 효과.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-orphan-new-branch"&gt;&lt;code&gt;--orphan &amp;lt;new-branch&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;새로운 &lt;code&gt;orphan&lt;/code&gt; branch를 생성한다.&lt;/li&gt;
&lt;li&gt;모든 추적하던 파일은 삭제된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-ignore-other-worktrees"&gt;&lt;code&gt;--ignore-other-worktrees&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git switch&lt;/code&gt; 명령은 참조하는 위치가 다른 working tree에서 사용중이면 브런치를 따지 못한다.&lt;/li&gt;
&lt;li&gt;이 옵션으로 연결된 working tree를 계속 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-recurse-submodules-no-recurse-submodules"&gt;&lt;code&gt;--recurse-submodules&lt;/code&gt;, &lt;code&gt;--no-recurse-submodules&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;superproject&lt;/code&gt;에 활성화된 submodule 내용을 업데이트하여 반영한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git submodule&lt;/code&gt; 명령과 같이 서브 모듈 &lt;code&gt;HEAD&lt;/code&gt;를 표기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="git-restore"&gt;&lt;code&gt;git restore&lt;/code&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Working tree 파일을 되돌린다.&lt;/li&gt;
&lt;li&gt;생각보다 옵션이 많다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;개요&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git restore [&amp;lt;option&amp;gt;] [--source=&amp;lt;tree&amp;gt;] [--staged] [--worktree] [--] &amp;lt;pathspec&amp;gt;...
git restore [&amp;lt;option&amp;gt;] [--source=&amp;lt;tree&amp;gt;] [--staged] [--worktree] --pathspec-from-file=&amp;lt;file&amp;gt; [--pathspec-file-nul]
git restore (-p|--patch) [&amp;lt;option&amp;gt;] [--source=&amp;lt;tree&amp;gt;] [--staged] [--worktree] [--] [&amp;lt;pathspec&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="_5"&gt;옵션별 설명&lt;/h2&gt;
&lt;h3 id="-s-tree-sourcetree"&gt;&lt;code&gt;-s &amp;lt;tree&amp;gt;&lt;/code&gt;, &lt;code&gt;--source=&amp;lt;tree&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;입력된 work tree의 내용으로 되돌린다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--staged&lt;/code&gt; 옵션 사용때 지정하지 이 옵션을 지정하지 않으면, &lt;code&gt;HEAD&lt;/code&gt;에서 자동으로 되돌려진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-p-patch"&gt;&lt;code&gt;(-p|--patch)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;대화 모드로 파일 변화 분을 되돌린다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-w-worktree-s-staged"&gt;&lt;code&gt;(-W|--worktree)&lt;/code&gt;, &lt;code&gt;(-S|--staged)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;되돌리는 위치를 지정한다.&lt;/li&gt;
&lt;li&gt;옵션이 아무것도 없으면 work tree로 되돌려지며, &lt;code&gt;--staged&lt;/code&gt;를 지정하면 index만 복원됨.&lt;/li&gt;
&lt;li&gt;옵션을 둘다 사용하면 둘다 되돌려진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-q-quiet_1"&gt;&lt;code&gt;(-q|--quiet)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메시지 끔.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-progress-no-progress_1"&gt;&lt;code&gt;--progress&lt;/code&gt;, &lt;code&gt;--no-progress&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;stderr로 메시지를 출력한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-progress&lt;/code&gt; 옵션은 &lt;code&gt;-q&lt;/code&gt;와 같다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-ours-theirs"&gt;&lt;code&gt;--ours&lt;/code&gt;, &lt;code&gt;--theirs&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;머지가 되지 않은 위치의 2번째(&lt;code&gt;ours&lt;/code&gt;), 3번째(&lt;code&gt;theirs&lt;/code&gt;) 위치의 값으로 되돌림&lt;/li&gt;
&lt;li&gt;뭔말이지&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-m-merge_1"&gt;&lt;code&gt;(-m|--merge)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Working tree에서 인덱스로 되돌릴때, 충돌이 발생하면 해당 내용을 머지 커밋으로 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-conflictstyle_1"&gt;&lt;code&gt;--conflict=&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--merge&lt;/code&gt; 옵션 과 비슷하나 상위 계념이다.&lt;/li&gt;
&lt;li&gt;충돌이 났을대 어떻게 할지에 대해서 정의한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge.conflictStyle&lt;/code&gt; 옵션을 덮어쓴다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge&lt;/code&gt;(기본값), &lt;code&gt;diff3&lt;/code&gt;으로 지정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-ignore-unmerged"&gt;&lt;code&gt;--ignore-unmerged&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;변경 사항이 있어 충돌이 발생했을때, 머지를 진행한다.&lt;/li&gt;
&lt;li&gt;머지되지 않은건 그대로 둔다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-ignore-skip-worktree-bits"&gt;&lt;code&gt;--ignore-skip-worktree-bits&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;희소 체크아웃 모드(sparse checkout mode)에서 기본값은 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt;과 &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt;에서의 희소 패턴(sparse pattern)에 맞는 항목만 업데이트한다.&lt;/li&gt;
&lt;li&gt;하지만 이 옵션을 붙이면 희소 패턴(sparse pattern) 값은 무시하고 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt;에 존재하는 파일을 무조건 되돌리게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-recurse-submodules-no-recurse-submodules_1"&gt;&lt;code&gt;--recurse-submodules&lt;/code&gt;, &lt;code&gt;--no-recurse-submodules&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;superproject&lt;/code&gt;에 저장된 커밋으로 sub module이 되돌려진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-overlay-no-overlay"&gt;&lt;code&gt;--overlay&lt;/code&gt;, &lt;code&gt;--no-overlay&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기본 값은 &lt;code&gt;--no-overlay&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;되돌릴때 수정된 파일을 삭제하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-pathspec-from-filefile"&gt;&lt;code&gt;--pathspec-from-file=&amp;lt;file&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;옵션 내용들을 파일로 입력받는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt;로 입력되면 stdin으로 받은 값을 옵션으로 받아들인다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LF&lt;/code&gt;, &lt;code&gt;CR/LF&lt;/code&gt; 로 항목을 구분한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git-config&lt;/code&gt;&lt;a href="https://git-scm.com/docs/git-config"&gt;[3]&lt;/a&gt;에서 &lt;code&gt;core.quotePath&lt;/code&gt; 항목 값이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-pathspec-file-nul"&gt;&lt;code&gt;--pathspec-file-nul&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NUL&lt;/code&gt; 문자로만 구분을 진행한다.&lt;/li&gt;
&lt;li&gt;이 옵션은 &lt;code&gt;--pathspec-from-file&lt;/code&gt; 옵션과 같이 작동한다. 혼자서는 아무것도 안됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="-"&gt;&lt;code&gt;--&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이후 인수를 옵션으로 읽지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pathspec"&gt;&lt;code&gt;&amp;lt;pathspec&amp;gt;...&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec"&gt;git glossary&lt;/a&gt; 항목으로 대신한다.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="git"></category><category term="command"></category><category term="restore"></category><category term="switch"></category></entry><entry><title>git 기본 editor를 VS Code로 변경하기</title><link href="https://ujuc.github.io/2020/06/11/git-gi-bon-editorreur-vs-codero-byeon-gyeong-ha-gi/" rel="alternate"></link><published>2020-06-11T20:27:58+09:00</published><updated>2020-06-11T20:27:58+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-06-11:/2020/06/11/git-gi-bon-editorreur-vs-codero-byeon-gyeong-ha-gi/</id><summary type="html">&lt;p&gt;Git 커밋을 할때 VIM말고 다른 에디터도 사용할 수 있게 설정하자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;git 처음 설치해서 commit을 하게되면 nano라는 에디터를 만날 수 있다. 이거 잘 쓰는 사람을 본적이 없다.&lt;/p&gt;
&lt;p&gt;나오는 방법을 나도 까먹는데&amp;hellip;;;&lt;/p&gt;
&lt;p&gt;nano가 싫어 vim으로 변경해두길 어언.... 몇년&amp;hellip; 이제 그것도 귀찮아져서 VS Code로 변경하려고 한다.&lt;/p&gt;
&lt;p&gt;명령은 간단하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;core.editor&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;code --wait&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;하게되면 git commit 입력창이 VS code 창으로 뜬다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="git commit 창 vs code" src="https://ujuc.github.io/img/2020-06-11_git-commit-at-vs-code.png"&gt;&lt;/p&gt;
&lt;p&gt;이제 Tower 구독 결제가 되어있는지 한번 확인하고 없에야지..&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;번외&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;difftool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위 명령을 실행하게되면 git diff 를 vimdiff를 이용하여 보여준다.&lt;/p&gt;
&lt;p&gt;이것도 아래 명령으로 변경이 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;diff.tool&lt;span class="w"&gt; &lt;/span&gt;diff-code
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;difftool.diff-code.cmd&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;code --wait --diff $LOCAL $REMOTE&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;tool&lt;/code&gt; 이름이 잘못되면 잘 안나올 수 있으니 편한걸로 바꾸도록 하자.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="_1"&gt;참고&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/docs/editor/versioncontrol#_vs-code-as-git-editor"&gt;VS Code as Git editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="git"></category><category term="git editor"></category><category term="vscode"></category><category term="code"></category></entry><entry><title>Jetbrains IDEA 설정 삭제하기</title><link href="https://ujuc.github.io/2020/03/02/jetbrains-idea-seol-jeong-sak-je-ha-gi/" rel="alternate"></link><published>2020-03-02T22:07:01+09:00</published><updated>2020-03-02T22:07:01+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-03-02:/2020/03/02/jetbrains-idea-seol-jeong-sak-je-ha-gi/</id><summary type="html">&lt;p&gt;JetBrains를 처음 설치한 것처럼 다시 설치해보자&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;Tool box 로 설치한 기본 실행기 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/Library/ApplicationSupport&lt;/code&gt; 에 있는 플러그인 파일 삭제&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/Library/Preferences/com.jetbrains.*&lt;/code&gt; 에 있는 설정 파일 삭제&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;끝.&lt;/p&gt;</content><category term="Develop"></category><category term="jetbrains"></category></entry><entry><title>github actions를 달았다</title><link href="https://ujuc.github.io/2020/03/01/github-actionsreul-dal-ass-da/" rel="alternate"></link><published>2020-03-01T10:07:50+09:00</published><updated>2020-03-01T10:07:50+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-03-01:/2020/03/01/github-actionsreul-dal-ass-da/</id><summary type="html">&lt;p&gt;블로그 퍼플리싱을 자동으로 하기위해 Github Actions 추가!&lt;/p&gt;</summary><content type="html">&lt;p&gt;블로그 페이지 생성을 자동으로 하고 싶었다. 그런데 아무리 해도 안되더라.&lt;br&gt;
포기하고 있었는데.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fastai/fastpages"&gt;fastpages&lt;/a&gt; 라는 Jupyter notebooks을 생성하면 Github 블로그로 출력해주는 서비스를 보고 Github Actions를 이용해서 진행하고 있는 것을 발견!&lt;/p&gt;
&lt;p&gt;그 Actions는 &lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;peaceiris/actions-gh-pages&lt;/a&gt;!!&lt;/p&gt;
&lt;p&gt;아싸 이제 붙여야지&amp;hellip;&lt;/p&gt;
&lt;p&gt;기존에 gh-pages로 퍼블리싱을 진행하고 있었기에 cli 명령어에 &lt;code&gt;build&lt;/code&gt;라는 명령어를 추가하고 작업을 진행하였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github pages&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;develop&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-18.04&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout submodules&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bash&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;auth_header=&amp;quot;$(git config --local --get http.https://github.com/.extraheader)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git submodule sync --recursive&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;git -c &amp;quot;http.extraheader=$auth_header&amp;quot; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3.8&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup poetry&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Gr1N/setup-poetry@v1&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;poetry-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1.0.3&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install python pacakge&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;poetry install&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build posts&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;poetry run cli build&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v3&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;personal_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.PERSONAL_TOKEN }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;publish_branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;master&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;추가하고 테스트 커밋으로 퍼블리싱되는 것을 확인하였다.&lt;/p&gt;
&lt;p&gt;오늘의 삽질은 끝&amp;hellip;&lt;/p&gt;
&lt;p&gt;PS. Poetry 를 사용하기 위한 actions가 여러개 있는데. &lt;a href="https://github.com/marketplace/actions/setup-poetry"&gt;Gr1N/Seup Poetry&lt;/a&gt; 를 사용한 것은 별표 많이 받은 Actions가 너무 느려서 였다.&lt;br&gt;
명령어 많이 쓰지도 않는데 빌드하는데 1분이상 자기가 잡아먹고 있는건 아니지않는가&amp;hellip;&lt;/p&gt;</content><category term="Develop"></category><category term="github actions"></category></entry><entry><title>Git commit message template 만들기</title><link href="https://ujuc.github.io/2020/02/02/git-commit-message-template-man-deul-gi/" rel="alternate"></link><published>2020-02-02T18:41:00+09:00</published><updated>2020-02-02T18:41:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-02-02:/2020/02/02/git-commit-message-template-man-deul-gi/</id><summary type="html">&lt;p&gt;Git commit message 에 변화를 만들고 싶었서 찾아봤다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;뭐때문에 여기까지 왔던건지 모르겠다.&lt;br&gt;
그져 git commit message를 바꿔볼까 라는 생각에서 지금 여기로 온듯.&lt;/p&gt;
&lt;h2 id="_1"&gt;만들어보자!&lt;/h2&gt;
&lt;h3 id="1-git-config"&gt;1. Git config 에 추가&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;.gitconfig&lt;/code&gt; 파일에 &lt;code&gt;commit.template&lt;/code&gt; 항목에 기본 값으로 등록할 내용을 추가해준다.&lt;br&gt;
여기서 나는 &lt;code&gt;~/.gitmessage&lt;/code&gt;라는 것을 전체 프로젝트에서 사용하도록 구성하겠다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global commit.template ~/.gitmessage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;명령을 실행다면 &lt;code&gt;.gitconfig&lt;/code&gt; 파일에 다음과같이 설정이된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[commit]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;~/.gitmessage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="2-commit-message-template"&gt;2. Commit message Template 작성&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;~/.gitmessage&lt;/code&gt; 작성을 하자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;#####&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#################&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;


&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Message&lt;/span&gt;
&lt;span class="err"&gt;########&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;#######################################&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Issue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Tracker&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Number&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;COMMIT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;END&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;feat&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;feature&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;fix&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bug&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fix&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;refactor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;refactoring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;formatting&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;missing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;semi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;colons&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;changes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;documentation&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;adding&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;refactoring&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tests&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;productin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;chore&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;updating&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tasks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;etc&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="nx"&gt;no&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;change&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;------------------&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Remember&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Capitalize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;제목줄은&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;대문자로&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;시작한다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;imperative&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;mood&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;제목줄은&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;명령어로&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;작성한다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;period&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;제목줄은&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;마침표로&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;끝내지&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;않는다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Separate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;blank&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;line&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;본문과&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;제목에는&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;빈줄을&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;넣어서&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;구분한다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;explain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;what&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;why&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;vs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;how&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;본문에는&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;어떻게&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;보다는&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;왜&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;와&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;무엇을&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;설명한다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;Can&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;multiple&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;points&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nx"&gt;본문에&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;목록을&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;나타낼때는&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;span class="nx"&gt;로&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;시작한다&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;제목은 50자 이하로&amp;hellip;&lt;/li&gt;
&lt;li&gt;본문은 72자 이하로&amp;hellip;&lt;/li&gt;
&lt;li&gt;이슈는 남겨주는게 좋아서 트래커를 입력할 수 있도록&amp;hellip;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;#&lt;/code&gt; 으로 시작하는 줄은 삭제된다. 그리니 알아서 잘 띄우두도록하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;레포마다 다르게 설정하기&lt;/h2&gt;
&lt;p&gt;다음 명령을 레포에서 입력한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config commit.template ./path/to/.gitmessage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code&gt;.git/gitmessage&lt;/code&gt;에 template을 작성해준다.&lt;/p&gt;
&lt;h2 id="_3"&gt;참고 사이트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration"&gt;Git Manual - Customizing Git - Git Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@alex.wasik/create-a-custom-git-commit-template-84468232a459"&gt;Create A Custom Git Commit Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thoughtbot.com/blog/better-commit-messages-with-a-gitmessage-template"&gt;Better Commit Messages with a .gitmessage Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/adeekshith/cd4c95a064977cdc6c50"&gt;gist - adeekshith/.git-commit-template.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.conventionalcommits.org/ko/v1.0.0-beta.4/"&gt;Conventional Commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="git"></category><category term="commit"></category><category term="template"></category></entry><entry><title>ReadtheDocs 로 퍼블리싱되는 문서에 한국어 지원하기</title><link href="https://ujuc.github.io/2020/01/31/readthedocs-ro-peo-beur-ri-sing-doe-neun-mun-seo-e-han-gug-eo-ji-weon-ha-gi/" rel="alternate"></link><published>2020-01-31T10:07:44+09:00</published><updated>2020-02-02T17:31:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2020-01-31:/2020/01/31/readthedocs-ro-peo-beur-ri-sing-doe-neun-mun-seo-e-han-gug-eo-ji-weon-ha-gi/</id><summary type="html">&lt;p&gt;Airship 프로젝트 문서 번역을 하려는데&amp;hellip; ReadtheDocs에서 제공하고 있었다. 여기서 한국어로 지원할 수 있도록 수정해주자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.airshipit.org/"&gt;Airship&lt;/a&gt; 프로젝트는 나중에 설명하도록 하자. (블로그 자주 써야지&amp;hellip;)&lt;/p&gt;
&lt;p&gt;번역을 하려던 문서는 &lt;a href="https://airship-treasuremap.readthedocs.io/en/latest/"&gt;Airship Treasuremap&lt;/a&gt;이었는데, 잘못보고 다른 저장소를 사용하게 되어 중간에 작업했던거 남겨두고 진행하려고 한다.&lt;/p&gt;
&lt;p&gt;지금의 내용은 &lt;a href="https://docs.readthedocs.io/en/stable/guides/manage-translations.html"&gt;Manage Translations&lt;/a&gt; 를 보고 따라하면 되는 부분이다.&lt;/p&gt;
&lt;h2 id="_1"&gt;번역 파일 생성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;code&gt;conf.py&lt;/code&gt; 파일이 있는 &lt;code&gt;docs&lt;/code&gt; 폴더나 도큐먼트 폴더에서 실행을 해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sphinx-build&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;gettext&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;_build/gettext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위 명령을 실행하면 &lt;code&gt;pot&lt;/code&gt; 파일을 &lt;code&gt;_build/gettext&lt;/code&gt; 에 생긴것을 확인할 수 있다.&lt;/p&gt;
&lt;h2 id="_2"&gt;번역할 텍스트 만들기&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pot&lt;/code&gt; 파일은 &lt;code&gt;po&lt;/code&gt; 템플릿이라 곧장 번역을 할 수 없다.&lt;br&gt;
그러니 &lt;code&gt;po&lt;/code&gt;파일을 다시 만들어야한다.&lt;/p&gt;
&lt;p&gt;먼저 &lt;code&gt;sphinx-intl&lt;/code&gt; 패키지를 설치하여 다음 명령어를 실행한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sphinx-intl&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;_build/gettext&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;locale/ko/LC_MESSAGES/**.po&lt;/code&gt; 파일이 생성된다.&lt;/p&gt;
&lt;p&gt;나머지는 알아서&amp;hellip; po 파일을 가지고서 다른 서비스에 올려서 번역을 하거나 하면된다.&lt;/p&gt;
&lt;h2 id="_3"&gt;선택한 언어로 문서 만들기&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sphinx-build&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;html&lt;span class="w"&gt; &lt;/span&gt;-D&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ko&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;_build/html/ko
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;로 하면된다고 한다. 아직이 부분을 해보지는 않아서 해보고 업뎃하는걸로&amp;hellip;&lt;/p&gt;</content><category term="Develop"></category><category term="documents"></category><category term="po"></category><category term="readthedocs"></category></entry><entry><title>pyenv 설치 스크립트 변경됨</title><link href="https://ujuc.github.io/2019/11/29/pyenv_seor-ci_seu-keu-rib-teu_byeon-gyeong-doem/" rel="alternate"></link><published>2019-11-29T15:44:29+09:00</published><updated>2019-11-29T15:44:29+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-11-29:/2019/11/29/pyenv_seor-ci_seu-keu-rib-teu_byeon-gyeong-doem/</id><summary type="html">&lt;p&gt;pyenv 설치 방법이 변경되어 간략하게 남겨둔다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;dotrc를 작성할때 만들었던 스크립트에서는 다음의 URL로 Pyenv를 설치했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pyenv

$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-L&lt;span class="w"&gt; &lt;/span&gt;https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이번 수정하면서, 확인하니 이분들이 &lt;code&gt;pyenv.run&lt;/code&gt; 도메인을 구매하셨나보다. 스크립트가 변경되었다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;https://pyenv.run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Develop"></category><category term="python"></category><category term="pyenv"></category><category term="python version management"></category><category term="version management"></category></entry><entry><title>TOML 0.5.0 Release</title><link href="https://ujuc.github.io/2019/09/28/toml_0.5.0_release/" rel="alternate"></link><published>2019-09-28T11:44:36+09:00</published><updated>2019-09-28T11:44:36+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-09-28:/2019/09/28/toml_0.5.0_release/</id><summary type="html">&lt;p&gt;TOML 0.5.0 릴리즈&lt;/p&gt;</summary><content type="html">&lt;p&gt;TOML 0.4.0 문서를 2017년에 번역해서 반영해두고 잊고 있었다가 오랜만에 들어갔더니 저번 7월달에 0.5.0 버전으로 업그레이드를 했다.&lt;/p&gt;
&lt;p&gt;TOML 레포에서 릴리즈를 6번 했는데. 0.4.0에서 0.5.0으로 업그레이드하는데. 장장 3년이나 걸렸다. 0.5.0 으로 업글될때 나온 커밋수도 10개밖에 안되는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;Go때문에 많은 이슈들이 쌓였고, 어떻게 하면 좋을련지에 대한 내용들이 많이 오고간듯.&lt;/p&gt;
&lt;p&gt;이슈를 보야될꺼같긴한데&amp;hellip; ~~귀찮아~~&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/toml-lang/toml/releases/tag/v0.5.0"&gt;릴리즈 노트&lt;/a&gt;를 보면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.(dot)&lt;/code&gt;으로 표기하는 키 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add dotted keys.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16진수, 8진수, 2진수로 표기하는 정수 포맷 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add hex, octal, and binary integer formats.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특별한 float 값(inf, nan) 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add special float values (inf, nan)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Offset Date-Time에서 Datetime으로 이름 변경&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rename Datetime to Offset Date-Time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로컬 Date-Time 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add Local Date-Time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로컬 날짜 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add Local Date.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;로컬 시간 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add Local Time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://zetawiki.com/wiki/ABNF"&gt;ABNF&lt;/a&gt; 스팩 추가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Add ABNF specification.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(T 대신) 날짜와 시간을 Date-Time으로 구분할 수 있도록 허용&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allow space (instead of T) to separate date and time in Date-Time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 줄 기본 문자열에서 &lt;code&gt;\&lt;/code&gt;와  &lt;code&gt;n&lt;/code&gt; (newline) 사이의 우발적인 빈칸을 허용한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(역주) &lt;code&gt;\ n&lt;/code&gt; 형식으로 사용하는 것을 허용한다.&lt;/p&gt;
&lt;p&gt;Allow accidental whitespace between backslash and newline in the line&lt;br&gt;
continuation operator in multi-line basic strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;표준 파일 확장자 &lt;code&gt;.toml&lt;/code&gt; 로 지정&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specify that the standard file extension is &lt;code&gt;.toml&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MIME 형식은  &lt;code&gt;application/toml&lt;/code&gt; 로 지정&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specify that MIME type is &lt;code&gt;application/toml&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;U+007F&lt;/code&gt;  문자는 escape 문자로 특정합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that U+007F is an escape character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;keys&lt;/code&gt; 는 문자열만 사용합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that keys are always strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정적 배열에 추가할 경우, 테이블의 배열은 사용할 수 없다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that you cannot use array-of-table to append to a static array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TOML 파일이 유효한 UTF-8 문서여야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that a TOML file must be a valid UTF-8 document.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;유요한 배열 값을 명확히 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify valid Array values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Literal 문자열이 테이블 키가 될 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that literal strings can be table keys.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date-Time 과 Time 에서 최소 milllisecond 이상의 정밀도를 가질 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that at least millisecond precision expected for Date-Time and Time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러줄 배열 타입에서 주석을 허용합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that comments are OK in multiline arrays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;+0&lt;/code&gt;, &lt;code&gt;-0&lt;/code&gt;, &lt;code&gt;+0.0&lt;/code&gt;, &lt;code&gt;-0.0&lt;/code&gt; 값이 유효하며 명확히 정의한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clarify that +0, -0, +0.0, and -0.0 are valid and what they mean.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TOML 로고가 생겼다!!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TOML has a logo!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;그리고 머지가 되었다!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/toml-lang/toml/pull/575"&gt;Append the korean translation of v0.5.0 by ujuc · Pull Request #575 · toml-lang/toml&lt;/a&gt;&lt;/p&gt;</content><category term="Develop"></category><category term="toml"></category></entry><entry><title>Docker image에 php composer 설치</title><link href="https://ujuc.github.io/2019/09/15/docker_image-e_php_composer_seor-ci/" rel="alternate"></link><published>2019-09-15T22:26:26+09:00</published><updated>2019-09-15T22:26:26+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-09-15:/2019/09/15/docker_image-e_php_composer_seor-ci/</id><summary type="html">&lt;p&gt;Dockerfile에서 composer를 설치하는 방법을 정리한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;회사에서 PHP를 사용하다보니 composer를 사용하는 일이 많아졌다.&lt;br&gt;
설치하는 방법들이 찾는데마다 달라서 우선 찾은 것들을 정리해서 둔다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell를 이용하는 방법은 이전 composer의 기본 설치방식이었던걸로 기억하고, 많은 사람들이 이렇게 설치하도록 알려준다.&lt;/li&gt;
&lt;li&gt;PHP 인터프리터를 이용해서 설치하는 방법은 composer 공식 페이지에 적혀있는 방법이다.&lt;/li&gt;
&lt;li&gt;Composer docker 이미지에서 multi-builder 방식으로 구성하고 composer 파일만 땡겨오도록 하는 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/ujuc/4d795e11b571c4c84b60851ff369b1a6.js"&gt;&lt;/script&gt;</content><category term="Develop"></category><category term="php"></category><category term="composer"></category><category term="package manager"></category><category term="docker"></category></entry><entry><title>Writing poetry script</title><link href="https://ujuc.github.io/2019/08/15/writing_poetry_script/" rel="alternate"></link><published>2019-08-15T08:51:09+09:00</published><updated>2019-08-19T20:52:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-08-15:/2019/08/15/writing_poetry_script/</id><summary type="html">&lt;p&gt;&lt;code&gt;poetry&lt;/code&gt;를 사용하면서 사용하고 싶었던 &lt;code&gt;[tool.poetry.scripts]&lt;/code&gt; 사용법을 남긴다.&lt;/p&gt;</summary><content type="html">&lt;ol&gt;
&lt;li&gt;이 문서에서 &lt;code&gt;invoke&lt;/code&gt; 라이브러리를 사용한다.&lt;/li&gt;
&lt;li&gt;실제 코드는 &lt;a href="https://github.com/ujuc/ujuc.github.io"&gt;https://github.com/ujuc/ujuc.github.io&lt;/a&gt; 에서 확인이 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;명령어 작성&lt;/h2&gt;
&lt;p&gt;블로그 새 글을 만들 수 있는 명령어를 작성한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kroman&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pendulum&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;CONTENT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Post title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rst&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Post format. if false, make markdown format&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Make post template&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pendulum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kroman&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_date_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;post_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;file_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.md&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Title: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Category: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Tags: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Slug: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;Summary: &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;.rst&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;hashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

        &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;hashes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:date: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:category: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:tags: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:slug: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;:summary: &lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;blog_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CONTENT_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blog&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;blog_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_dir&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;blog_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;post_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blog_path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;post_path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;post_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;post_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;File created -&amp;gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;post_path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;task를 등록해 주고 명령을 확인하면 다음 같이 보인다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--list

Available&lt;span class="w"&gt; &lt;/span&gt;tasks:

&lt;span class="w"&gt;  &lt;/span&gt;clean&lt;span class="w"&gt;      &lt;/span&gt;Clean&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;dir
&lt;span class="w"&gt;  &lt;/span&gt;fix&lt;span class="w"&gt;        &lt;/span&gt;Execute&lt;span class="w"&gt; &lt;/span&gt;black
&lt;span class="w"&gt;  &lt;/span&gt;preview&lt;span class="w"&gt;    &lt;/span&gt;Start&lt;span class="w"&gt; &lt;/span&gt;preview&lt;span class="w"&gt; &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;page&lt;span class="w"&gt; &lt;/span&gt;server
&lt;span class="w"&gt;  &lt;/span&gt;pub&lt;span class="w"&gt;        &lt;/span&gt;Publish&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;github&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt; &lt;/span&gt;page
&lt;span class="w"&gt;  &lt;/span&gt;cli.post&lt;span class="w"&gt;   &lt;/span&gt;Make&lt;span class="w"&gt; &lt;/span&gt;post&lt;span class="w"&gt; &lt;/span&gt;template
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;명령어를 실행해 보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--help&lt;span class="w"&gt; &lt;/span&gt;cli.post
Usage:&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="o"&gt;[&lt;/span&gt;oke&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--core-opts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cli.post&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--options&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;tasks&lt;span class="w"&gt; &lt;/span&gt;here&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;

Docstring:
&lt;span class="w"&gt;  &lt;/span&gt;Make&lt;span class="w"&gt; &lt;/span&gt;post&lt;span class="w"&gt; &lt;/span&gt;template

Options:
&lt;span class="w"&gt;  &lt;/span&gt;-r,&lt;span class="w"&gt; &lt;/span&gt;--rst&lt;span class="w"&gt;                   &lt;/span&gt;Post&lt;span class="w"&gt; &lt;/span&gt;format.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;false,&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;markdown&lt;span class="w"&gt; &lt;/span&gt;format
&lt;span class="w"&gt;  &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;STRING,&lt;span class="w"&gt; &lt;/span&gt;--title&lt;span class="o"&gt;=&lt;/span&gt;STRING&lt;span class="w"&gt;   &lt;/span&gt;Post&lt;span class="w"&gt; &lt;/span&gt;title

&lt;span class="c1"&gt;# Test create post&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;cli.post&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;포스트 테스트&amp;quot;&lt;/span&gt;
File&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/Users/ujuc/repos/ujuc.github.io/content/blog/2019-08-14-po-seu-teu_te-seu-teu.md

&lt;span class="c1"&gt;# Cat post file&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;content/blog/2019-08-14-po-seu-teu_te-seu-teu.md
Title:&lt;span class="w"&gt; &lt;/span&gt;포스트&lt;span class="w"&gt; &lt;/span&gt;테스트
Date:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2019&lt;/span&gt;-08-14&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;23&lt;/span&gt;:49:02
Category:&lt;span class="w"&gt; &lt;/span&gt;
Tags:&lt;span class="w"&gt; &lt;/span&gt;
Slug:&lt;span class="w"&gt; &lt;/span&gt;po-seu-teu_te-seu-teu
Summary:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;여기까지 &lt;a href="https://github.com/ujuc/ujuc.github.io/commit/8e4fa75978c249192c203658dace4949a7956936"&gt;code commit&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이제 만들어지는 걸 확인했으니&amp;hellip; &lt;code&gt;poetry run cli&lt;/code&gt;  명령을 이용해서도 만들 수 있게 코드를 수정하자.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cli/main.py&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Package로 추가해야 되어 &lt;code&gt;cli&lt;/code&gt; 폴더를 만들었다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/sdispater/poetry/issues/577"&gt;Poetry run: ModuleOrPackageNotFound with implicit namespace packages (PEP420)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Import Program class&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;program&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.poetry]&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cli&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;[tool.poetry.scripts]&lt;/span&gt;
&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cli.main:run&amp;#39;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이제 실행해 보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cli&lt;span class="w"&gt; &lt;/span&gt;--list
Subcommands:

&lt;span class="w"&gt;  &lt;/span&gt;post&lt;span class="w"&gt;   &lt;/span&gt;Make&lt;span class="w"&gt; &lt;/span&gt;post&lt;span class="w"&gt; &lt;/span&gt;template

&lt;span class="c1"&gt;# Test create post&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;poetry&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;cli&lt;span class="w"&gt; &lt;/span&gt;post&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;포스트 테스트&amp;quot;&lt;/span&gt;
File&lt;span class="w"&gt; &lt;/span&gt;created&lt;span class="w"&gt; &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/Users/ujuc/repos/ujuc.github.io/content/blog/2019-08-15-po-seu-teu_te-seu-teu.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;잘된다.&lt;/p&gt;
&lt;p&gt;여기까지 &lt;a href="https://github.com/ujuc/ujuc.github.io/commit/ded484d94cec63e684d1f8fab2ea0b8006ceab63"&gt;code commit&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;이렇게 하면 간단한 cli 툴을 실행할 수 있다.&lt;/p&gt;
&lt;p&gt;문제는 build를 하게되면 해당 명령 셋이 등록이 되니&amp;hellip; build용이 아닌 상태로 사용하자.&lt;/p&gt;
&lt;p&gt;build일때는 고민을&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/sdispater/poetry/blob/master/pyproject.toml#L69"&gt;poetry 레포&lt;/a&gt;를 보면 해당 &lt;code&gt;pyproject.toml&lt;/code&gt;에 실행하는 코드가 들어가있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;ps. 파일 단위로도 가능하다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tasks.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;위에꺼 갔다 쓰자.. 귀찮다...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.poetry.scripts]&lt;/span&gt;
&lt;span class="na"&gt;cli&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tasks:run&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;이제 나머지 명령어 옮기러가야겠다.&lt;/p&gt;</content><category term="Develop"></category><category term="poetry"></category><category term="script"></category><category term="invoke"></category></entry><entry><title>Rust 개발 환경 구성</title><link href="https://ujuc.github.io/2019/08/06/rust_gae-bar_hwan-gyeong_gu-seong/" rel="alternate"></link><published>2019-08-06T08:58:16+09:00</published><updated>2019-08-06T08:58:16+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-08-06:/2019/08/06/rust_gae-bar_hwan-gyeong_gu-seong/</id><summary type="html">&lt;p&gt;Rust 개발을 해볼까나~&lt;/p&gt;</summary><content type="html">&lt;p&gt;그냥 공부할 목적으로 Rust를 하기로 하였다.&lt;br&gt;
요즘에 참 잘 나간다고도 했고&amp;hellip;&lt;/p&gt;
&lt;h2 id="rustup-rust"&gt;Rustup으로 Rust 설치&lt;/h2&gt;
&lt;p&gt;처음에는 rustup을 이용해서 설치한게 아니라 brow를 이용해서 설치를 했었다.&lt;br&gt;
coc.nvim에서 rust 플러그인을 쓸려고하니&amp;hellip; 안된다고 해서 설치.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;--proto&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;=https&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--tlsv1.2&lt;span class="w"&gt; &lt;/span&gt;-sSf&lt;span class="w"&gt; &lt;/span&gt;https://sh.rustup.rs&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;명령어를 확인했는데 이거 괜찮은 툴이다.&lt;br&gt;
나중에 따로 정리해야지.&lt;/p&gt;
&lt;h2 id="vim"&gt;Vim 환경&lt;/h2&gt;
&lt;h3 id="cocnvim"&gt;coc.nvim 플러그인 설치&lt;/h3&gt;
&lt;p&gt;원래 목적인 coc.nvim 플러그인을 설치하자.&lt;br&gt;
vim에서 명령을 날린다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:CocInstall coc-rls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;환경 끝.&lt;/p&gt;
&lt;h2 id="idea"&gt;IDEA&lt;/h2&gt;
&lt;h3 id="clion"&gt;CLion&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CLion을 설치한다.&lt;/li&gt;
&lt;li&gt;Rust 플러그인을 설치한다.&lt;/li&gt;
&lt;li&gt;Rust를 가지고서 개발한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;환경 끝.&lt;/p&gt;</content><category term="Develop"></category><category term="rust"></category><category term="rustup"></category><category term="develop"></category><category term="env"></category></entry><entry><title>Task 실행 라이브러리 - Invoke</title><link href="https://ujuc.github.io/2019/07/21/task_sir-haeng_ra-i-beu-reo-ri_-_invoke/" rel="alternate"></link><published>2019-07-21T16:20:49+09:00</published><updated>2019-07-21T16:20:49+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-07-21:/2019/07/21/task_sir-haeng_ra-i-beu-reo-ri_-_invoke/</id><summary type="html">&lt;p&gt;Task 실행 라이브러리인 &lt;code&gt;Invoke&lt;/code&gt;를 확인한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican 에서 Makefile를 이용해서 빌드하고 있었는데.&lt;br&gt;
4.0.0 버전으로 올라오면서 &lt;code&gt;Invoke&lt;/code&gt; 라이브러리를 사용하게 되었음을 확인.&lt;br&gt;
그러니 사용해봐야징&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pyinvoke.org/"&gt;Home&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="what-is-invoke"&gt;What is Invoke?&lt;/h2&gt;
&lt;p&gt;Python (2.7, 3.4+) 태스크 실행 툴이자 라이브러리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[tasks.py](http://tasks.py)&lt;/code&gt; 파일에 태스크를 명시하여 진행&lt;ul&gt;
&lt;li&gt;물론 &lt;code&gt;tasks/*.py&lt;/code&gt; 형식으로 만들어서 정의할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GNU Make 처럼, 명령을 나열할 수 있다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;invoke&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;REPL 쪽에서 사용이 가능하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unix CLI 와 같이 flag-based style 명령어를 만들 수 있다.&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ab&lt;/code&gt; , &lt;code&gt;-d&lt;/code&gt; 이런거&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tasks.py&lt;/code&gt; - &lt;a href="https://github.com/ujuc/ujuc.github.io/blob/develop/tasks.py"&gt;ujuc.github.io - tasks.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;invoke&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cwd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;CONF_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pelicanconf.py&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PUBLISH_CONF_FILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_PATH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;publishconf.py&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Start preview web page server&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -s &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CONF_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Clean up this dir&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rm -rf &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/__pycache__ &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASE_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/cache&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Publish to github main page&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican -s &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PUBLISH_CONF_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ghp-import -m &amp;#39;Generate Pelican site&amp;#39; -b master &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;git push origin master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Execute black&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black -l 80 .&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;목록은 이렇게&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;--list

Available&lt;span class="w"&gt; &lt;/span&gt;tasks:

&lt;span class="w"&gt;  &lt;/span&gt;clean&lt;span class="w"&gt;     &lt;/span&gt;Clean&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;dir
&lt;span class="w"&gt;  &lt;/span&gt;fix&lt;span class="w"&gt;       &lt;/span&gt;Execute&lt;span class="w"&gt; &lt;/span&gt;black
&lt;span class="w"&gt;  &lt;/span&gt;preview&lt;span class="w"&gt;   &lt;/span&gt;Start&lt;span class="w"&gt; &lt;/span&gt;preview&lt;span class="w"&gt; &lt;/span&gt;web&lt;span class="w"&gt; &lt;/span&gt;page&lt;span class="w"&gt; &lt;/span&gt;server
&lt;span class="w"&gt;  &lt;/span&gt;pub&lt;span class="w"&gt;       &lt;/span&gt;Publish&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;github&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt; &lt;/span&gt;page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;help는 이렇게&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="w"&gt; &lt;/span&gt;pub&lt;span class="w"&gt; &lt;/span&gt;-h

Usage:&lt;span class="w"&gt; &lt;/span&gt;inv&lt;span class="o"&gt;[&lt;/span&gt;oke&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;--core-opts&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pub&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;other&lt;span class="w"&gt; &lt;/span&gt;tasks&lt;span class="w"&gt; &lt;/span&gt;here&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;

Docstring:
&lt;span class="w"&gt;  &lt;/span&gt;Publish&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;github&lt;span class="w"&gt; &lt;/span&gt;main&lt;span class="w"&gt; &lt;/span&gt;page

Options:
&lt;span class="w"&gt;  &lt;/span&gt;none
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;p&gt;자세한건 &lt;a href="http://docs.pyinvoke.org/en/stable"&gt;Docs&lt;/a&gt; 에서 읽어가면서 확인&lt;/p&gt;</content><category term="Develop"></category><category term="invoke"></category><category term="devops"></category><category term="paramiko"></category><category term="command"></category><category term="cli"></category><category term="task"></category></entry><entry><title>Docker container 사용자 설정</title><link href="https://ujuc.github.io/2019/05/25/docker_container_sa-yong-ja_seor-jeong/" rel="alternate"></link><published>2019-05-25T12:38:45+09:00</published><updated>2019-05-25T12:38:45+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2019-05-25:/2019/05/25/docker_container_sa-yong-ja_seor-jeong/</id><summary type="html">&lt;p&gt;Docker container를 사용할때 발생한 에러에 대해서 작성하였다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;회사에서 개발한 소스들을 Docker 이미지를 만들어서 ubuntu 18.04에서 작업을 할 수 있도록 구성을 했다.&lt;/p&gt;
&lt;p&gt;인프라 작업을 하고 있지만, OS나 인프라는 매번 내가 생각했던 대로 잘 안 해준다.&lt;/p&gt;
&lt;p&gt;이번에도 에러가 났다&amp;hellip;&lt;/p&gt;
&lt;h3 id="_1"&gt;문제&lt;/h3&gt;
&lt;p&gt;실행중인 Docker container에 접속해서 그 폴더를 사용하는 스크립트를 만든 다음 실행하였더니 Docker container에서 mount 해서 사용하는 볼륨 권한 문제.&lt;/p&gt;
&lt;p&gt;폴더에 접근할 방법이 없단다.&lt;/p&gt;
&lt;p&gt;Docker container에서 사용하는 사용자는 root. 이 root는 패이크 루트라서 GID는 호스트의 root와 동일하지만, container에서만 root이지 실제로 호스트에서는 제대로 작동하지 않는다.&lt;/p&gt;
&lt;p&gt;해당 내용을 다른 분들에게 물었더니 그 폴더 권한을 &lt;code&gt;0777&lt;/code&gt; 로 변경해서 작업을 하라고 해서 기각.&lt;/p&gt;
&lt;p&gt;어떤 넘이 어떻게 들어올 줄 모르는데 모든 걸 열라니!!!&lt;/p&gt;
&lt;h3 id="_2"&gt;해결&lt;/h3&gt;
&lt;p&gt;그래서 딴짓을 했다.&lt;/p&gt;
&lt;p&gt;우선 호스트에서 필요한 dir을 생성했다. → 그러면 해당 폴더의 &lt;code&gt;gid&lt;/code&gt;와 &lt;code&gt;uid&lt;/code&gt;는 호스트 사용자의 &lt;code&gt;uid/gid&lt;/code&gt;를 사용하게 된다.&lt;/p&gt;
&lt;p&gt;그리고 Docker에게서 새로운 사용자를 만들고 그에게 호스트 사용자와 동일한 &lt;code&gt;gid/uid&lt;/code&gt; 를 가질 수 있도록 하였다.&lt;/p&gt;
&lt;p&gt;이건 Ubuntu에 하나의 유저만 있는 상태에서 가능한 설정이다. 만약 호스트에서 여러 사용자를 만들어서 사용한다면, 이 설정은 힘들다. &lt;code&gt;gid/uid&lt;/code&gt;가 다를 수 있다. Container 에서의 사용자는 root이외에 &lt;code&gt;www-data&lt;/code&gt; 와 같은 시스템 User 등급만 있지 실제 User 등급은 없어서 &lt;code&gt;gid : 1000&lt;/code&gt;, &lt;code&gt;uid : 1000&lt;/code&gt;을 가져가게된다.&lt;/p&gt;
&lt;p&gt;다른 사용자가 있다면&amp;hellip; 다른 작업을 하도록 하자.&lt;/p&gt;
&lt;p&gt;뒤지다 뒤지다 발견한 하나의 글.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://codeyarns.com/2017/07/21/how-to-set-user-of-docker-container/"&gt;How to set user of Docker container&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 글의 문제점은 Docker다. 난 Docker-compose를 사용하고 있어서 다른 작업이 필요했다.&lt;/li&gt;
&lt;li&gt;내 생각에는 이 옵션에 대한 Docker-compose 옵션이 있을 꺼라 생각하는데. 나중에 다른 작업할때 찾아봐야겠다.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="docker"></category><category term="container"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>맥에서 GPG키를 이용하여 Commit 해보기</title><link href="https://ujuc.github.io/2018/10/26/maeg-e-seo_gpgki-reur_i-yong-ha-yeo_commit_hae-bo-gi/" rel="alternate"></link><published>2018-10-26T23:24:58+09:00</published><updated>2022-05-01T22:44:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-10-26:/2018/10/26/maeg-e-seo_gpgki-reur_i-yong-ha-yeo_commit_hae-bo-gi/</id><summary type="html">&lt;p&gt;GPG 키를 이용해서 내 커밋이 정말 내가 올린 것이라 말하고 싶었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://keybase.io/"&gt;keybase.io&lt;/a&gt; 계정이 있다는 가정하에서 하니, 가입을 하자.&lt;/p&gt;
&lt;h3 id="_1"&gt;필요한 것들&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;gpg
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--cask&lt;span class="w"&gt; &lt;/span&gt;keybase
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--cask&lt;span class="w"&gt; &lt;/span&gt;gpg-suite
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="gpg"&gt;GPG 키 생성&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;keybase&lt;span class="w"&gt; &lt;/span&gt;pgp&lt;span class="w"&gt; &lt;/span&gt;gen&lt;span class="w"&gt; &lt;/span&gt;--multi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="git"&gt;Git 구성에 추가&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--list-secret-keys&lt;span class="w"&gt; &lt;/span&gt;--keyid-format&lt;span class="w"&gt; &lt;/span&gt;LONG
/Users/&lt;span class="o"&gt;{&lt;/span&gt;username&lt;span class="o"&gt;}&lt;/span&gt;/.gnupg/pubring.kbx
------------------------------
sec&lt;span class="w"&gt;   &lt;/span&gt;rsa4096/&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-10-18&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;SC&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;20xx-10-01&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;?????
uid&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;unknown&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Sungjin&lt;span class="w"&gt; &lt;/span&gt;Kang&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;example@example.com&amp;gt;
ssb&lt;span class="w"&gt;   &lt;/span&gt;rsa4096/&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-10-18&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;E&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;expires:&lt;span class="w"&gt; &lt;/span&gt;20xx-10-01&lt;span class="o"&gt;]&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.signingkey&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;commit.gpgsign&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="github-public-gpg"&gt;Github 에 Public GPG 키 등록&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/settings/keys"&gt;https://github.com/settings/keys&lt;/a&gt; 에 접속하여 &lt;strong&gt;New GPG key&lt;/strong&gt; 메뉴 선택&lt;/p&gt;
&lt;p&gt;아래 명령어로 GPG키 복사하여 붙여넣기&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;keybase&lt;span class="w"&gt; &lt;/span&gt;pgp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-q&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;keyid&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pbcopy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="git-gui"&gt;Git GUI 툴에서 커밋이 가능하게 옵션 추가&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;no-tty&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.gnupg/gpg.conf
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;gpg.program&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;which&lt;/span&gt;&lt;span class="p"&gt; gpg&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="_2"&gt;회사 컴퓨터에도 가능하게 해두자&lt;/h3&gt;
&lt;p&gt;위에서 말한 프로그램을 설치한 뒤 다음 명령을 이용해서 key를 저장한다. 하나의 키를 가지고 있을 경우에만 다음 명령이 먹힌다. 두개이상이면 다른 모습이 보인다고&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;keybase&lt;span class="w"&gt; &lt;/span&gt;pgp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;
-----BEGIN&lt;span class="w"&gt; &lt;/span&gt;PGP&lt;span class="w"&gt; &lt;/span&gt;PUBLIC&lt;span class="w"&gt; &lt;/span&gt;KEY&lt;span class="w"&gt; &lt;/span&gt;BLOCK-----

&lt;span class="c1"&gt;# Public key export&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;keybase&lt;span class="w"&gt; &lt;/span&gt;pgp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--import
&lt;span class="c1"&gt;# Private key export&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;keybase&lt;span class="w"&gt; &lt;/span&gt;pgp&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--secret&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;gpg&lt;span class="w"&gt; &lt;/span&gt;--allow-secret-key-import&lt;span class="w"&gt; &lt;/span&gt;--import
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="_3"&gt;참고 사이트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pstadler/keybase-gpg-github"&gt;Set up Keybase.io, GPG &amp;amp; Git to sign commits on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aaronparecki.com/2016/07/29/10/git-tower"&gt;Signed git commits with Tower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.notion.so/ujuc/GPG-commit-11c88ce0b00f4dc79713b4ce09f62714"&gt;simnalamburt/keybase-github.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="gpg key"></category><category term="keybase.io"></category><category term="keybase"></category></entry><entry><title>PHP Package Manager : phpenv</title><link href="https://ujuc.github.io/2018/10/06/php_package_manager_:_phpenv/" rel="alternate"></link><published>2018-10-06T09:29:19+09:00</published><updated>2018-10-06T09:29:19+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-10-06:/2018/10/06/php_package_manager_:_phpenv/</id><summary type="html">&lt;p&gt;PHP 패키지 매니저, phpenv를 확인해본다. 설치 실패기다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="_1"&gt;들어가는 말&lt;/h2&gt;
&lt;p&gt;PHP로 개발을 해야되는 일이 생겼다. 버전을 7.x대로 써야되는데&amp;hellip; 7.2는 아닌거같으니&amp;hellip; 뭔가 버전을 따로 구성해서 진행하고 싶다.!&lt;/p&gt;
&lt;h2 id="php-package-manager"&gt;PHP Package Manager&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/phpenv/phpenv"&gt;github.com/phpenv/phpemv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;버전 관리를 위한 부분.&lt;br&gt;
사용법은 &lt;code&gt;rbenv&lt;/code&gt;, &lt;code&gt;pyenv&lt;/code&gt; 와 동일하다. (그렇다보니 shell script로만 작성이되어있다.)&lt;/p&gt;
&lt;h3 id="_2"&gt;설치&lt;/h3&gt;
&lt;h4 id="github-checkout"&gt;&lt;a href="https://github.com/phpenv/phpenv#installation"&gt;Github Checkout&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;git://github.com/phpenv/phpenv.git&lt;span class="w"&gt; &lt;/span&gt;~/.phpenv
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export PATH=&amp;quot;$HOME/.phpenv/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eval &amp;quot;$(phpenv init -)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bash_profile
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$SHELL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="phpenv-installer"&gt;&lt;a href="https://github.com/phpenv/phpenv-installer"&gt;phpenv-installer&lt;/a&gt;&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -L https://raw.githubusercontent.com/phpenv/phpenv-installer/master/bin/phpenv-installer | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이걸 설치하면 &lt;code&gt;php-build/php-build&lt;/code&gt;, &lt;code&gt;madumlao/phpenv-aliases&lt;/code&gt;, &lt;code&gt;ngyuki/phpenv-composer&lt;/code&gt;가 자동으로 설치된다.&lt;/p&gt;
&lt;h3 id="php"&gt;PHP 설치&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;phpenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--list
$&lt;span class="w"&gt; &lt;/span&gt;phpenv&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;php_version&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="php_1"&gt;PHP 설치시 에러&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mac os error &lt;a href="https://qiita.com/maosanhioro/items/82698a8bdf6b7694ad36"&gt;해결 문서&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;-----------------&lt;/span&gt;
&lt;span class="c"&gt;|  BUILD ERROR  |&lt;/span&gt;
&lt;span class="nb"&gt;-----------------&lt;/span&gt;

&lt;span class="c"&gt;Here are the last 10 lines from the log:&lt;/span&gt;

&lt;span class="nb"&gt;-----------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;configure: WARNING: This bison version is not supported for regeneration of the Zend/PHP parsers (found: 2&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; min: 204&lt;/span&gt;&lt;span class="nt"&gt;,&lt;/span&gt;&lt;span class="c"&gt; excluded: )&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;configure: WARNING: You will need re2c 0&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;13&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;4 or later if you want to regenerate PHP parsers&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;
&lt;span class="c"&gt;configure: error: Cannot find OpenSSL&amp;#39;s &lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;&lt;/span&gt;&lt;span class="c"&gt;evp&lt;/span&gt;&lt;span class="nt"&gt;.&lt;/span&gt;&lt;span class="c"&gt;h&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;-----------------------------------------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;추가 설치 패키지&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bison&lt;/span&gt;&lt;span class="mf"&gt;@2.7&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bison&lt;/span&gt;&lt;span class="mf"&gt;@2.7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;

&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;re2c&lt;/span&gt;

&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;openssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libxml2&lt;/span&gt;
&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;openssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libxml2&lt;/span&gt;

&lt;span class="n"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;brew&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mcrypt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libz&lt;/code&gt; error&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xcode-select --install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;모하비에서는 안된다.&lt;/p&gt;
&lt;h2 id="_3"&gt;나오는 말&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;phpenv&lt;/code&gt;로는 설치가 안되서&amp;hellip; &lt;code&gt;brew&lt;/code&gt;로 그냥 설치&amp;hellip;&lt;br&gt;
&lt;code&gt;brew&lt;/code&gt; 로 7.2 버전이랑 7.1 버전을 설치해두고 PhpStorm 에서 둘다 잡아두면 두개다 쓸수있지뭐&amp;hellip; 마이너까지만 신경쓰면되니.&lt;/p&gt;</content><category term="Develop"></category><category term="php"></category><category term="phpenv"></category><category term="env"></category></entry><entry><title>Pelican에서 Markdown 문서 Attribute 에러</title><link href="https://ujuc.github.io/2018/09/24/pelicane-seo_markdown_mun-seo_attribute_e-reo/" rel="alternate"></link><published>2018-09-24T22:45:00+09:00</published><updated>2018-09-28T18:58:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-24:/2018/09/24/pelicane-seo_markdown_mun-seo_attribute_e-reo/</id><summary type="html">&lt;p&gt;Pelican을 새로 설치하였더니 markdown 문서들이 전부 컴파일이 안된다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;블로그를 python 3.7로 업그레이드로 진행하고 나서 다음과 같은 에러가 발생한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican&lt;span class="w"&gt; &lt;/span&gt;/Users/ujuc/repos/ujuc.github.io/content&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;/Users/ujuc/repos/ujuc.github.io/output&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;/Users/ujuc/repos/ujuc.github.io/pelicanconf.py&lt;span class="w"&gt; &lt;/span&gt;
ERROR:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;process&lt;span class="w"&gt; &lt;/span&gt;blog/2017-10-22-pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi.md
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AttributeError:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Registry&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;object&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;attribute&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;
ERROR:&lt;span class="w"&gt; &lt;/span&gt;Could&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;process&lt;span class="w"&gt; &lt;/span&gt;blog/2014-02-23-pylint.md
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AttributeError:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Registry&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;object&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;attribute&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;keys&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;git으로 버전을 관리하고 있어 해당 변경점을 확인하였더니 확인했더니 Markdown 라이브러리 문제다. 그것도 메이저로 업그레이드되면서 무언가가 변경이 되었고, 그게 Pelican 에서 사용하는 어떤 키와 잘못 설정된 부분이 있어서 발생한 것으로 파악된다.&lt;/p&gt;
&lt;p&gt;나는 pipenv 를 사용하니 &lt;code&gt;Pipfile&lt;/code&gt; 에서 &lt;code&gt;Markdown&lt;/code&gt; 라이브러리 버전을 다음과 같이 수정을 하였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[packages]
Markdown = {version = &amp;quot;&amp;lt;3.0&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Develop"></category><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Pycharm에 pylint 추가</title><link href="https://ujuc.github.io/2018/09/24/pycharme_pylint_cu-ga/" rel="alternate"></link><published>2018-09-24T00:49:24+09:00</published><updated>2018-09-24T00:49:24+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-09-24:/2018/09/24/pycharme_pylint_cu-ga/</id><summary type="html">&lt;p&gt;Pycharm 에 pylint를 외부 툴로 등록하는 방법&lt;/p&gt;</summary><content type="html">&lt;p&gt;나는 블로그를 사용할때 Python 스크립트를 사용해서 작업을 하고 있다. 그러다보니 매번 파일에 추가되는 내용이나 달라지는 것들이 있으면 수정을 하는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;지금까지는 lint 작업은 하지않고서 pycharm에서 지적하는 부분만 가지고 작업을 하였다만&amp;hellip; 이제 lint를 적용해서 작업을 공통으로 사용할 수 있게 해놔야지&amp;hellip;&lt;/p&gt;
&lt;p&gt;pylint만 있는건 아니지만, pep8이나 다른것들을 정리하려면&amp;hellip; 너무 많은 것을 등록해야된&amp;hellip; 논외로..&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/38134086/how-to-run-pylint-with-pycharm"&gt;How to run Pylint with PyCharm - stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;위의 글을 읽어보면 자세히 되어있다.&lt;/p&gt;
&lt;p&gt;여기서 나와 다른 점에 대해서 기록하고 넘어가기로 한다.&lt;/p&gt;
&lt;p&gt;나는 global로 pylint를 설치하지 않았다. 귀찮기도하고 많은 버전을 섞어쓰는 환경이다보니&amp;hellip; &lt;code&gt;pipenv&lt;/code&gt; 를 사용하고 있는데 이것에 대한 내용은 없다. global 하게 패키지까는 것도 부담스럽고&amp;hellip;&lt;/p&gt;
&lt;p&gt;다음 사진과 같이 나는 내용을 수정해서 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="My_settings" src="https://ujuc.github.io/img/2018-09-24_pycharm_export_tool_setting.png"&gt;&lt;/p&gt;</content><category term="Develop"></category><category term="pycharm"></category><category term="pylint"></category><category term="python"></category><category term="lint"></category></entry><entry><title>Custom Virtual Environment Location on piping</title><link href="https://ujuc.github.io/2018/04/21/custom_virtual_environment_location_on_piping/" rel="alternate"></link><published>2018-04-21T13:01:22+09:00</published><updated>2018-04-21T13:01:22+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2018-04-21:/2018/04/21/custom_virtual_environment_location_on_piping/</id><summary type="html">&lt;p&gt;pipevn 를 사용하는데&amp;hellip; env 가 안보인다. 보이는 곳으로 옮기자!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt;를 사용하면 &lt;code&gt;.env&lt;/code&gt; 파일까지 생성해주고 그것을 사용할 수 있도록 해준다.&lt;br&gt;
그런데&amp;hellip; 이거 참&amp;hellip; 저 깊숙한곳에 만들어주니&amp;hellip; Pycharm 에서 &lt;code&gt;env&lt;/code&gt;를 쓰려고 찾기시작하니 귀찮다. 그리고 그냥 지워버리면 그 밑에있는건&amp;hellip;&lt;/p&gt;
&lt;p&gt;물론 확인할 수 있는 방법이 없는건아니다. &lt;code&gt;pipenv shell&lt;/code&gt;로 하면 &lt;code&gt;.env&lt;/code&gt; 파일이 존재하는 곳을 찾아서 실행시켜주기도 하는데&amp;hellip;&lt;br&gt;
내마음에 안드니&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pipenv&lt;/code&gt; 에서 사용하는 &lt;code&gt;.env&lt;/code&gt;를 내가 원하는 위치에 옮겨보자.&lt;/p&gt;
&lt;h3 id="workon_home"&gt;&lt;code&gt;WORKON_HOME&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;저 깊이 들어가는 &lt;code&gt;.env&lt;/code&gt; 폴더를 내가 원하는 위치로 옮겨준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=~/.&lt;/span&gt;&lt;span class="n"&gt;venvs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="pipenv_venv_in_project"&gt;&lt;code&gt;PIPENV_VENV_IN_PROJECT&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;프로젝트를 진행하고있는 곳에 &lt;code&gt;.env&lt;/code&gt; 파일을 만들어준다.&lt;br&gt;
이럴때는 &lt;code&gt;.gitignore&lt;/code&gt;에서 &lt;code&gt;.env/&lt;/code&gt; 파일을 예외로 해주어야된다. 해주는게 좋을꺼다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PIPENV_VENV_IN_PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="_1"&gt;참고&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://docs.pipenv.org/advanced/#custom-virtual-environment-location"&gt;pipenv - Custom Virtual Environment Location&lt;/a&gt;&lt;/p&gt;</content><category term="Develop"></category><category term="pip"></category><category term="pipenv"></category><category term="env"></category><category term="python"></category></entry><entry><title>파이썬으로 리눅스 배포판 확인하기</title><link href="https://ujuc.github.io/2017/10/22/pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi/" rel="alternate"></link><published>2017-10-22T18:21:49+09:00</published><updated>2017-10-22T18:21:49+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-10-22:/2017/10/22/pa-i-sseon-eu-ro_ri-nug-seu_bae-po-pan_hwag-in-ha-gi/</id><summary type="html">&lt;p&gt;파이썬으로 cmd 툴을 만들다보니 리눅스 배포판을 구분해야되는 경우가 발생했다!&lt;/p&gt;</summary><content type="html">&lt;p&gt;요즘 코딩을 안하니&amp;hellip; 머리가 멍해져가는지라.&lt;br&gt;
컴퓨터를 밀고 나면 새롭게 설정하기위해서 만들어뒀던 셸  스크립트를 파이썬 cmd 라이버리를 가지고 변경하는중. (이건 따로 작성하자. 새로운 기능을 많이써서&amp;hellip;)&lt;/p&gt;
&lt;p&gt;리눅스 배포판 별로 설치하는 프로그램 명령어가 다르니 배포판을 구분하여 명령어를 다르게 적용할수 있도록 구현이 필요했다.&lt;/p&gt;
&lt;p&gt;찾다보니 &lt;a href="https://docs.python.org/3/library/platform.html"&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; 라이브러리가 내부에 존재하고 해당 라이브러리에서 Unix 환경에서 사용이 가능한 &lt;code&gt;dist&lt;/code&gt;, &lt;code&gt;linux_distribution&lt;/code&gt; 메소드가 존재를 한다. 그런데 이거 3.5때 방출에 대한 논의 (&lt;a href="https://bugs.python.org/issue1322"&gt;issue 1322&lt;/a&gt;)가 되었고, 3.7에서 삭제되는 걸로 끝&amp;hellip;&lt;/p&gt;
&lt;p&gt;이런. 난 매번 버전 업데이트되면 최신으로 맞출껀데&amp;hellip;&lt;/p&gt;
&lt;p&gt;댓글을 읽다보니 해당 기능을 따로 빼내어 다른 서비스로 만들어둔 용자가 있었다. 이름은 &lt;a href="https://pypi.python.org/pypi/distro"&gt;&lt;code&gt;distro&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;그런데 이건 Unix 환경에서만 작동이된다. 맥에서는 패키지는 깔리지만 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;원리는 간단하다. &lt;code&gt;/etc/*-release&lt;/code&gt; 파일에 작성되어있는 내용을 가져와 표시해주는 것으로 보인다. 뭐 Todo로 &lt;code&gt;lsb_release&lt;/code&gt; 파일을 만들 수 있는게 있어보이지만&amp;hellip; 언제될지는 모르겠고.&lt;/p&gt;
&lt;h2 id="_1"&gt;사용법&lt;/h2&gt;
&lt;h3 id="linux_distributionfull_distribution_nametrue"&gt;&lt;code&gt;linux_distribution(full_distribution_name=True)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Output : &lt;code&gt;(id_name, version, codename)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;platform.linux_distribution()&lt;/code&gt; 와 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id&gt;&lt;code&gt;id()&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판 id를 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="nameprettyfalse"&gt;&lt;code&gt;name(pretty=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판 이름을 반환한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pretty&lt;/code&gt; 옵션을 사용하면 자세하게 나온단다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="versionprettyfalse-bestfalse"&gt;&lt;code&gt;version(pretty=False, best=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포판 버전이다. (16.04, 17.05 이런거…)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="codename"&gt;&lt;code&gt;codename()&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;배포판 코드네임&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="infoprettyfalse-bestfalse"&gt;&lt;code&gt;info(pretty=False, best=False)&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리눅스 배포판에 대한 정보를 보여준다.&lt;/li&gt;
&lt;li&gt;여기에 키값으로 되어있는 것들이 메소드 명과 1:1 매칭된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다른 것도 많으니 &lt;a href="http://distro.readthedocs.io/en/latest/"&gt;문서&lt;/a&gt; 확인하자.&lt;/p&gt;</content><category term="Develop"></category><category term="python"></category><category term="linux"></category><category term="distribution"></category><category term="lib"></category></entry><entry><title>Scala에서 val, var 차이</title><link href="https://ujuc.github.io/2017/08/04/scalae-seo_val,_var_ca-i/" rel="alternate"></link><published>2017-08-04T11:07:25+09:00</published><updated>2017-08-04T11:07:25+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-08-04:/2017/08/04/scalae-seo_val,_var_ca-i/</id><summary type="html">&lt;p&gt;Scala에서 &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;의 차이가 궁금해졌다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;요세 Java를 공부하기는 싫고 JVM에서 도는 걸 찾다가. Scala쪽으로 어떤분이 약을 파셔서 약을먹었다.&lt;/p&gt;
&lt;p&gt;초기 공부는 역시 홈페이지에 있는 문서를 기반으로&amp;hellip; &lt;a href="http://docs.scala-lang.org/tour/tour-of-scala.html"&gt;Scala Tour&lt;/a&gt; 를 보다 &lt;a href="http://docs.scala-lang.org/tour/classes.html"&gt;Classes&lt;/a&gt;에 갔더니 예제로 다음 과 같은 내용이 있었다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dy&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s"&gt;s&amp;quot;(&lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="s"&gt;)&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="c1"&gt;// prints (x, y)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;변수를 초기화하는데 &lt;code&gt;var&lt;/code&gt;랑 &lt;code&gt;val&lt;/code&gt;이 같이 쓰였다. 느낌상으로는 &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;이나 동일할꺼같은데 같은걸 다른곳에서 다르게 사용할 필요가 없을꺼니 구글검색.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/4437373/use-of-def-val-and-var-in-scala"&gt;Use of def, val, and var in scala&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;역시 나랑 같은 생각을 하는 사람이 있을 줄알았지. 그것도 영어잘하는 :). 그런데 여기는 &lt;code&gt;def&lt;/code&gt;도 들어가있다. 메소드는 왜&amp;hellip; 메소드를 할당할때에도 쓸수 있어서 그런건가..&lt;br&gt;
암튼 답변 내용은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;def&lt;/code&gt;: 메소드, &lt;em&gt;immutable label&lt;/em&gt;, &lt;strong&gt;lazily evaluated&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;
&lt;span class="n"&gt;res2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;something_=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;$iw&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;val&lt;/code&gt;: 상수, &lt;em&gt;immutable label&lt;/em&gt;, &lt;strong&gt;eagerly/immediately evaluated&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;somethingelse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;somethingelse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;:&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;something_=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;$iw&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="n"&gt;^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt;: 변수, &lt;em&gt;mutable variable&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;

&lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;aVariable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;개인적으로는 &lt;a href="https://stackoverflow.com/a/33066906/978762"&gt;두번째 답&lt;/a&gt;이 마음에 든다. &lt;/p&gt;</content><category term="Develop"></category><category term="scala"></category><category term="value"></category></entry><entry><title>Pyup</title><link href="https://ujuc.github.io/2017/07/21/pyup/" rel="alternate"></link><published>2017-07-21T01:10:25+09:00</published><updated>2017-07-21T01:10:25+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-07-21:/2017/07/21/pyup/</id><summary type="html">&lt;p&gt;찾았다. Python 패키지 업그레이드 PR 날리는 서비스.&lt;/p&gt;</summary><content type="html">&lt;p&gt;ruby에서 gem 업그레이드를 찾아서 repo에 PR을 보내주는 &lt;a href="https://www.deppbot.com/"&gt;deppbot&lt;/a&gt;이 있다. 그것을 Python에서도 사용이 가능한 서비스를 찾고 있었는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.git-pull.com"&gt;git-pull&lt;/a&gt;에서 &amp;lsquo;Django vs Flask&amp;rsquo;를 읽다가 &lt;a href="https://readthedocs.org/"&gt;Read the Docs&lt;/a&gt; 서비스를 이용해서 블로그를 서비스를 하고 있기에&amp;hellip; repo 구경갔더니&amp;hellip; &lt;a href="https://pyup.io/"&gt;pyup&lt;/a&gt; 서비스를 이용해서 pip 패키지 업그레이드를 찾아서 repo에 PR을 보내주는 서비스를 사용하고 있네&amp;hellip;&lt;/p&gt;
&lt;h2 id="pyup"&gt;Pyup&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pyup.io/docs/"&gt;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;사용법은 간단하다 깃으로 가입을 한다. 퍼블릭 레포로 한다. 아니면 돈내고&amp;hellip;&lt;br&gt;
패키지 업그레이드할 repo를 등록한다. 핀을 으로 박을 패키지를 등록해주면 알아서 한다고 한다.&lt;/p&gt;
&lt;p&gt;만약, 특정 패키지들은 업글을 하고 싶지 않다면 &lt;a href="https://pyup.io/docs/filter/"&gt;filter&lt;/a&gt; 항목을 보고 코멘트를 두면 된단다.&lt;/p&gt;
&lt;p&gt;아무리봐도 복잡한건 없다만&amp;hellip; 매번 PR로 인한 인스턴스 값이 있을거니까&amp;hellip; 그거낸다 생각하고 유료 사용자가 되는 방법도&amp;hellip;&lt;/p&gt;
&lt;p&gt;뭘 달아보지&amp;hellip;&lt;/p&gt;</content><category term="Develop"></category><category term="python"></category><category term="dependency"></category><category term="update"></category></entry><entry><title>direnv</title><link href="https://ujuc.github.io/2017/02/08/direnv/" rel="alternate"></link><published>2017-02-08T20:44:05+09:00</published><updated>2017-02-08T20:44:05+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-02-08:/2017/02/08/direnv/</id><summary type="html">&lt;p&gt;이것 참&amp;hellip; 결국 env 종류를 다 돌고 있다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;이번에 소개할 direnv 는 이상한 모임에서 autoenv 를 올리고 난뒤 &lt;a href="http://raccoonyy.github.io/"&gt;@raccoony&lt;/a&gt;님께서 알려주셨다. 오홍 신기한거 많다.&lt;/p&gt;
&lt;h3 id="direnv"&gt;&lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;홈페이지는 제목을 누르면 연결이되고 깃허브 주소는 &lt;a href="https://github.com/direnv/direnv"&gt;direnv/direnv&lt;/a&gt; 이다. 신기한건 go로 작성이 되었네&amp;hellip; 마지막 커밋이 이글 쓰는 날 기준으로 10일전!&lt;/p&gt;
&lt;p&gt;다른 env 프로그램들과 비슷하게 이건 셸에서 사용하는 환경변수를 변경할 수 있도록 도와준다.&lt;br&gt;
코드에는 넣지 못하는 환경변수들을 셸에 &lt;code&gt;.bashrc&lt;/code&gt; 나 &lt;code&gt;.profile&lt;/code&gt; 에 모든 곳에서 사용하는 경우가 생기는데, 이걸 쓰면 프로젝트마다 다른 내용을 생성하여 보안을 높힐 수 있는 기회가 된다. (모든 보안은 사람이 행하는 보안을 제외하고&amp;hellip; 직접 OS에 들어와서 까는건 어쩔 수 없잖아&amp;hellip;)&lt;/p&gt;
&lt;h4 id="_1"&gt;설치&lt;/h4&gt;
&lt;h5 id="_2"&gt;빠지지 않는 메뉴얼 설치!&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/direnv/direnv
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;direnv
$&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
&lt;span class="c1"&gt;# or symlink ./direnv into the $PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id="brew"&gt;brew&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;direnv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;리눅스 패키지도 있다고 하니 사용하는 것에 있는지 검색해보고 설치하도록 하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;사용&lt;/h4&gt;
&lt;p&gt;우선 사용한 셸 구성 파일에 다음 내용들을 넣어준다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval &amp;quot;$(direnv hook bash)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval &amp;quot;$(direnv hook zsh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval (direnv hook fish)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/.cshrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;eval `direnv hook tcsh`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;다음으로는 다음과 같이 설정해주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;playground&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envrc&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envrc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blocked&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;approve&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;its&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envrc&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PS2&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unloading&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;playground&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;envrc&lt;/span&gt;
&lt;span class="n"&gt;direnv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;PS2&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;사용법은 간단하다.&lt;/p&gt;
&lt;p&gt;그런데 이걸 쓰는 이유는 코드에 자동으로 생성하는 비번이나 아니면 Auth token 등을 넣으실껀데&amp;hellip;&lt;br&gt;
절대로 git 에는 올리지 말길&amp;hellip; 꼭 &lt;code&gt;.gitignore&lt;/code&gt; 설정해서 사용하도록 하자.&lt;/p&gt;
&lt;p&gt;더 자세한건 홈페이지에서!!&lt;br&gt;
그런데 이거 참 좋당.&lt;br&gt;
이제 어디서 쓰써볼까나&amp;hellip;&lt;/p&gt;</content><category term="Develop"></category><category term="env"></category><category term="shell"></category><category term="environment"></category></entry><entry><title>vim 빌드해보자</title><link href="https://ujuc.github.io/2017/01/28/vim_bir-deu-hae-bo-ja/" rel="alternate"></link><published>2017-01-28T22:46:29+09:00</published><updated>2017-01-28T22:46:29+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-01-28:/2017/01/28/vim_bir-deu-hae-bo-ja/</id><summary type="html">&lt;p&gt;이번에 플러그인을 사용하기 위해서 했던 작업들을 구성해보자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;vim 플러그인중 jedi-vim 을 사용하는데. 설치된 vim 에서 python 플러그가 켜있지 않아 관련되서 플러그인을 사용하지 않는다는 아래와 같은 에러 메시지를 뿜고 있었다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vim&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;failed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;setup_py_version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Vim&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py3file&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;init_python&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]..&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;SNR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="n"&gt;_init_python&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;]..&lt;/span&gt;&lt;span class="n"&gt;jedi&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;setup_py_version&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="ubuntu"&gt;Ubuntu&lt;/h2&gt;
&lt;p&gt;회사에서는 ubuntu에서 개발 중이라 vim에 관련된 설정을 추가해주고 해야됐다.&lt;br&gt;
가끔 열어보는 vim이지만 그래도 정말 급할때는 이거라도 설치해서 사용하니 구성을 해놓는걸로..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;해당 구성은 &lt;a href="https://github.com/Valloric/YouCompleteMe/wiki/Building-Vim-from-source"&gt;Building Vim from source&lt;/a&gt; 를 이용해서 구성하는 것으로 했다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;vim을 빌드하기 전에 dev 패키지를 설치해준다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3-dev ruby-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그리고 기존 패키지로 설치되어 있는 vim을 삭제한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt remove vim vim-runtime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vim 코드를 받고 컴파일을 해주자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/vim/vim.git
cd vim
./configure --with-features=huge --enable-multibyte \
            --enable-rubyinterp=yes \
            --enable-python3interp=yes \
            --enable-cscope
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;설치가 제대로 되었는지 확인하려면 &lt;code&gt;vim --version&lt;/code&gt; 으로 확인하면 된다.&lt;/p&gt;
&lt;p&gt;시스템 기본으로 구성하려면 아래 명령어를 쳐주면된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/editer editer /usr/bin/vim 1
sudo update-alternatives --set editer /usr/bin/vim
sudo update-alternatives --install /usr/bin/vi vi /usr/bin/vim 1
sudo update-alternatives --set vi /usr/bin/vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="mac"&gt;Mac&lt;/h2&gt;
&lt;p&gt;Mac OS에서는 brew를 사용해서 설치하면된다. 설치할때 옵션을 붙여주면 되는데 그 옵션은 다음에서 처럼 확인이 가능하다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew options vim
--with-client-server
    Enable client/server mode
--with-custom-perl
    Build with a custom Perl instead of the Homebrew version.
--with-custom-python
    Build with a custom Python 2 instead of the Homebrew version.
--with-custom-ruby
    Build with a custom Ruby instead of the Homebrew version.
--with-lua
    Build vim with lua support
--with-luajit
    Build with luajit support
--with-mzscheme
    Build vim with mzscheme support
--with-override-system-vi
    Override system vi
--with-python3
    Build vim with python3 instead of python[2] support
--with-tcl
    Build vim with tcl support
--without-nls
    Build vim without National Language Support (translated messages, keymaps)
--without-perl
    Build vim without perl support
--without-python
    Build vim without python support
--without-ruby
    Build vim without ruby support
--HEAD
    Install HEAD version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이후 설치할때 필요한 옵션에 대해서 추가해주면된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew install vim --with-client-server --with-override-system-vi --with-python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그리고 이 옵션은 다음번 vim 업데이트에도 반영이 되는 사안이니 한번만 설정해서 설치해주기만 하면된다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;솔직히 리눅스에서는 내가 빌드를 할일이 없다. 빌드를 한다는건 내가 그 프로그램에 대해서 깊게 알고 있어야되고 그것들을 하나씩 변경을가하는 것이라 생각했었고, 몇몇 프로그램은 그정도까지 손을 안되더라도 구성에서 변경이 가능했으니까&amp;hellip;&lt;br&gt;
이번에 vim 빌드하면서 어쩔 수 없구나를 느끼게되고&amp;hellip;&lt;br&gt;
brew 참 편한데 옵션이 많지는 않구나라는&amp;hellip; 그리고 저것말고는 딱히 추가할 이유가 없긴해서&amp;hellip;&lt;br&gt;
linux-brew 에서는 어떻게 될련지 모르겠지만 그것까지는 사용하지 않고 있어서 작성하지 않았다.&lt;/p&gt;</content><category term="Develop"></category><category term="dev"></category><category term="vim"></category><category term="build"></category><category term="ubuntu"></category><category term="mac"></category></entry><entry><title>autoenv 설정</title><link href="https://ujuc.github.io/2017/01/21/autoenv_seor-jeong/" rel="alternate"></link><published>2017-01-21T16:40:06+09:00</published><updated>2017-01-21T16:40:06+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2017-01-21:/2017/01/21/autoenv_seor-jeong/</id><summary type="html">&lt;p&gt;컴퓨터를 밀었다. env 구성을 해야되는데 &lt;code&gt;autoenv&lt;/code&gt; 를 사용하면 해당 프로젝트로 들어가면 자동으로 해준다기에 설정을 했다.&lt;/p&gt;</summary><content type="html">&lt;h2 id="authenv"&gt;&lt;code&gt;authenv&lt;/code&gt; 설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트 url: &lt;a href="https://github.com/kennethreitz/autoenv"&gt;kennethreitz/autoenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 맥에서 설치하는 &lt;code&gt;brew install autoenv&lt;/code&gt; 로 설치한다. 딴걸로 써볼려고도 했었는데&amp;hellip; &lt;code&gt;brew&lt;/code&gt; 하나로 구성해서 관리하는게 더 좋다.&lt;br&gt;
셸에도 넣어주자. &lt;code&gt;zsh&lt;/code&gt; 를 사용하니 &lt;code&gt;~/.zshrc&lt;/code&gt; 에 &lt;code&gt;source $(brew --prefix autoenv)/activate.sh&lt;/code&gt; 를 넣어두게 되면 쉽다.&lt;/p&gt;
&lt;h2 id="_1"&gt;설정&lt;/h2&gt;
&lt;p&gt;블로그를 &lt;code&gt;pelican&lt;/code&gt; 으로 구성해서 작성하다보니 &lt;code&gt;pyenv&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt; 설정해서 패키지 설치 파일이 필요해서 구성했다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# ujuc.github.io

source ../env/blog/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;다 좋은데 다른 폴더로 가거나 다른 프로젝트로 갔을때&amp;hellip; 문제가 생길 수 있어서 끄는 방법을 찾았다. 상위 폴더에 다음 &lt;code&gt;.evn&lt;/code&gt;를 만들어서 넣어주면 된다. 개발하면서 자주가는 곳에다가는 꼭 박아두자. (&lt;a href="https://github.com/kennethreitz/autoenv/issues/30#issuecomment-26832177"&gt;원문&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;#&lt;/span&gt; .env

if [ -n &amp;quot;$VIRTUAL_ENV&amp;quot; ] ; then
    deactivate
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Develop"></category><category term="autoenv"></category><category term="env"></category><category term="setup"></category></entry><entry><title>Pendulum 버전업</title><link href="https://ujuc.github.io/2016/12/28/pendulum_beo-jeon-eob/" rel="alternate"></link><published>2016-12-28T23:36:13+09:00</published><updated>2016-12-28T23:36:13+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-12-28:/2016/12/28/pendulum_beo-jeon-eob/</id><summary type="html">&lt;p&gt;datetime 패키지중 하나인 Pendulum이 업그래이드 했다. 그래서&amp;hellip; 에러가 발생했다&lt;/p&gt;</summary><content type="html">&lt;p&gt;기본 패키지 인 datetime 이 영 불편해서 회사 프로젝트에서 사용중이던 date 파일을 &lt;a href="https://pendulum.eustace.io"&gt;Pendulum&lt;/a&gt;으로 변경하여 구성하고 잘 쓰고 있었는데&amp;hellip; 패키지 업그레이드로 사용하던 기능이 deprecate 되어버렸다.&lt;br&gt;
아직 정식 1.0 버전이 나오지 않았기에 내용들이 계속 바뀌고 있다보니&amp;hellip; 속이&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="070"&gt;0.7.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pendulum.eustace.io/history/#0-7"&gt;원본&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added"&gt;Added&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; 클라스 추가됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time&lt;/code&gt; 플라스 추가됨.&lt;/li&gt;
&lt;li&gt;Python 3.6에서 소개된 &lt;a href="https://www.python.org/dev/peps/pep-0495/#the-fold-attribute"&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; 속성에대한 실험적 지원이 추가됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval&lt;/code&gt; 클라스에 &lt;code&gt;remaining_days&lt;/code&gt; 속성이 추가됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pedulum&lt;/code&gt; 클라스에 &lt;code&gt;int_timestamp&lt;/code&gt; 속성을 추가하여 지금은 사용되지 않는 &lt;code&gt;timestamp&lt;/code&gt; 속성에 대한 동작을 진행함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start_of()&lt;/code&gt;/&lt;code&gt;end_of()&lt;/code&gt; 에서 새로운 &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt; 단위를 지원.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;astimezone()&lt;/code&gt;에 시간대 문자열을 지원함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in_words()&lt;/code&gt;는 다른 단위를 사용할 수 없을때 잠깐 보여짐.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="changed"&gt;Changed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Period&lt;/code&gt; 속성이 (특히 &lt;code&gt;years&lt;/code&gt;와 &lt;code&gt;months&lt;/code&gt;) 정확히 표현.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval.seconds&lt;/code&gt;는 호환성을 위해 &lt;code&gt;timedelta&lt;/code&gt;와 같은 나머지 초에 대한 전체 값을 반환. &lt;code&gt;remaining_seconds&lt;/code&gt;를 사용하면 이전에 작동하였던 것과 같이 작동함.&lt;/li&gt;
&lt;li&gt;일반적인 형식에대한 구문 분석 성능이 향상됨.&lt;/li&gt;
&lt;li&gt;더이상 &lt;code&gt;pytz&lt;/code&gt; 라이브러리를 사용하지 않습니다. 타임존 데이터베이스로 &lt;a href="https://github.com/sdispater/pytzdata"&gt;pytzdata&lt;/a&gt;)를 사용.&lt;/li&gt;
&lt;li&gt;Locale, 테스트 인스턴스, formatter는 이제 해당 모듈 메소드를 사용할때 모듈 수준이 gobally 수준으로 설정됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deprecated"&gt;Deprecated&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timestamp&lt;/code&gt;는 이제 메소드로 사용되며 더이상 프로퍼티로 사용되지 않음. 다음 버전에서 기본 방법으로 사용될 예정임.&lt;/li&gt;
&lt;li&gt;년, 월과 관련된 &lt;code&gt;Interval&lt;/code&gt; 속성과 메소드는 더이상 사용되지 않음.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Interval.days_exclued_weeks&lt;/code&gt;는 더 이상 사용되지 않음. 대신 &lt;code&gt;remaining_days&lt;/code&gt;를 사용.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fixed"&gt;Fixed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 시간대를 불러올 때 발생하는 예외가 수정됨.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end_of('day')&lt;/code&gt;는 이제 마이크로 초를 999999으로 바르게 설정함.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Period&lt;/code&gt; 인스턴스 프로퍼티 정확도가 향상됨.&lt;/li&gt;
&lt;li&gt;일부 시간대에서 Pendulum 인스턴스를 초기화할때 정확도가 밀리초 단위로 수정되었음.&lt;/li&gt;
&lt;li&gt;Period는 &lt;code&gt;pickle&lt;/code&gt;로 직렬화가 가능함.&lt;/li&gt;
&lt;li&gt;시간 단위를 변경하는 &lt;code&gt;minute_()&lt;/code&gt;, &lt;code&gt;second_()&lt;/code&gt;, &lt;code&gt;microsecond_()&lt;/code&gt; 에대한 setter 가 수정됨.&lt;/li&gt;
&lt;li&gt;Windows 지원이 수정됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id="080"&gt;0.8.0&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pendulum.eustace.io/history/#0-8"&gt;원본&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="added_1"&gt;Added&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;with_date()&lt;/code&gt;와 &lt;code&gt;with_tim()&lt;/code&gt;을 대신하는 &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;at()&lt;/code&gt; 메소드가 추가됨.&lt;/li&gt;
&lt;li&gt;구문 분석된 문자열과 일치하는 형식을 얻기위한 &lt;code&gt;parse()&lt;/code&gt;에 &lt;code&gt;strict&lt;/code&gt; 키워드 인수를 추가.&lt;/li&gt;
&lt;li&gt;시간 간격 길이를 제어하기 위한 &lt;code&gt;range()&lt;/code&gt; 메소드에 시간 량을 더하는 기능 추가.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timezone&lt;/code&gt; 클라스에 &lt;code&gt;datetime()&lt;/code&gt; 헬퍼 메소드 추가.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="changed_1"&gt;Changed&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ko.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; 문자열 구문 분석이 개선 됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deprecated_1"&gt;Deprecated&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;with_date()&lt;/code&gt;, &lt;code&gt;with_time()&lt;/code&gt;은 더이상 사용되지 않고, &lt;code&gt;on()&lt;/code&gt;, &lt;code&gt;at()&lt;/code&gt; 으로 사용.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;create_from_date()&lt;/code&gt;, &lt;code&gt;create_from_time()&lt;/code&gt;은 더이상 사용되지 않고, &lt;code&gt;create()&lt;/code&gt;으로 사용.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="pendulum"></category><category term="datetime"></category><category term="date"></category><category term="module"></category></entry><entry><title>파이썬으로 내가 쓸 셸 만들기</title><link href="https://ujuc.github.io/2016/07/08/pa-i-sseon-eu-ro_nae-ga_sseur_syer_man-deur-gi/" rel="alternate"></link><published>2016-07-08T00:29:00+09:00</published><updated>2016-07-08T00:29:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-07-08:/2016/07/08/pa-i-sseon-eu-ro_nae-ga_sseur_syer_man-deur-gi/</id><summary type="html">&lt;p&gt;python &lt;code&gt;cmd&lt;/code&gt; 라이브러리를 가지고서 셸을 만들어서 작업을 할까라는 생각을 가지고 있었는데&amp;hellip; 다른 방법이지만 그것을 실제로 진행한 내용이 있어서 정리용.&lt;/p&gt;</summary><content type="html">&lt;p&gt;매주 python관련 뉴스들이 오는데 이번에는 흥미로운 것이 있어서 이렇게 남긴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackercollider.com/articles/2016/07/05/create-your-own-shell-in-python-part-1/"&gt;Create Your Own Shell in Python: Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackercollider.com/articles/2016/07/06/create-your-own-shell-in-python-part-2/"&gt;Create Your Own Shell in Python: Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/supasate/yosh"&gt;supasate/yosh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;yosh&lt;/code&gt; 프로젝트로 간단히 Python을 이용해서 셸을 구성할 수 있도록 도와준다. 그리고 이것을 이용해서 조금이나마 편하게 사용할 수 있음을 이야기해주고도 있다.&lt;br&gt;
다른 것보다는 손쉽게 내가 원하는 셸을 만들어서 사용할 수 있다는 점과 내가 2014년에 PyconKR에서 봤던 것들로 구성만 하고 있엇던 &lt;a href="https://docs.python.org/3.5/library/cmd.html"&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt; 라이브러리가 아닌 &lt;a href="https://docs.python.org/3.5/library/shlex.html"&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; 라이브러리를 사용해서 셸에서 입력하는 것과 유사하게 만들어주는 것으로 보인다.&lt;/p&gt;
&lt;p&gt;첫번째로 부럽다. 생각만했지 실행으로 옮기지는 못했다. 내가 사용하는 셸 프로그램들을 묶어서 내가 원하는 생각대로 실행할 수 있도록 하는 것. 쉽지 않다고 생각만 했지. 언젠가 하려고만 했지. 이렇게까지 만들 수 있으리라 생각하지 못했다.&lt;/p&gt;
&lt;p&gt;한번 도전해봐야겠다. 처음 생각했던 &lt;a href="https://docs.python.org/3.5/library/cmd.html"&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt; 라이브러리로 기본 라이브러리 구성을 남겨두고, 작업을 진행할 수 있도록.&lt;/p&gt;</content><category term="Develop"></category><category term="python"></category><category term="shell"></category><category term="yosh"></category><category term="Your Own SHell"></category></entry><entry><title>Vim ColorColumn Settings</title><link href="https://ujuc.github.io/2016/04/26/vim-colorcolumn-settings/" rel="alternate"></link><published>2016-04-26T22:04:00+09:00</published><updated>2016-04-26T22:04:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-04-26:/2016/04/26/vim-colorcolumn-settings/</id><summary type="html">&lt;p&gt;vim에서 코드의 길이를 줄을 그어 쉽게 확인하자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;나같은 경우엔, &lt;code&gt;git commit&lt;/code&gt; 명령어를 실행하면 기본 에디터로 &lt;code&gt;vim&lt;/code&gt;으로 구성해뒀다.&lt;br&gt;
그러다보니 가끔 길이를 확인해서 커밋을 해야되는 경우가 발생하는데&amp;hellip;&lt;/p&gt;
&lt;p&gt;그나마 기본적으로 설정해놓은 80줄은 쉽게 찾으나&amp;hellip; 커밋 제목인 50자, 커밋 메시지&lt;br&gt;
제한인 72자를 확인하는게 쉽지가 않아서 줄을 그어놓고 사용하기위해 설정을 한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set cc=51,73,81,121
highlight ColorColumn ctermbg=17 guibg=navyblue
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 설정하면 아래와 같이 줄이 그어져있는 모습을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim_ex" src="https://ujuc.github.io/img/2016-04-26_vim.png"&gt;&lt;/p&gt;
&lt;p&gt;이건 덤&amp;hellip;&lt;/p&gt;
&lt;p&gt;vim에서 사용하는 색이름과 설정값에 대해서 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim"&gt;Xterm256 color names for console Vim&lt;/a&gt;&lt;/p&gt;</content><category term="Develop"></category><category term="vim"></category><category term="vimrc"></category><category term="colorcolumn"></category><category term="cc"></category></entry><entry><title>Ubuntu-Debian 패키지 매니저 apt 사용해보기</title><link href="https://ujuc.github.io/2016/04/17/ubuntu-debian-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80-apt-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0/" rel="alternate"></link><published>2016-04-17T12:23:00+09:00</published><updated>2016-04-17T12:23:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-04-17:/2016/04/17/ubuntu-debian-패키지-매니저-apt-사용해보기/</id><summary type="html">&lt;p&gt;하위 명령어 &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;apt-cache&lt;/code&gt;를 사용하지 않고 패키지 매너저 &lt;code&gt;apt&lt;/code&gt;를 사용하는 방법.&lt;/p&gt;</summary><content type="html">&lt;p&gt;기본적으로 &lt;code&gt;apt&lt;/code&gt; 패키지가 설치되어있었지만&amp;hellip; 사용하지 않았었다. 여기저기서 &lt;code&gt;apt-get&lt;/code&gt; 같은 명령어를 알려줬기에&amp;hellip; 그리고 얼마안되기도 했고, 그 간단한 사용법에 대해서 남겨두려고 한다.&lt;/p&gt;
&lt;p&gt;참고는 &lt;a href="http://www.tecmint.com/apt-advanced-package-command-examples-in-ubuntu/"&gt;15 Examples of How to Use New Advanced Package Tool (APT) in Ubuntu/Debian&lt;/a&gt; 을 사용함. 기본적으로 되는 &lt;a href="http://manpages.ubuntu.com/manpages/xenial/man8/apt.8.html"&gt;Ubuntu man&lt;/a&gt; 페이지는 끼고 살자&amp;hellip;&lt;/p&gt;
&lt;h2 id="1"&gt;1. 패키지 설치&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;glances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;항상 사용하던건 &lt;code&gt;apt-get&lt;/code&gt; 명령어로 설치를 하는거였는데 4글자 줄엇다!&lt;br&gt;
&lt;code&gt;sudo aptitude install&lt;/code&gt; 로도 가능하다만&amp;hellip; 이렇게 하는 사람들 잘못봤다.&lt;/p&gt;
&lt;h2 id="2"&gt;2. 패키지가 설치된 위치 확인&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;content&lt;span class="w"&gt; &lt;/span&gt;glances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는 명령어는 &lt;code&gt;dpkg -L&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="3"&gt;3. 패키지 디펜던시 확인&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;depends&lt;span class="w"&gt; &lt;/span&gt;glances
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는 명령어가 &lt;code&gt;apt-get check&lt;/code&gt;, &lt;code&gt;dpkg -C&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="4"&gt;4. 패키지 찾기&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;search&lt;span class="w"&gt; &lt;/span&gt;openstack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는 명령어는 &lt;code&gt;apt-cache search&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="5"&gt;5. 패키지 정보 확인&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;show&lt;span class="w"&gt; &lt;/span&gt;firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는 명령어 &lt;code&gt;apt-cache show&lt;/code&gt;, &lt;code&gt;dpkg -p&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="6"&gt;6. 깨진 디펜던시가 있는지 확인&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;check&lt;span class="w"&gt; &lt;/span&gt;firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이거와 대응되는게 있는지 잘모르겠다.&lt;/p&gt;
&lt;h2 id="7"&gt;7. 제공된 패키지에서 빠진 패키지에 대한 목록 보여주기&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;recommends&lt;span class="w"&gt; &lt;/span&gt;apache2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="8"&gt;8. 패키지 버전 체크&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;version&lt;span class="w"&gt; &lt;/span&gt;firefox
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="9"&gt;9. 시스템 패키지 업데이트&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-get update&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="10"&gt;10. 시스템 업그레이드&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-get upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="11"&gt;11. 커널 버전까지 시스템 업그레이드&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;full-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-get dist-upgrade&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="12"&gt;12. 사용하지 않는 페키지 삭제&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-get autoremove&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="13"&gt;13. 다운로드된 페키지에서 오래된 저장소 삭제&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;autoclean
sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-get clean&lt;/code&gt;, &lt;code&gt;apt-get autoclean&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="14"&gt;14. 패키지 구성파일까지 삭제&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;purge&lt;span class="w"&gt; &lt;/span&gt;glance
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;apt-purge&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="15-deb-160502"&gt;15. deb 패키지 설치 (작동이 안된다&amp;hellip; -160502)&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;deb&lt;span class="w"&gt; &lt;/span&gt;atom-amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;대응되는건 &lt;code&gt;dpkg&lt;/code&gt; 에서 찾으면될듯..&lt;/p&gt;
&lt;h2 id="16"&gt;16. 사용법은&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;apt&lt;/code&gt; 사용법을 찾아서 작업하면 될것으로 보여짐.&lt;/p&gt;
&lt;h2 id="_1"&gt;맺음&lt;/h2&gt;
&lt;p&gt;동일한 명령어가 여러가지 존재하고 사용하는 방법에 따라 달라지는 것으로 보여지는데&amp;hellip;&lt;br&gt;
패키지 메니저가 &lt;code&gt;dpkg&lt;/code&gt;, &lt;code&gt;aptitude&lt;/code&gt;, &lt;code&gt;apt&lt;/code&gt;로 나눠져있으니 편한걸로.. 그리고 설치되어있는걸로 사용하면될 듯.&lt;/p&gt;</content><category term="Develop"></category><category term="ubuntu"></category><category term="debian"></category><category term="apt"></category><category term="system"></category></entry><entry><title>pysftp 간략 사용기</title><link href="https://ujuc.github.io/2016/02/29/pysftp-%EA%B0%84%EB%9E%B5-%EC%82%AC%EC%9A%A9%EA%B8%B0/" rel="alternate"></link><published>2016-02-29T21:55:00+09:00</published><updated>2016-02-29T21:55:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-29:/2016/02/29/pysftp-간략-사용기/</id><summary type="html">&lt;p&gt;pysftp를 사용하여 파일을 가져오는 것에 대해 이야기한다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;처음 작성해놓은게 2013년 11월 달이다. 그때 사용한 것을 Evernote 정리중 확인하여 남겨뒀는데 새로 써야겠다. 다 바겼다.ㅡ.ㅡ....&lt;/p&gt;
&lt;p&gt;우선 이 패키지는 14년 5월 이후로 &lt;a href="https://pypi.python.org/pypi/pysftp"&gt;pypi 프로젝트&lt;/a&gt;에서는 업로드가 되고 있지 않으며, &lt;a href="https://bitbucket.org/dundeemt/pysftp"&gt;Project repo&lt;/a&gt;의 업로드는 이루워지고 있으며, 3.4까지 테스팅을 해봣단다. 파일만 올리기위해서 사용했던 라이브러리라 간단히 sftp를 이용하여 파일을 올리고 받기를 원한다면 괜찮을 듯.&lt;/p&gt;
&lt;h2 id="package"&gt;Package&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;SFTP를 python에서 직접 사용할 수 있도록 도와주며, 내부는 C로 구성되어있다.&lt;ul&gt;
&lt;li&gt;그 덕분에 설치시 &lt;code&gt;python-dev&lt;/code&gt; 페키지가 필요하다. (Ubuntu 리눅스 기준)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용하는 원격지에 ssh가 설치되어있는지 확인하자. 가끔 설치가 안되어있는 경우도 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_1"&gt;사용법&lt;/h2&gt;
&lt;p&gt;간단히 적겠다. 모자르면 &lt;a href="http://pysftp.readthedocs.org/en/release_0.2.8/cookbook.html"&gt;문서&lt;/a&gt;를 보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pysftp&lt;/span&gt;

&lt;span class="n"&gt;cinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hostname&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;private_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/path/to/keyfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2222&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pysftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;cinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mybackupfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myoriginfile&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sftp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;there&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이정도 주석 달다가 지웠다. 그것이 없어도 sftp를 사용하고 있다면 간단히 상요할 정도로 sftp 명령어에서 사용하는 내용들을 추가해놓았다.&lt;/p&gt;
&lt;p&gt;아직 pypi 측으로 버전업된 것이 반영되지 않아 새버전을 사용하고 싶으면 레포로 가서 작업을 진행하는 것을 추천한다.&lt;/p&gt;</content><category term="Develop"></category><category term="python"></category><category term="sftp"></category><category term="lib"></category></entry><entry><title>git-vendor</title><link href="https://ujuc.github.io/2016/02/20/git-vender/" rel="alternate"></link><published>2016-02-20T21:02:00+09:00</published><updated>2016-02-20T21:02:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-02-20:/2016/02/20/git-vender/</id><summary type="html">&lt;p&gt;git-vendor. git 확장이며 git-subtree를 이용하여 vendor 소스를 관리할 수 있도록 도와준다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;brew 업그레이드하다가 &lt;code&gt;git-vender&lt;/code&gt;라는 확장 프로그램이 보였다. 이건 뭐하는 넘인지 궁금해서 정리한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vender&lt;/code&gt;는 git 명령어를 이용하여 vendor 소스를 관리할 수 있도록 도와주는 확장이다. &lt;code&gt;git-subtree&lt;/code&gt;를 이용해서 소스를 체크 아웃하고 업데이트된 내용들을 관리할 수 있도록 해준다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git-vendor&lt;/code&gt;는 golang에서 vendor 종속성을 관리하는 패턴에 따라서 작업을 진행한다고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연관되는 소스들은 &lt;code&gt;vendor/&lt;/code&gt; 디렉토리에 저장된다.&lt;/li&gt;
&lt;li&gt;프로젝트에대한 전체 위치로 폴더가 생성되게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="_1"&gt;기본 명령어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git vendor add [--prefix &amp;lt;dir&amp;gt;] &amp;lt;name&amp;gt; &amp;lt;repository&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : 새로운 vendor 연관 소스 추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor list [&amp;lt;name&amp;gt;]&lt;/code&gt; : 현재 레포에 있는 vendor 연관 소스 보기.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git vendor update &amp;lt;name&amp;gt; [&amp;lt;ref&amp;gt;]&lt;/code&gt; : vendor 연관 소스 업데이트.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설치는 알아서&amp;hellip;&lt;/p&gt;
&lt;h3 id="_2"&gt;예제&lt;/h3&gt;
&lt;p&gt;Readme에 있는 예제를 가져왔다. 만들어보는 것보다 낫다 판단해서. 아직 &lt;code&gt;git-subtree&lt;/code&gt;를 모르겠는데 뭐&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Chekout github.com/brettlangdon/forge@v0.1.6 를 가져온다.&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;vendor&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;forge&lt;span class="w"&gt; &lt;/span&gt;https://github.com/brettlangdon/forge&lt;span class="w"&gt; &lt;/span&gt;v0.1.6
+&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;subtree&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;--prefix&lt;span class="w"&gt; &lt;/span&gt;vendor/github.com/brettlangdon/forge&lt;span class="w"&gt; &lt;/span&gt;--message&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Add &amp;quot;forge&amp;quot; from &amp;quot;https://github.com/brettlangdon/   forge@v0.1.6&amp;quot;&lt;/span&gt;

&lt;span class="s1"&gt;git-vendor-name: forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-dir: vendor/github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-repository: https://github.com/brettlangdon/forge&lt;/span&gt;
&lt;span class="s1"&gt;git-vendor-ref: v0.1.6&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;https://github.com/brettlangdon/forge&lt;span class="w"&gt; &lt;/span&gt;v0.1.6&lt;span class="w"&gt; &lt;/span&gt;--squash
git&lt;span class="w"&gt; &lt;/span&gt;fetch&lt;span class="w"&gt; &lt;/span&gt;https://github.com/brettlangdon/forge&lt;span class="w"&gt; &lt;/span&gt;v0.1.6
warning:&lt;span class="w"&gt; &lt;/span&gt;no&lt;span class="w"&gt; &lt;/span&gt;common&lt;span class="w"&gt; &lt;/span&gt;commits
remote:&lt;span class="w"&gt; &lt;/span&gt;Counting&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;405&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
remote:&lt;span class="w"&gt; &lt;/span&gt;Total&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;405&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;delta&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;pack-reused&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;404&lt;/span&gt;
Receiving&lt;span class="w"&gt; &lt;/span&gt;objects:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;405&lt;/span&gt;/405&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;68&lt;/span&gt;.31&lt;span class="w"&gt; &lt;/span&gt;KiB&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;bytes/s,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
Resolving&lt;span class="w"&gt; &lt;/span&gt;deltas:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;227&lt;/span&gt;/227&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;done&lt;/span&gt;.
From&lt;span class="w"&gt; &lt;/span&gt;https://github.com/brettlangdon/forge
&lt;span class="w"&gt; &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt;               &lt;/span&gt;v0.1.6&lt;span class="w"&gt;     &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;FETCH_HEAD
Added&lt;span class="w"&gt; &lt;/span&gt;dir&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vendor/github.com/brettlangdon/forge&amp;#39;&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 목록으로보면..&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;vendor&lt;span class="w"&gt; &lt;/span&gt;list
forge@v0.1.6:
&lt;span class="w"&gt;    &lt;/span&gt;name:&lt;span class="w"&gt;   &lt;/span&gt;forge
&lt;span class="w"&gt;    &lt;/span&gt;dir:&lt;span class="w"&gt;    &lt;/span&gt;vendor/github.com/brettlangdon/forge
&lt;span class="w"&gt;    &lt;/span&gt;repo:&lt;span class="w"&gt;   &lt;/span&gt;https://github.com/brettlangdon/forge
&lt;span class="w"&gt;    &lt;/span&gt;ref:&lt;span class="w"&gt;    &lt;/span&gt;v0.1.6
&lt;span class="w"&gt;    &lt;/span&gt;commit:&lt;span class="w"&gt; &lt;/span&gt;3335840c5f0ad9e821006588f1b16a3385d9c318

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 업데이트를 하면&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;vendor&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;forge&lt;span class="w"&gt; &lt;/span&gt;v0.1.7
From&lt;span class="w"&gt; &lt;/span&gt;https://github.com/brettlangdon/forge
&lt;span class="w"&gt;    &lt;/span&gt;*&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt;               &lt;/span&gt;v0.1.7&lt;span class="w"&gt;     &lt;/span&gt;-&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;FETCH_HEAD
Merge&lt;span class="w"&gt; &lt;/span&gt;made&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recursive&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;strategy.
&lt;span class="w"&gt; &lt;/span&gt;vendor/github.com/brettlangdon/forge/forge_test.go&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;++
&lt;span class="w"&gt; &lt;/span&gt;vendor/github.com/brettlangdon/forge/scanner.go&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;++++
&lt;span class="w"&gt; &lt;/span&gt;vendor/github.com/brettlangdon/forge/test.cfg&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;+
&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;changed,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;insertions&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 확인하면..&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;vendor&lt;span class="w"&gt; &lt;/span&gt;list
forge@v0.1.7:
&lt;span class="w"&gt;    &lt;/span&gt;name:&lt;span class="w"&gt;   &lt;/span&gt;forge
&lt;span class="w"&gt;    &lt;/span&gt;dir:&lt;span class="w"&gt;    &lt;/span&gt;vendor/github.com/brettlangdon/forge
&lt;span class="w"&gt;    &lt;/span&gt;repo:&lt;span class="w"&gt;   &lt;/span&gt;https://github.com/brettlangdon/forge
&lt;span class="w"&gt;    &lt;/span&gt;ref:&lt;span class="w"&gt;    &lt;/span&gt;v0.1.7
&lt;span class="w"&gt;    &lt;/span&gt;commit:&lt;span class="w"&gt; &lt;/span&gt;071c5f108e0af39bf67a87fc766ea9bfb72b9ee7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="_3"&gt;관련 페이지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brettlangdon/git-vendor"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://brettlangdon.github.io/git-vendor/"&gt;Manpage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="git"></category><category term="git-vendor"></category><category term="git-subtree"></category><category term="dependencies"></category></entry><entry><title>Stderr check in zshell</title><link href="https://ujuc.github.io/2016/01/27/stderr-check-in-zshell/" rel="alternate"></link><published>2016-01-27T00:57:00+09:00</published><updated>2016-01-27T00:57:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-27:/2016/01/27/stderr-check-in-zshell/</id><summary type="html">&lt;p&gt;zsh 가상환경 설정한대서 계속 걸쩍지근하게 나오는 에러 문구를 없애고&lt;br&gt;
싶었다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Shell로 zsh를 사용중이다. 얼마전부터 개발 환경 설정을 해놓고 이곳저곳에서&lt;br&gt;
쓰다보니 해당 개발 환경이 꾸며져있지 않으면, 없다고 해당 문구가 출력된다.&lt;/p&gt;
&lt;p&gt;&lt;img alt="stderr" src="https://ujuc.github.io/img/2016-01-26_shell_error.png"&gt;&lt;/p&gt;
&lt;p&gt;은근히 신경쓰인다. 만약 두개를 설정해놨는데 둘다 없다면 줄이 두 줄로 늘어난다.&lt;/p&gt;
&lt;p&gt;그래서 찾았다. 찾다보니 내가 무심코 사용했던 내용에대해 조금더 볼 기회가 생긴듯.&lt;/p&gt;
&lt;p&gt;우선 Shell에서 기본 I/O 스트림을 통해서 나오는 값들에대해서 다음 숫자로 제어할&lt;br&gt;
수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center;"&gt;Handle&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Name&lt;/th&gt;
&lt;th style="text-align: center;"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;0&lt;/td&gt;
&lt;td style="text-align: center;"&gt;stdin&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Standard input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;1&lt;/td&gt;
&lt;td style="text-align: center;"&gt;stdout&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Standard output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center;"&gt;2&lt;/td&gt;
&lt;td style="text-align: center;"&gt;stderr&lt;/td&gt;
&lt;td style="text-align: center;"&gt;Standard error&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;간단히 하자.&lt;br&gt;
go가 설치되어 있는지 확인을 한다. 제대로 설치됐다면 stdout으로 설치된 경로가 나올 것이다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="ex1_1" src="https://ujuc.github.io/img/2016-01-26_ex1_1.png"&gt;&lt;/p&gt;
&lt;p&gt;요놈을 안나오게 해보자.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="ex1_2" src="https://ujuc.github.io/img/2016-01-26_ex1_2.png"&gt;&lt;/p&gt;
&lt;p&gt;오~~~&lt;/p&gt;
&lt;p&gt;stderr 값이 나오면 안나오게 할려고 보면&amp;hellip; 이건 설치가 되어있으니&amp;hellip; 없는걸로&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;rbenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="ex2_1" src="https://ujuc.github.io/img/2016-01-26_ex2_1.png"&gt;&lt;/p&gt;
&lt;p&gt;이걸 위와 같이 &lt;code&gt;1&lt;/code&gt; 을 사용하면&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;rbenv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="ex2_2" src="https://ujuc.github.io/img/2016-01-26_ex2_2.png"&gt;&lt;/p&gt;
&lt;p&gt;음&amp;hellip; 출력되는 문구가 stderr로 나오는 건줄 알았는데 아닌갑다. &lt;code&gt;1&lt;/code&gt;로 출력되는걸 막으라했더니&amp;hellip;&lt;/p&gt;
&lt;p&gt;그럼 Python에서는 어디로 나올까?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sub&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;check_rbenv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_rbenv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;음?? 암것도 안나온다&amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;which rbenv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;출력값이 256이라니&amp;hellip; 혹시나 해서 봤더니 8bit밀란다. 저걸 밀면 1이 떨어지는데&amp;hellip;&lt;br&gt;
리눅스에서 반환값이 1이면 비정상 종료일때로 알고 있다. 고로니 저넘은 제대로&lt;br&gt;
실행된 아이가 아니라는 말씀&amp;hellip;&lt;/p&gt;
&lt;p&gt;그럼 &lt;code&gt;which&lt;/code&gt; 명령어를 사용하여 명령어를 실행하게 되면, 정상종료면 위치를&lt;br&gt;
말해줄꺼고 비정상 종료면 stdout으로 없다는 메시지를 남기고 비정상 종료를&lt;br&gt;
시킨다고 해석하면 될듯.&lt;/p&gt;
&lt;p&gt;결국 내가 하고 싶은데로 안되는거네&amp;hellip; 이런!&lt;/p&gt;
&lt;p&gt;다른 방법으로 찾아야지 뭐 별수 있나&amp;hellip; 그래도 이번에 건진건 저렇게 숫자를&lt;br&gt;
사용해서 내가 원하는 값들만 넣을 수 있는 방법을 찾았다는거&amp;hellip; 그정도면 1시간동안&lt;br&gt;
작업한 것에 대한 내용은 될듯.&lt;/p&gt;</content><category term="Develop"></category><category term="zsh"></category><category term="operation"></category></entry><entry><title>`_vim_files: function definition files net found` on zsh</title><link href="https://ujuc.github.io/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/" rel="alternate"></link><published>2016-01-16T22:53:00+09:00</published><updated>2016-01-16T22:53:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2016-01-16:/2016/01/16/vim_files:-function-definition-files-net-found-on-zsh/</id><summary type="html">&lt;p&gt;zsh이 올라가고 난뒤에 vim도 같이 올라갔더니 에러를 뿝네&amp;hellip;&lt;/p&gt;</summary><content type="html">&lt;p&gt;아&amp;hellip; 오랜만에 vim으로 작업을 하려고 탭을 두번 클릭했더니 아래와 같은 에러가 뜬다. 이넘을 어떻게 해야되지.&lt;/p&gt;
&lt;p&gt;&lt;img alt="error!" src="https://ujuc.github.io/img/2016-01-16_error.png"&gt;&lt;/p&gt;
&lt;h3 id="_1"&gt;원인&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zcompdump&lt;/code&gt; 때문이라고 하고, 이건 매번 문제가 있나보다.ㅡ.ㅡ;;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/robbyrussell/oh-my-zsh/issues/518"&gt;github/robbyrusell/oh-my-zsh/issues/518&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_2"&gt;해결방법&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;rm ~/.zcompdump&lt;/code&gt;를 삭제하면 된다고&amp;hellip;&lt;br&gt;
그리고 꼭 하고 난뒤에 &lt;code&gt;exec zsh&lt;/code&gt;를 하도록 하자.&lt;/p&gt;</content><category term="Develop"></category><category term="dev"></category><category term="zsh"></category><category term="vim"></category></entry><entry><title>Git flow, GitHub flow, GitLab flow</title><link href="https://ujuc.github.io/2015/12/16/git-flow-github-flow-gitlab-flow/" rel="alternate"></link><published>2015-12-16T08:50:00+09:00</published><updated>2023-08-26T00:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-12-16:/2015/12/16/git-flow-github-flow-gitlab-flow/</id><summary type="html">&lt;p&gt;Git flow, GitHub flow, GitLab flow 에대해서 좀 알아보자. 머리아프다.&lt;/p&gt;</summary><content type="html">&lt;div class="alert alert-warning d-flex align-items-center m-2" role="alert"&gt;
&lt;p&gt;&lt;i class="fa-solid fa-triangle-exclamation"&gt;&lt;/i&gt; 문서가 업데이트 된지 오래되었습니다. 정리가 필요합니다. 그리고 하나더 여기서 이야기하는 것은 방법론입니다.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;회사에서  &lt;code&gt;git&lt;/code&gt;을 가지고서 버전 관리를 본격적으로 하면서, 너무 많은 부분에서 문제가 발생을 하는 것을 보고 이걸 어떤 방식으로 사용하면 조금 더 꼬이는 것을 방지할 수 있을까라는 생각을 하고 있다. &lt;br&gt;
물론 새로운 프로젝트를 진행하면서 어떤 방법으로 진행하는 것이 맞는 것인지도 필요하기도 했고, 그러다가 &lt;a href="http://koalabot-weirdmeetup.herokuapp.com/slack"&gt;이상한 모임 Slack&lt;/a&gt;에서 관련 이야기가 나오면서 커밋을 하기 위한 방법론 중 하나인 &lt;code&gt;git-flow&lt;/code&gt;의 종류가 3가지나 된다는 것을 보고 이놈들의 다른 점이 무엇인지 어떤 방법에서 편한 것인지에 대한 내용을 확인하고 싶어 졌다.&lt;/p&gt;
&lt;div class="border-top border-bottom border-secondary-subtle"&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-flow"&gt;Git Flow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;구조와 흐름&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#feature"&gt;Feature 브랜치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release"&gt;Release 브랜치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hotfix"&gt;Hotfix 브랜치&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;장점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#github-flow"&gt;GitHub Flow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;특징&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;그럼 어떻게 사용할 것인가?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;장점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;단점&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#gitlab-flow"&gt;GitLab Flow&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#production-branch-with-gitlab-flow"&gt;Production branch with GitLab flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#environment-branches-with-gitlab-flow"&gt;Environment branches with GitLab flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#release-branches-with-gitlab-flow"&gt;Release branches with GitLab flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mergepull-requests-with-gitlab-flow"&gt;Merge/pull requests with GitLab flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#issues-with-gitlab-flow"&gt;Issues with GitLab flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_10"&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_11"&gt;끝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_12"&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="git-flow"&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;Git Flow&lt;/a&gt;&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;Vincent Driessen이 말한 branching model&lt;/a&gt;를 구현한 Git 확장 모듈이다. - &lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본 브랜치는 5가지를 이야기한다. &lt;code&gt;feature &amp;gt; develop &amp;gt; release &amp;gt; hotfix &amp;gt; master&lt;/code&gt; 브랜치가 존재하며, 머지 순서는 앞에서 뒤로 진행된다. &lt;code&gt;release&lt;/code&gt; 브랜치와 &lt;code&gt;hotfix&lt;/code&gt; 브랜치의 경우, &lt;code&gt;develop&lt;/code&gt; 브랜치의 오른쪽에 존재하기에 모두 &lt;code&gt;develop&lt;/code&gt; 브랜치도 머지를 하도록 구성이 되어있다.&lt;/p&gt;
&lt;p&gt;Vincent Driessen은 관련하여 스크립트로 명령을 구성해놨으며, 그냥 설치를 하여 CLI에서 명령으로 작업을 하여도 되고, GUI 툴들에서 기본 내장 git-flow 명령이나 플러그인을 설치하여 작업을 진행할 수 있도록 보편화되어있는 브런칭 모델이다.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;div class="col-6 col-sm-9"&gt;
&lt;p&gt;&lt;img alt="Git Flow model" src="https://ujuc.github.io/img/2015/12-16/git-model@2x.png"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;구조와 흐름&lt;/h2&gt;
&lt;p&gt;가장 중심이 되는 브랜치는 &lt;code&gt;master&lt;/code&gt;랑 &lt;code&gt;develop&lt;/code&gt; 브랜치이며, 이 두 개 브랜치는 무조건 있어야 한다. 이름은 바뀔 수 있다만 웬만해서는 변경하지 않고 진행하도록 하자. Git도 Production에서 사용하는 브랜치는 &lt;code&gt;master&lt;/code&gt;를 사용하게 되니 관련된 부분을 변경하면 새로운 사람이 왔을때 스터디 커브가 존재할 수 있다.&lt;/p&gt;
&lt;p&gt;머지된 &lt;code&gt;feature&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;hotfix&lt;/code&gt; 브랜치는 삭제하도록 한다.&lt;/p&gt;
&lt;h3 id="feature"&gt;Feature 브랜치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;release-*&lt;/code&gt;, &lt;code&gt;hotfix-*&lt;/code&gt;를 제외한 어떤 것이든 가능.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 기능을 추가하는 브랜치이다.&lt;br&gt;
&lt;code&gt;feature&lt;/code&gt;브랜치는 &lt;code&gt;origin&lt;/code&gt;에는 반영하지 않고, 개발자의 reop애만 존재하도록 한다.&lt;/p&gt;
&lt;p&gt;여기서 머지를 할 때, &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 브랜치에서 머지가 되었음을 git 기록에 남겨두도록 한다. 이렇게 되면 나중에 히스토리 관리가 어려워지는 부분이 존재한다고 한다만&amp;hellip; 그것을 확인할 수 있는 방법들은 많으니 뭐&amp;hellip;&lt;/p&gt;
&lt;h3 id="release"&gt;Release 브랜치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;release-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;새로운 Production 릴리즈를 위한 브랜치이다.&lt;br&gt;
지금까지 한 기능을 묶어 &lt;code&gt;develop&lt;/code&gt; 브랜치에서 &lt;code&gt;release&lt;/code&gt; 브랜치를 따내고, &lt;code&gt;develop&lt;/code&gt; 브랜치에서는 다음번 릴리즈에서 사용할 기능을 추가한다.&lt;br&gt;
&lt;code&gt;release&lt;/code&gt; 브랜치에서는 버그 픽스에 대한 부분만 커밋하고, &lt;strong&gt;릴리즈가 준비되었다고 생각하면&lt;/strong&gt; &lt;code&gt;master&lt;/code&gt;로 머지를 진행한다. (이때도 &lt;code&gt;--no-ff&lt;/code&gt; 옵션을 이용하여 머지하였음을 남긴다.) &lt;br&gt;
&lt;code&gt;master&lt;/code&gt;로 머지 후 &lt;code&gt;tag&lt;/code&gt; 명령을 이용하여 릴리즈 버전에 대해 명시를 하고, &lt;code&gt;-s&lt;/code&gt; 나 &lt;code&gt;-u &amp;lt;key&amp;gt;&lt;/code&gt; 옵션을 이용하여 머지한 사람의 정보를 남겨두도록 한다. 그런 뒤 &lt;code&gt;develop&lt;/code&gt; 브랜치로 머지하여, &lt;code&gt;release&lt;/code&gt; 브랜치에서 수정된 내용이 &lt;code&gt;develop&lt;/code&gt; 브랜치에 반영한다.&lt;/p&gt;
&lt;h3 id="hotfix"&gt;Hotfix 브랜치&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 나오는 곳 : &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;브랜치가 들어가는 곳 : &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;이름 지정 : &lt;code&gt;hotfix-*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Production에서 발생한 버그들은 전부 여기로&amp;hellip; 수정 끝나면, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;master&lt;/code&gt; 브랜치에 반영하고, &lt;code&gt;master&lt;/code&gt;에 다가는 &lt;code&gt;tag&lt;/code&gt; 를 추가해준다.&lt;br&gt;
만약 &lt;code&gt;release&lt;/code&gt; 브랜치가 존재한다면, &lt;code&gt;release&lt;/code&gt; 브랜치에 &lt;code&gt;hotfix&lt;/code&gt; 브랜치를 머지하여 릴리즈 될 때 반영이 될 수 있도록 한다.&lt;/p&gt;
&lt;h2 id="_2"&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;alias script가 존재한다.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/petervanderdoes/gitflow-avh"&gt;gitflow-avh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;웬만한 에디터와 IDE에는 플러그인으로 존재한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;브랜치가 많아 복잡하다.&lt;/li&gt;
&lt;li&gt;안 쓰는 브랜치가 있다. 그리고 몇몇 브랜치는 애매한 포지션이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;A successful Git branching model - Vincent Driessen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nvie/gitflow"&gt;nvie/gitflw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://huns.me/development/1131"&gt;gifflow, 쉬운 git brunch 관리 - 개발왕 김코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ohgyun.com/402"&gt;git 브랜칭 전략과 git flow - 꿀벌개발일지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="github-flow"&gt;GitHub Flow&lt;/h1&gt;
&lt;p&gt;Scott chacon은 &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Flow&lt;/a&gt;에서 Git flow가 좋은 방식이긴 하지만 GitHub에서 사용하기에는 복잡하다 여겨 사용하지 않고 &lt;code&gt;GitHub Flow&lt;/code&gt;라는 내용으로 사용을 하고 있다고 한다. 그리고 &lt;strong&gt;자동화의 개념이 들어가 있다는 점&lt;/strong&gt;. 자동화가 안되어있는 곳에서는 수동으로 관련 작업을 진행하면 된다.&lt;/p&gt;
&lt;p&gt;흐름이 단순한 만큼 룰도 단순하다. &lt;code&gt;master&lt;/code&gt; 브랜치에 대한 &lt;code&gt;role&lt;/code&gt;만 정확하다면 나머지 브랜치들에는 관여를 하지 않는다. 그리고 &lt;code&gt;pull request&lt;/code&gt; 기능을 사용하도록 권장을 한다.&lt;/p&gt;
&lt;div class="row justify-content-center"&gt;
&lt;div class="col-6 col-sm-9"&gt;
&lt;p&gt;&lt;img alt="GitHub Flow Model" src="https://ujuc.github.io/img/2015/12-16/20151104223339.png"&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id="_5"&gt;특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;release&lt;/code&gt; 브랜치가 명확하지 않은 시스템에서 사용에 맞게 되어있다.&lt;/li&gt;
&lt;li&gt;여기에는 GitHub의 서비스 특성상. 릴리즈라는 개념이 없는 서비스를 진행하고 있어서 그런 것으로 보이며, 웹 서비스들이 릴리즈라는 개념이 없이지고 있으니 사용하기 편할 것으로 보인다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hotfix&lt;/code&gt;와 가장 작은 기능을 구분하지 않는다. 어차피 둘 다 개발자가 수정해야 되는 일중에 하나이다. 단지 우선순위가 어디가 높냐라는 단계이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_6"&gt;그럼 어떻게 사용할 것인가?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. &lt;code&gt;master&lt;/code&gt; 브랜치는 어떤 때든 배포가 가능하다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt; 브랜치는 항상 최신의 상태이며, stable 상태로 Product에 배포되는 브랜치이다. 그리고 이 브랜치에 대해서는 엄격한 &lt;em&gt;role&lt;/em&gt;를 주어 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 새로운 일을 시작하기 위해 브랜치를 &lt;code&gt;master&lt;/code&gt;에서 딴다면 이름은 어떤 일을 하는지 명확하게 작성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와는 다르게 &lt;code&gt;feature&lt;/code&gt; 브랜치나 &lt;code&gt;develop&lt;/code&gt; 브랜치가 존재하지 않는다. 그렇기에 새로운 기능을 추가하거나 버그를 해결하기 위한 브랜치의 이름은 자세하게 어떤 일을 하고 있는지에 대해서 작성해주도록 하자. Github 페이지에서 보면 어떤 일들이 진행되고 있는지를 확인하기 쉽게 말이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 원격지 브랜치로 수시로 push를 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git flow&lt;/code&gt; 와 가장 상반되는 방식이다. 항상 원격지에 자신이 하고 있는 일들을 올려 다른 사람들도 확인할 수 있도록 해준다.&lt;br&gt;
이 방법의 좋은 점은 하드웨어에 문제가 발생하여 작업하던 부분이 없어지더라도 원격지에 있는 소스를 받아서 작업을 할 수 있도록 해준다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 피드백이나 도움이 필요할 때, 그리고 머징 준비가 완료되었을 때는 &lt;code&gt;pull request&lt;/code&gt;를 생성한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pull request&lt;/code&gt; 는 코드 리뷰를 도와주는 시스템이다. &lt;br&gt;
그렇기에 이것을 이용하여 자신의 코드를 공유하고, 리뷰를 받을 수 있도록 한다. 물론 머지가 준비 완료되어 &lt;code&gt;master&lt;/code&gt; 브랜치로 반영을 요구하여도 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 기능에 대한 리뷰와 사인이 끝난 후 &lt;code&gt;master&lt;/code&gt;로 머지한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;곧장 product로 반영이될 기능이기에 이해관계가 연결된 사람들과 충분한 논의 이후 반영하도록 한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. &lt;code&gt;master&lt;/code&gt;로 머지되고 푸시되었을 때는 즉시 배포되어야 한다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GitHub Flow&lt;/strong&gt;의 핵심인듯한 &lt;code&gt;master&lt;/code&gt;로 머지가 일어나면 &lt;code&gt;hubot&lt;/code&gt;을 이용하여 자동으로 배포가 되도록 설정해놓는다.&lt;/p&gt;
&lt;h2 id="_7"&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;브랜치 전략이 단순하다.&lt;/li&gt;
&lt;li&gt;처음 git을 접하는 사람에게 정말 좋은 시스템이 된다.&lt;/li&gt;
&lt;li&gt;Github 사이트에서 제공하는 기능을 모두 사용하여 작업을 진행한다.&lt;/li&gt;
&lt;li&gt;코드 리뷰를 자연스럽게 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;CI가 필수적이며, 배포는 자동으로 진행할 수 있다.&lt;/li&gt;
&lt;li&gt;Github가 작업을 할 때 이렇게 작업하고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CI와 배포 자동화가 되어있지 않은 시스템에서는 사람이 관련된 업무를 진행한다.&lt;/li&gt;
&lt;li&gt;많은 것들이 올라오기 시작하면&amp;hellip; 그때부터는 헬이&amp;hellip;&lt;/li&gt;
&lt;li&gt;너무 간단하니&amp;hellip; 이거 단점이 있나 싶다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_9"&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scottchacon.com/2011/08/31/github-flow.html"&gt;GitHub Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.github.com/introduction/flow/"&gt;Understanding the GitHub Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dogfeet.github.io/articles/2011/github-flow.html"&gt;GitHub Flow - dogfeet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://lucamezzalira.com/2014/03/10/git-flow-vs-github-flow/"&gt;Git Flow vs Github Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/blog/1557-github-flow-in-the-browser"&gt;GitHub Flow in teh Browser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="gitlab-flow"&gt;GitLab Flow&lt;/h1&gt;
&lt;div class="alert alert-danger d-flex align-items-center m-2" role="alert"&gt;
&lt;p&gt;&lt;i class="fa-solid fa-triangle-exclamation"&gt;&lt;/i&gt; 문서가 쓰여졌던 시점의 방식입니다. 지금은 변경되었습니다. &lt;a href="https://about.gitlab.com/blog/2023/07/27/gitlab-flow-duo/"&gt;Combine GitLab Flow and GitLab Duo for a workflow powerhouse&lt;/a&gt; 를 확인하세요.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Github에서 말하는 flow는 너무나도 간단하여 배포, 환경 구성, 릴리즈, 통합에 대한 이슈를 남겨둔 것이 많았다. 그것을 보안하기 위해 GitLab에서 관련 내용들을 추가적으로 덧붙여 설명한 것을 일컫는다.&lt;/p&gt;
&lt;h2 id="production-branch-with-gitlab-flow"&gt;Production branch with GitLab flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - production branch" src="https://about.gitlab.com/images/git_flow/production_branch.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;production&lt;/code&gt; 브랜치가 존재하여 커밋한 내용들을 일방적으로 디플로이를 하는 형태. GitHub에서 브랜치 하나를 더 구성하여 사용하는 이것도 조금은 간단한 구성이다.&lt;br&gt;
이렇게 구성하면 배포 자동화가 되어있 지않은 구성에서 어떻게 배포를 진행할 것인가에 대한 내용을 담았다. 물론 이걸로 부족하여 다음의 것도 추가되었다.&lt;/p&gt;
&lt;h2 id="environment-branches-with-gitlab-flow"&gt;Environment branches with GitLab flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - environment branch" src="https://about.gitlab.com/images/git_flow/environment_branches.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;master&lt;/code&gt;와 &lt;code&gt;production&lt;/code&gt; 사이에 &lt;code&gt;pre-production&lt;/code&gt;을 두어 개발한 내용을 곧장 반영하지 않고 시간을 두고 반영을 하는 것을 말한다. Staging을위한 공간을 만드는 거지&amp;hellip;&lt;/p&gt;
&lt;h2 id="release-branches-with-gitlab-flow"&gt;Release branches with GitLab flow&lt;/h2&gt;
&lt;p&gt;&lt;img alt="GitLab Flow Model - Release branch" src="https://about.gitlab.com/images/git_flow/release_branches.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;release&lt;/code&gt;한 브랜치를 두고서 보안상 문제가 발생한 것이나 백 포트를 위해서 작업을 할 경우, cherry-pick을 이용해서 작업을 진행할 수 도 있다. 아니면 해당 릴리즈에서 발생하는 버그들을 묶어서 수정하는 방식으로 작업한다. 일반적으로 말하는 &amp;lsquo;upstream first&amp;rsquo; 정책이다.&lt;/p&gt;
&lt;h2 id="mergepull-requests-with-gitlab-flow"&gt;Merge/pull requests with GitLab flow&lt;/h2&gt;
&lt;p&gt;Pull request를 사용하는 방법이다. GitHub Flow에서 하는 방법과 동일하다. 원문은 길게 적어놨는데&amp;hellip; 딱히&amp;hellip;&lt;/p&gt;
&lt;h2 id="issues-with-gitlab-flow"&gt;Issues with GitLab flow&lt;/h2&gt;
&lt;p&gt;Issue 트러커와 연결하여 사용하는 것을 말한다. 긴~~ 시간 동안 작업을 할 경우, 이슈를 생성하여 작업을 진행하는 것으로&amp;hellip;&lt;br&gt;
브랜치 이름에는 이슈번호를 적어 작업 중인 이슈가 어떤 것인지를 명확하게 해주는 것이 필요하다.&lt;br&gt;
작업이 끝나거나 코드 공유가 필요한 시점이면 Merge/pull requsts를 보낸다.&lt;/p&gt;
&lt;p&gt;다 적을려고 봤더니 그냥 GitLab 사용법에 대해서만 추가적으로 말하고 있어서 이쯤적고 영어로 읽자. 영어가 어렵다면&amp;hellip; 일본어를 번역해서 읽으면 좀 더 쉽게 읽을 수 있다.&lt;/p&gt;
&lt;h2 id="_10"&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/2014/09/29/gitlab-flow/"&gt;GitLab Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://postd.cc/gitlab-flow/"&gt;GitLab flowから学ぶワークフローの実践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.gitlab.com/ee/workflow/gitlab_flow.html"&gt;GitLab Document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://shoma2da.hatenablog.com/entry/2015/11/04/233534"&gt;アプリ開発にはGitlab flowが合うと思います&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="_11"&gt;끝&lt;/h1&gt;
&lt;p&gt;하&amp;hellip; 길었다. 모든 자료는 공식적으로 첫 번째로 작성된 포스트의 내용을 가져와 작성하였다. 그쪽의 내용이 가장 먼저 말한 사람의 생각이 들어가 있다고 생각했기 때문이다. &lt;br&gt;
그리고 찾으면서 발견한 글들의 경우, 참고 사이트로 작성을 해놨으니 그것을 확인하면 될듯.&lt;/p&gt;
&lt;p&gt;Git flow가 편한줄 알았더니&amp;hellip; GitHub나 GitLab을 사용하고 있다면, 굳이 Git flow가 아니더라도 괜찮겠다는 생각이 드는데 딱히 OpenSource를 하는 그룹에서도 Git flow를 사용하기보다는 자신의 코드가 들어가 있는 플랫폼을 가지고서 작업을 하는 경우가 많아서&amp;hellip; 뭐. 업스트림에 작업을 할 수 있는 사람이 한정되어있으니까&amp;hellip;&lt;/p&gt;
&lt;p&gt;이런 방법들을 어떻게 사용해보는 것이 좋을련지를 고민해보는 것도 필요하지 않을까 한다. 간단하게 하는 방법도 있고 하니까.. 그리고 내꺼나 차근차근 구축해 나가야 되는데&amp;hellip;&lt;/p&gt;
&lt;h1 id="_12"&gt;참고&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/nzakas/5511916"&gt;Using GitHub inside a company - Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nczonline.net/blog/2013/05/21/github-workflows-inside-of-a-company/"&gt;GitHub workflows inside of a company&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/tkhm/items/cc7855d32d640687b43c"&gt;Git利用時のフローはどれを使うか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;2019-03-24: 죽은 링크 삭제, 맞춤법 검사&lt;br&gt;
2023-08-26: 죽은 이미지를 살리지 못함, 전체 스타일 변경, CSS 수정.&lt;/p&gt;</content><category term="Develop"></category><category term="git"></category><category term="workflow"></category><category term="github"></category><category term="gitlab"></category></entry><entry><title>git-town 사용해보자</title><link href="https://ujuc.github.io/2015/10/26/git-town-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%9E%90/" rel="alternate"></link><published>2015-10-26T01:11:00+09:00</published><updated>2015-10-26T01:11:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-10-26:/2015/10/26/git-town-사용해보자/</id><summary type="html">&lt;p class="first last"&gt;Git 플러그인중 하나인 git-town에 대해서 알아보자.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;아무런 생각없이 메일 온것을 확인중... 발견한 &lt;a class="reference external" href="https://github.com/Originate/git-town"&gt;git-town&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;솔직히 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 와 다른게 먼가 있을 것같아서 사용을 해볼려고 깔아뒀고,
지금 작성하는 글도 브런치를 &lt;tt class="docutils literal"&gt;git town&lt;/tt&gt; 명령어중 하나를 사용해서 브런치를
딴 후 작성중이다.&lt;/p&gt;
&lt;p&gt;명령어 9가지에 대해서 좀 알아보자. 사용법도 같이 좀 써보게...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Development Workflow&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-hack.md"&gt;git hack&lt;/a&gt; : 중심 가지에서 새로운 기능 가지를 때는데 사용함.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-sync.md"&gt;git sync&lt;/a&gt; : 원본 저장소의 변화분들을 현재 가지에 업데이트.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-new-pull-request.md"&gt;git new-pull-request&lt;/a&gt; : 새로운 풀리퀘 생성.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-ship.md"&gt;git ship&lt;/a&gt; : 기능 가지를 중심 가지로 넣고 꺽기.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repository Maintenance&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-kill.md"&gt;git kill&lt;/a&gt; : 새로운 가지 꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-prune-branches.md"&gt;git prune-branches&lt;/a&gt; : 합쳐진 가지 꺽기&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-rename-branch.md"&gt;git rename-branch&lt;/a&gt; : 이름 변경&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-repo.md"&gt;git repo&lt;/a&gt; : 저장소 홈페이지로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration and Help&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/Originate/git-town/blob/master/documentation/commands/git-town.md"&gt;git town&lt;/a&gt; : 도움말 보기, 구성 확인 및 변경.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;확인용이자 기억용으로 작성한건데... 옵션이 많다... 그냥 필요할때만 봐야지..&lt;/p&gt;
&lt;p&gt;각 명령어별로 어떻게 돌아가는지에 대해서는 &lt;a class="reference external" href="https://github.com/Originate/git-town/tree/master/features"&gt;features&lt;/a&gt;
폴더로 확인하는 편이 좋다. BDD로 테스트를 진행해서 해당 기능들이 어떻게 진행하고
있는지를 그나마 보기 쉽게 되어있기 때문이다.&lt;/p&gt;
&lt;p&gt;솔직히 내부 기능들이 Bash로 작성되어있어서 찾아다니기 힘들다...&lt;/p&gt;
</content><category term="Develop"></category><category term="git"></category><category term="git-town"></category><category term="git plugins"></category></entry><entry><title>OpenStack 새로운 버전 매기기 변경</title><link href="https://ujuc.github.io/2015/06/28/openstack-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B2%84%EC%A0%84-%EB%A7%A4%EA%B8%B0%EA%B8%B0-%EB%B3%80%EA%B2%BD/" rel="alternate"></link><published>2015-06-28T22:24:00+09:00</published><updated>2015-06-28T22:24:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-06-28:/2015/06/28/openstack-새로운-버전-매기기-변경/</id><summary type="html">&lt;p class="first last"&gt;OpenStack 버전 매기는 방법이 변경되었다. &lt;tt class="docutils literal"&gt;YEAR.N&lt;/tt&gt; 에서 &lt;tt class="docutils literal"&gt;X.Y.Z&lt;/tt&gt; 로..&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Liberty 부터는 버전에 관련된 부분이 변경이 되었다. 이번에 Liberty-1 개발 마일스
톤 이메일 &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; 에서 보면 알 수 있다.&lt;/p&gt;
&lt;p&gt;그리고 이것에 대한 자세한 내용은 &lt;a class="reference external" href="http://ttx.re/new-versioning.html"&gt;New OpenStack Component Versioning&lt;/a&gt; 에서 확인
하면된다.&lt;/p&gt;
&lt;p&gt;언제부터인가 OpenStack 버전은 &lt;tt class="docutils literal"&gt;YEAR.N&lt;/tt&gt; 으로 버전을 진행하고 있었고,  Kilo의 경우도
2015.1로 넘어가고 있었다. 스위프트의 경우에는 다르게 &lt;tt class="docutils literal"&gt;X.Y.Z&lt;/tt&gt; 버전으로 계속 발
표를 해오기도했다. (이건 Swift를 주도적으로 개발하고 있는 &lt;a class="reference external" href="https://swiftstack.com"&gt;SwiftStack&lt;/a&gt; 이라는 회사
에서 관리하고 있는 부분이기도하다.)&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;YEAR.N&lt;/tt&gt; 형식으로 진행하면서 문제가 좀 있었나보다. 글을 읽어보면 백포트 하기도
쉽지 않고, 모든 프로젝트들이 정식 릴리즈 일시와 맞지 않으면 중간에 버전을 따로
해서 내놓고 전체 출시할때는 같은 방법으로 내고 해서 햇갈리는 부분도 있고 했던듯.&lt;/p&gt;
&lt;p&gt;라이브러리가 릴리즈되면서 어떤게 어떤건지도 모르겠다는... 말도나온건가...&lt;/p&gt;
&lt;p&gt;저번 벤쿠퍼 디자인 서밋에서 기본 이야기를 나누고 메일링까지 와서 이야기를 나눈후
이전에 발표된 버전을 통합하여 계산하는 것으로 했다고 한다.&lt;/p&gt;
&lt;p&gt;Nova의 경우, 첫 Austin 부터 진행해왔으니 12.0.0. Bexar에서 추가된 Glance는
11.0.0. Diablo에서 추가된 Keystone, Horizon은 8.0.0.
(이해가 안되는건 왜 Cinder가... 8.0.0 인건지...;)&lt;/p&gt;
&lt;p&gt;이렇게 바뀌면 혼란스런 부분이 있겠지만 장기적으로 본다면, 수정하거나 백포트하여
구성할때는 괜찮기도 하겠다는... 생각이 들기도한다. 그리고 년도 표기를 하지 않음
으로써 실제 서비스시 관련된 내용들을 모두 보여주지 않아도된다는 느낌도 없지 않아
있고...&lt;/p&gt;
&lt;p&gt;그런데 이것보다 중요한건... 버전업을 6개월마다 하는 것보다는 조금 더 안정적인 버
전이나 LTS 버전같은게 나와줘야되지 않을까하는데... 뭐 이건 관련 내용을 찾으면 다
시 말을 해야겠다. 너부 빨리 바뀌는 부분들이 많아서 조직에 개발자가 없다면, 특히
나 우리나라 SI의 경우에는 대응하기가 쉽지 않아보인다.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html"&gt;http://lists.openstack.org/pipermail/openstack-announce/2015-June/000391.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Develop"></category><category term="openstack"></category><category term="versioning"></category></entry><entry><title>Edison pip install error</title><link href="https://ujuc.github.io/2015/05/14/edison-pip-install-error/" rel="alternate"></link><published>2015-05-14T01:39:00+09:00</published><updated>2015-05-14T01:39:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-05-14:/2015/05/14/edison-pip-install-error/</id><summary type="html">&lt;p class="first last"&gt;Edison으로 파이썬을 작업하기위해 패키지를 설치하려보면... 이넘이 안된
다. 그것에 대한 내용이다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;pip를 설치하고 패키지를 확인하려고하면 다음과 같은 에러가 발생한다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# pip install flask
&lt;/span&gt;Traceback&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;most&lt;span class="w"&gt; &lt;/span&gt;recent&lt;span class="w"&gt; &lt;/span&gt;call&lt;span class="w"&gt; &lt;/span&gt;las&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt;
&lt;/span&gt;File&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/bin/pip&amp;quot;&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;line&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;module&amp;gt;&lt;span class="w"&gt;
&lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;pkg_resources&lt;span class="w"&gt; &lt;/span&gt;import&lt;span class="w"&gt; &lt;/span&gt;load_entry_point&lt;span class="w"&gt;
&lt;/span&gt;ImportError:No&lt;span class="w"&gt; &lt;/span&gt;module&lt;span class="w"&gt; &lt;/span&gt;named&lt;span class="w"&gt; &lt;/span&gt;pkg_resources
&lt;/pre&gt;
&lt;p&gt;발생하는건 &lt;tt class="docutils literal"&gt;setuptools&lt;/tt&gt; 패키지가 설치되지 않아서 문제가...&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# wget --no-check-certificate \
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;https://pypi.python.org/packages/source/s/setuptools/setuptools-15.2.tar.gz#md5&lt;span class="o"&gt;=&lt;/span&gt;a9028a9794fc7ae02320d32e2d7e12ee&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# tar zxf setuptools-15.2.tar.gz
# python setuptools-15.2/ez_setup.py&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pip&lt;/tt&gt; 로 제대로 설치된건지 확인하자.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;기본 설치되는 pip 버전이 낮으니.. 업글해줘야되기도 해서..&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Develop"></category><category term="edison"></category><category term="pypi"></category><category term="pip"></category><category term="python"></category><category term="error"></category></entry><entry><title>Edison 초기 설정</title><link href="https://ujuc.github.io/2015/05/13/edison-%EC%B4%88%EA%B8%B0-%EC%84%A4%EC%A0%95/" rel="alternate"></link><published>2015-05-13T22:46:00+09:00</published><updated>2015-05-13T22:46:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-05-13:/2015/05/13/edison-초기-설정/</id><summary type="html">&lt;p class="first last"&gt;Edison을 사용하는데 있어서 초기에 설정하는 부분으로 구성을 한다.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="yocta-project-update"&gt;
&lt;h2&gt;Yocta Project Update&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;무엇이든 처음 설정할때는 기본 OS먼저 업데이트를 해줘야된다. 최신 Yocta Project
파일을 받아서 설치해준다.&lt;/li&gt;
&lt;li&gt;최신이 아니라면 몇몇 기능이 제대로 되지 않아 다시 설치해줘야될 수 도 있으니 꼭
하도록하자.&lt;/li&gt;
&lt;li&gt;컴파일을 진행해도 된다만, 시간이 많거나, 꼭 필요한 패키지가 없거나, 기본적으로
설정을 변경해주어야 할때빼고는 하지말자.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.intel.com/support/edison/sb/CS-035180.htm"&gt;Yocta 컴파일 이미지 다운로드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/intel-edison-flashing-firmware-on-os-x-wired"&gt;플래싱 순서&lt;/a&gt;&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;위의 사진대로 USB를 연결해주고 (2번에 연결)&lt;/li&gt;
&lt;li&gt;Edison 외장디스크가 깨끗한지 확인한다.
* 만약 이전의 이미지 내용이 있다면, &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; &lt;span class="pre"&gt;Edison/\.*&lt;/span&gt;&lt;/tt&gt; 를 이용하여 모든 내용을 삭제한 다음 받은 이미지를 올리면 된다.
* Edison 파티션의 정보를 확인하여 포멧이 FAT16이라면 디스크 유틸에서 포맷하여 FAT32로 변경해주도록.&lt;/li&gt;
&lt;li&gt;다운 받은걸 복사하자.&lt;/li&gt;
&lt;li&gt;시리얼 통신으로 Edison에 접근한다.
* &lt;tt class="docutils literal"&gt;screen &lt;span class="pre"&gt;/dev/cu.usbserial-A****&lt;/span&gt; 115200 &lt;span class="pre"&gt;-L&lt;/span&gt;&lt;/tt&gt;
* &lt;tt class="docutils literal"&gt;subserial&lt;/tt&gt; 로 접근을 하면되는데 A뒤의 이름은 변경될 수 있어 작성하지 않았다.&lt;/li&gt;
&lt;li&gt;아무런 내용이 안나온다면 들어간 것이니, 엔터 두번.&lt;/li&gt;
&lt;li&gt;로그인후 &lt;cite&gt;reboot ota&lt;/cite&gt; 명령어로 재시작.
* &lt;cite&gt;ota&lt;/cite&gt; 로 할 경우, 부팅때 Edison 외장하드에 넣어둔 부팅 이미지들로 새롭게 씌우고 관련 내용들을 업데이트하여 사용할 수 있도록 되어있다.&lt;/li&gt;
&lt;li&gt;자세한 내용은 제목에 연결된 링크로 가서 확인하고 작업을 진행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="edison-1"&gt;
&lt;h2&gt;Edison 구성&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 구성을 하는데 필요한 명령어는 &lt;tt class="docutils literal"&gt;configure_edison&lt;/tt&gt; 으로 작업을 구성하도록
한다.&lt;/li&gt;
&lt;li&gt;전체 설정을 다 변경하고 싶으면 &lt;tt class="docutils literal"&gt;configure_edison &lt;span class="pre"&gt;--setup&lt;/span&gt;&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="hostname"&gt;
&lt;h3&gt;Hostname&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --name&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;다음에 나오는 것들에따라서 입력해주면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wifi"&gt;
&lt;h3&gt;Wifi&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --wifi&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;근처에 있는 Wifi들이 다 잡힐 것이나 만약 아무것도 안보인다면 firmware를 업그레
이드 한 뒤에 다시 명령어를 입력하여 확인하도록하자.&lt;/li&gt;
&lt;li&gt;버전업이 안되어있는 경우, 잡지 못하더라.&lt;/li&gt;
&lt;li&gt;설정이 완료되고 나면 URL을 보여주니 그것을 이용하여 접근하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;SSH 설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Screen으로 시리얼 접근하는 것은 사용하기가 불편하다.&lt;/li&gt;
&lt;li&gt;비밀번호를 설정해주게되면 SSH로 접근이 가능하게 되니 그부분을 추가하여 작업을
진행하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# configure_edison --password&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="package"&gt;
&lt;h2&gt;Package 관리자&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Edison은 opkg(OpenPackaGe Managemet)라는 비교적 가벼운 패키지 관리자를 사용한
다고 한다. 몇몇 설정이 그렇게 되어있었다. (Yocta Projectdp서 사용하는데,
OpenWRT에서 사용하고 있다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h3&gt;패키지 관리자 설치 및 설정&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://software.intel.com/en-us/articles/managing-devkit-libraries-intel-edison-or-intel-galileo-board"&gt;Intel page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# echo &amp;quot;src intel-iotdk http://iotdk.intel.com/repos/1.1/intelgalactic&amp;quot; &amp;gt; \
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;/etc/opkg/intel-iotdk.conf#&lt;span class="w"&gt; &lt;/span&gt;opkg&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;opkg&lt;span class="w"&gt; &lt;/span&gt;upgrade&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="c1"&gt;# opkg update; opkg upgrade&lt;/span&gt;
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이렇게하면 기본적인 것들은 추가가 된다만 패키지가 많지는 않다.&lt;/li&gt;
&lt;li&gt;더 많은 패키지를 사용하려면 레포지토리를 추가해줘야 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c1"&gt;# vi /etc/opkg/base-feeds.conf
&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;src/gz&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;http://repo.opkg.net/edison/repo/all&lt;span class="w"&gt;
&lt;/span&gt;src/gz&lt;span class="w"&gt; &lt;/span&gt;edison&lt;span class="w"&gt; &lt;/span&gt;http://repo.opkg.net/edison/repo/edison&lt;span class="w"&gt;
&lt;/span&gt;src/gz&lt;span class="w"&gt; &lt;/span&gt;core2-32&lt;span class="w"&gt; &lt;/span&gt;http://repo.opkg.net/edison/repo/core2-32&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c1"&gt;# opkg update&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="edison"></category><category term="개발"></category><category term="embedded"></category><category term="임베디드"></category><category term="intel"></category><category term="iot"></category></entry><entry><title>Status bar &amp; Title bar 숨기기</title><link href="https://ujuc.github.io/2015/04/23/status-bar-&amp;-title-bar-%EC%88%A8%EA%B8%B0%EA%B8%B0/" rel="alternate"></link><published>2015-04-23T01:25:00+09:00</published><updated>2015-04-23T01:25:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-04-23:/2015/04/23/status-bar-&amp;-title-bar-숨기기/</id><summary type="html">&lt;p class="first last"&gt;Android 다 안다는 Status bar, Title bar 숨기기.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;요즘 안드로이중이다. 오랜만에 했더니 봐야될께 많다. 특히 UI를 많이 안해서
그런가.. 감이 잘 안온다는 문제도...&lt;/p&gt;
&lt;p&gt;SplashActivity를 추가해줘야되는데. 안드로이드에서 뭘 알아야지.. 그냥 예제에 있는
것들을 찾아서 변경해 추가를 했지만, 정리를 한번 해놔야되서... 뭐 간단하게 구성은
되어있다만. 이렇게라도 적어놔야 나중에 또 다른곳에서 엉뚱한것을 안찾지...&lt;/p&gt;
&lt;div class="section" id="title-bar"&gt;
&lt;h2&gt;Title bar 숨기기&lt;/h2&gt;
&lt;p&gt;이것을 해줄려면 &lt;tt class="docutils literal"&gt;style&lt;/tt&gt; 을 구성해서 해줘야된다. 뭔가 많이 불편해서 다른
곳에서도 가능한가를 찾아봤지만, 안된다. 뭐 특정 구역에서만 가능하게 해놨나보다.
그져 따라서 해놔야지...&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에 추가한다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Theme.Splash&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:Theme&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windwoNoTitle&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/stlye&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;위와 같이 구성을 하고서 Activity에 작성을 해주면된다.&lt;/p&gt;
&lt;pre class="code c# literal-block"&gt;
&lt;span class="na"&gt;[Activity (Theme = &amp;quot;&amp;#64;style/Theme.Splash&amp;quot;, MainLauncher = true, NoHistory =
ture)]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;brabra&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;이렇게 하고 필요한 내용들을 추가해주면 된다. 그러면 타이틂 바만 없어지는 것을
확인할 수 있다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="status-bar"&gt;
&lt;h2&gt;Status bar 숨기기&lt;/h2&gt;
&lt;p&gt;동일한 &lt;tt class="docutils literal"&gt;Styles.xml&lt;/tt&gt; 에 &lt;tt class="docutils literal"&gt;&amp;lt;item&amp;gt;&lt;/tt&gt; 을 변경해주면된다.&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowFullscreen&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;ture&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h3&gt;참고 사이트&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.androidpub.com/4710"&gt;전체화면 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="android"></category><category term="기본"></category><category term="난 모르겠다."></category></entry><entry><title>xonsh?</title><link href="https://ujuc.github.io/2015/03/16/xonsh/" rel="alternate"></link><published>2015-03-16T23:50:00+09:00</published><updated>2015-04-03T00:23:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-16:/2015/03/16/xonsh/</id><summary type="html">&lt;p class="first last"&gt;Python으로 만든 Shell...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://xonsh.org/index.html"&gt;xonsh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python-ish, BASHwards-compatible shell language and command prompt.라고...&lt;/p&gt;
&lt;p&gt;저장용. Zsh을 쓰고 있어서 이것을 사용할 일이...
그리고 기본이 3.4라... 실질적으로 사용하기에는 쉽지 않을듯. 몇몇 3.x 버전을
기본으로 장착한 배포판의 경우엔 다르겠지만.&lt;/p&gt;
</content><category term="Develop"></category><category term="python"></category><category term="shell"></category></entry><entry><title>sys.json</title><link href="https://ujuc.github.io/2015/03/10/sys-json/" rel="alternate"></link><published>2015-03-10T13:52:00+09:00</published><updated>2015-04-02T22:30:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-10:/2015/03/10/sys-json/</id><summary type="html">&lt;p class="first last"&gt;system에 관련된 내용들을 json 형태로 웹으로 뿌려줄 수 있다.
Linux의 &lt;cite&gt;proc&lt;/cite&gt; 쪽에서 관련 내용을 가져온다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/EricR/sys.json"&gt;EricR/sys.json&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;좀 독특하다고 해야되나?&lt;/p&gt;
&lt;p&gt;Golang을 이용해서 웹을 간단히 띄우고, &lt;tt class="docutils literal"&gt;proc&lt;/tt&gt; 를 이용해서 내용들을 불러와 JSON
형태로 뽑아주도록 되어있다.&lt;/p&gt;
&lt;p&gt;몇몇 부분을 수정하거나 작업을 해야되긴 하겠지만 이 정도로 작은 아이를 띄워
무리없이 가져올 수 있다면 그것도 좋은 방법이 아닐까...&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;내가 생각하는 비슷한 패키지&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/nicolargo/glances"&gt;nicolargo/glances&lt;/a&gt; - Python으로 구성되어있으며, 서버 형식으로 API들을 뽑아 올
수 있다. 물론 간단한 웹으로도 가능하다.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="go"></category><category term="json"></category><category term="api"></category></entry><entry><title>OpenStack rootwrap</title><link href="https://ujuc.github.io/2015/03/04/openstack-rootwrap/" rel="alternate"></link><published>2015-03-04T00:00:00+09:00</published><updated>2015-04-02T21:18:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-04:/2015/03/04/openstack-rootwrap/</id><summary type="html">&lt;p class="first last"&gt;OpenStack의 Oslo에는 root권한을 얻긱위한 rootwrap이라는 라이브러리가
존재한다.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;OpenStack 프로젝트들에서 사용되는 것들 중... &lt;strong&gt;root&lt;/strong&gt; 와 관련된 작업을
진행해야하는 경우가 있다. 그럴때 사용하려고 만들어둔 &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap"&gt;rootwrap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wiki에서는 이 &lt;a class="reference external" href="https://fnords.wordpress.com/2011/11/23/improving-nova-privilege-escalation-model-part-1/"&gt;블로그&lt;/a&gt; 에 작성된 문제를 해결하기 위해서 만들어졌다고 한다.&lt;/p&gt;
&lt;p&gt;짧은 내기억으로는 간단한 팡리로만 존재했던 것같은데. (아닐 가능성 100%라논
소리...), 지금은 oslo 패키지로 관리되고 있다. &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap"&gt;github repo&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;사용자용&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;nova.conf&lt;/tt&gt; 에 다음 문구 추가하도록...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rootwrap_config=/etc/nova/rootwrap.conf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;배포용 패키지를 만드는 사람용&lt;/h2&gt;
&lt;div class="section" id="suduers"&gt;
&lt;h3&gt;Suduers 설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;sudoers&lt;/tt&gt; 에 다음 문구를 추가하도록...&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap /etc/nova/rootwrap.conf *
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3&gt;필터 위치 설정&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;rootwrap&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Nova-provided&lt;/span&gt;&lt;/tt&gt; 필터 파일을 로드하고, &lt;tt class="docutils literal"&gt;rootwrap.d&lt;/tt&gt; 로 확장
사용자의 필터 파일을 로드하도록 설정해 줄것.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[DEFAULT]
filters_path=/etc/nova/rootwrap.d,/usr/share/nova/rootwrap
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;필터 정의&lt;/h3&gt;
&lt;p&gt;각 노드마다 설치를... 해줘야된다고.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;플러그인 작성자용&lt;/h2&gt;
&lt;div class="section" id="run-as-root"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을 추가&lt;/h3&gt;
&lt;p&gt;root로 동작시킬 것이 있을 경우.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할 것.&lt;/li&gt;
&lt;li&gt;관련 필터 내용은 &lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/foobar.filters&lt;/tt&gt; 에 추가해둘 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;프로젝트 개발자용&lt;/h2&gt;
&lt;div class="section" id="run-as-root-1"&gt;
&lt;h3&gt;새로운 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;run-as-root&lt;/span&gt;&lt;/tt&gt; 명령을 추가&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;nova.utils.execute(run_as_root=True)&lt;/tt&gt; 를 사용할 것.&lt;/li&gt;
&lt;li&gt;Nova 코드에서 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nova/rootwrap.d/{filter_name}.ilters&lt;/span&gt;&lt;/tt&gt; 파일에 관련된 내용을
추가해줄 것.&lt;ul&gt;
&lt;li&gt;예로 Compute 노드에서 작동하는 소스라면
&lt;tt class="docutils literal"&gt;/etc/nova/rootwrap.d/compute.filters&lt;/tt&gt; 에다가 추가하도록.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;상위 필터 타입 추가&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;기본 필터 타입은 &lt;tt class="docutils literal"&gt;CommandFilter&lt;/tt&gt; 임.&lt;/li&gt;
&lt;li&gt;새로운 타입을 만들거나 지금 존재하는 타입을 확인하고 싶다면 &lt;a class="reference external" href="https://github.com/openstack/oslo.rootwrap/blob/master/oslo_rootwrap/filters.py"&gt;filters.py&lt;/a&gt; 를
보면 된다. - &lt;a class="reference external" href="https://wiki.openstack.org/wiki/Rootwrap#Available_Filter_classes"&gt;Available Filter Classes&lt;/a&gt; 가 아닌걸로도 볼 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="openstack"></category><category term="oslo"></category></entry><entry><title>vim을 IDE처럼 만드는 법을 알아보자.</title><link href="https://ujuc.github.io/2015/03/03/vim-to-ide/" rel="alternate"></link><published>2015-03-03T00:00:00+09:00</published><updated>2015-04-01T23:52:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-03:/2015/03/03/vim-to-ide/</id><summary type="html">&lt;p class="first last"&gt;vimrc를 만드는 방법에대해서...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;메일로 Github에서 흥하는 레포들을 소개해주는 서비스가 존재한다. 거기서 오랜만에
vim에 관련된 내용이 올라왔다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jez/vim-as-an-ide"&gt;jez/vim-as-an-ide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;뭐 특별한 것은 없어 보이지만, Vim을 설정하는 것들에대해 커밋을 통해서 작성해
뒀다. 그래서 더 좋다. 이렇게하면 나중에 누군가에게 vim을 설정하는 방법에 대해서
알려주는 방법에서도 좋을 듯함.&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;아쉬운것&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/gmarik/Vundle.vim"&gt;Vundle&lt;/a&gt; 을 사용해서 플러그인을 설치한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그냥 아쉽다. 다른 것들도 많다. &lt;a class="reference external" href="https://github.com/Shougo/neobundle.vim"&gt;NeoVundle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/junegunn/vim-plug"&gt;Plug&lt;/a&gt;. 이정도가 내가 아는 플러그인
설치를 도와주는 것들이다.&lt;/p&gt;
&lt;p&gt;뭐 Vundle을 사용하는 방법을 안다면 쉽게 작업을 진행할 수 있으니 필요한 것들을
확인해서 설치하는게 필요할듯.&lt;/p&gt;
&lt;p&gt;다른 것들은 나도 보면서 배워야할 것들이다. 플러그인들이 많이 설치되는 것들을
설치해서 사용은 하고 있지만... 그렇게 많은 기능들을 다 사용하지 않는 이상...
조금씩 덜어내는 것도 필요할 듯.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="vim"></category><category term="vimrc"></category><category term="ide"></category></entry><entry><title>timesheet.js??</title><link href="https://ujuc.github.io/2015/03/02/timesheet-js/" rel="alternate"></link><published>2015-03-02T00:00:00+09:00</published><updated>2015-04-01T22:21:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-02:/2015/03/02/timesheet-js/</id><summary type="html">&lt;p class="first last"&gt;timesheet.js라는 연대표를 그려주는 JS 라이브러리&lt;/p&gt;
</summary><content type="html">&lt;p&gt;놀다 보니 이것저것 보는 것들도 많다. 그런것들이라도 간단히 적어둬야지...&lt;/p&gt;
&lt;p&gt;노트에다가 작성을 해놓고 넣어두는 것도 한 방법이지만, 봤을때 좋은거라 생각한다면
그것으로 작업이 가능하지 않을까 하여...&lt;/p&gt;
&lt;div class="section" id="timesheet-js-1"&gt;
&lt;h2&gt;timesheet.js&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;홈페이지: &lt;a class="reference external" href="https://github.com/sbstjn/timesheet.js"&gt;sbstjn/timesheet.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;손을 좀 대서 자세하게 보이거나 이것저것 손을 볼 수 있을 것같은데...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;예제&lt;/h2&gt;
&lt;p&gt;HTML 태그를 쓸수 없다는게 rst의 단점...&lt;/p&gt;
&lt;p&gt;그래서 &lt;a class="reference external" href="http://jsfiddle.net/fujstt3s/1/"&gt;예제&lt;/a&gt; 는 링크로.... OTL&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;특이점&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;소스파일로 되어있는기.. &lt;a class="reference external" href="http://haml.info/"&gt;haml&lt;/a&gt; 로 되어있고, &lt;a class="reference external" href="http://sass-lang.com/"&gt;sass&lt;/a&gt; 는 첨가.&lt;ul&gt;
&lt;li&gt;sass는 CSS를 더 변수, 함수, 확장 / 상속 등의 기능을 추가해서 쉽게 만들고,
쉽게 유지보수 할 수 있도록 되어있다고 한다. 여러 종류가 있다고... &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;haml은 HTML abstraction markup language라고 하는걸 줄였다고, 작성을 해놨네.
HTML 태그를 작성하기 더 쉽게 되어있긴한데... 태그를 변수로 주는게 특이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조금이나 더 짧게 쓰고 조금이나마 더 버전 관리가 쉽게 하도록 하는걸 보면, 점점
더 바닥을 아는 사람들이 없어져가고, 그것들을 알 수 있는 방법들도
없어져가는건 안좋은 점 중 하나다.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://windtale.net/blog/why-i-choose-sass/"&gt;http://windtale.net/blog/why-i-choose-sass/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="javascript"></category><category term="js"></category></entry><entry><title>Clojure 개발 환경 구축</title><link href="https://ujuc.github.io/2015/03/01/clojure-development-env/" rel="alternate"></link><published>2015-03-01T00:00:00+09:00</published><updated>2015-04-01T21:30:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-03-01:/2015/03/01/clojure-development-env/</id><summary type="html">&lt;p class="first last"&gt;Clojure 개발 환경 구축... &lt;a class="reference external" href="https://www.facebook.com/weweirdmeetup"&gt;#이상한 모임&lt;/a&gt; 에서 웹 작업을 진행하는데
있어서... 내가 불편하여...&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;1. 개요&lt;/h2&gt;
&lt;p&gt;Clojure를 공부하려하는데... 이것 저것 작업을 하려하니 짧은 기억력으로는 계속
봐야되는지라. 이렇게 작성을 해놔야 나중에 볼 듯하고, 또 어딘가에 넣어둔다고해도
찾을때는 잘 못찾는 지라...&lt;/p&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h3&gt;1. 전재&lt;/h3&gt;
&lt;p&gt;OSX를 기반으로 한다. &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 를 패키지로 모두 작성된다. 만약 Linux에서
작업하게되면 관련해서 문서는 추가로 작성할 예정임. 문제는 언제될지 모르겠다.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;2. 설치할 것들&lt;/h2&gt;
&lt;div class="section" id="jdk"&gt;
&lt;h3&gt;1. JDK 설치&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;검색해서 JDK를 다운받으면 된다.&lt;/li&gt;
&lt;li&gt;Apple에서 기본적으로 주는걸 써도 될 듯.&lt;/li&gt;
&lt;li&gt;8으로 설치했는데 작업하는데는 아무런 이상없다.&lt;/li&gt;
&lt;li&gt;그래서 그냥 쓴다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;brew-cask&lt;/span&gt;&lt;/tt&gt; 에 JDK가 있다는...&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="leiningen"&gt;
&lt;h2&gt;2. Leiningen 설치&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;brew install leiningen&lt;/tt&gt; 으로 설치.&lt;/li&gt;
&lt;li&gt;딱히 설정할 것 없음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="lein"&gt;
&lt;h2&gt;3. lein 사용&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;이거 쓸려고 넘많이 적었다...&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
$&lt;span class="w"&gt; &lt;/span&gt;lein&lt;span class="w"&gt;
    &lt;/span&gt;Leiningen&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;tool&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;working&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;Clojure&lt;span class="w"&gt; &lt;/span&gt;projects.&lt;span class="w"&gt;

    &lt;/span&gt;Several&lt;span class="w"&gt; &lt;/span&gt;tasks&lt;span class="w"&gt; &lt;/span&gt;are&lt;span class="w"&gt; &lt;/span&gt;available:&lt;span class="w"&gt;
    &lt;/span&gt;change&lt;span class="w"&gt;              &lt;/span&gt;Rewrite&lt;span class="w"&gt; &lt;/span&gt;project.clj&lt;span class="w"&gt; &lt;/span&gt;by&lt;span class="w"&gt; &lt;/span&gt;applying&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;.&lt;span class="w"&gt;
    &lt;/span&gt;check&lt;span class="w"&gt;               &lt;/span&gt;Check&lt;span class="w"&gt; &lt;/span&gt;syntax&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;warn&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;reflection.&lt;span class="w"&gt;
    &lt;/span&gt;classpath&lt;span class="w"&gt;           &lt;/span&gt;Print&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;classpath&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;project.&lt;span class="w"&gt;
    &lt;/span&gt;clean&lt;span class="w"&gt;               &lt;/span&gt;Remove&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;from&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="s1"&gt;'s target-path.
    compile             Compile Clojure source into .class files.
    deploy              Build and deploy jar to remote repository.
    deps                Download all dependencies.
    do                  Higher-order task to perform other tasks in succession.
    help                Display a list of tasks or help for a given task.
    install             Install the current project to the local repository.
    jar                 Package up all the project'&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;files&lt;span class="w"&gt; &lt;/span&gt;into&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;jar&lt;span class="w"&gt; &lt;/span&gt;file.&lt;span class="w"&gt;
    &lt;/span&gt;javac&lt;span class="w"&gt;               &lt;/span&gt;Compile&lt;span class="w"&gt; &lt;/span&gt;Java&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;files.&lt;span class="w"&gt;
    &lt;/span&gt;new&lt;span class="w"&gt;                 &lt;/span&gt;Generate&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="w"&gt; &lt;/span&gt;scaffolding&lt;span class="w"&gt; &lt;/span&gt;based&lt;span class="w"&gt; &lt;/span&gt;on&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;template.&lt;span class="w"&gt;
    &lt;/span&gt;plugin&lt;span class="w"&gt;              &lt;/span&gt;DEPRECATED.&lt;span class="w"&gt; &lt;/span&gt;Please&lt;span class="w"&gt; &lt;/span&gt;use&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;:user&lt;span class="w"&gt; &lt;/span&gt;profile&lt;span class="w"&gt; &lt;/span&gt;instead.&lt;span class="w"&gt;
    &lt;/span&gt;pom&lt;span class="w"&gt;                 &lt;/span&gt;Write&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;pom.xml&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;disk&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Maven&lt;span class="w"&gt; &lt;/span&gt;interoperability.&lt;span class="w"&gt;
    &lt;/span&gt;release&lt;span class="w"&gt;             &lt;/span&gt;Perform&lt;span class="w"&gt; &lt;/span&gt;:release-tasks.&lt;span class="w"&gt;
    &lt;/span&gt;repl&lt;span class="w"&gt;                &lt;/span&gt;Start&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;repl&lt;span class="w"&gt; &lt;/span&gt;session&lt;span class="w"&gt; &lt;/span&gt;either&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;current&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;standalone.&lt;span class="w"&gt;
    &lt;/span&gt;retest&lt;span class="w"&gt;              &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;only&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;namespaces&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;failed&lt;span class="w"&gt; &lt;/span&gt;last&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;around.&lt;span class="w"&gt;
    &lt;/span&gt;run&lt;span class="w"&gt;                 &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;-main&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;with&lt;span class="w"&gt; &lt;/span&gt;optional&lt;span class="w"&gt; &lt;/span&gt;command-line&lt;span class="w"&gt; &lt;/span&gt;arguments.&lt;span class="w"&gt;
    &lt;/span&gt;search&lt;span class="w"&gt;              &lt;/span&gt;Search&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;maven&lt;span class="w"&gt; &lt;/span&gt;repositories&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;matching&lt;span class="w"&gt; &lt;/span&gt;jars.&lt;span class="w"&gt;
    &lt;/span&gt;show-profiles&lt;span class="w"&gt;       &lt;/span&gt;List&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;available&lt;span class="w"&gt; &lt;/span&gt;profiles&lt;span class="w"&gt; &lt;/span&gt;or&lt;span class="w"&gt; &lt;/span&gt;display&lt;span class="w"&gt; &lt;/span&gt;one&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;given&lt;span class="w"&gt; &lt;/span&gt;an&lt;span class="w"&gt; &lt;/span&gt;argument.&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt;                &lt;/span&gt;Run&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;project&lt;span class="s1"&gt;'s tests.
    trampoline          Run a task without nesting the project'&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;JVM&lt;span class="w"&gt; &lt;/span&gt;inside&lt;span class="w"&gt; &lt;/span&gt;Leiningen&lt;span class="s1"&gt;'s.
    uberjar             Package up the project files and dependencies into a jar file.
    update-in           Perform arbitrary transformations on your project map.
    upgrade             Upgrade Leiningen to specified version or latest stable.
    vcs                 Interact with the version control system.
    version             Print version for Leiningen and the current JVM.
    with-profile        Apply the given task with the profile(s) specified.

    Run `lein help $TASK` for details.

    Global Options:
      -o             Run a task offline.
      -U             Run a task after forcing update of snapshots.
      -h, --help     Print this help or help for a specific task.
      -v, --version  Print Leiningen'&lt;/span&gt;s&lt;span class="w"&gt; &lt;/span&gt;version.&lt;span class="w"&gt;

    &lt;/span&gt;See&lt;span class="w"&gt; &lt;/span&gt;also:&lt;span class="w"&gt; &lt;/span&gt;readme,&lt;span class="w"&gt; &lt;/span&gt;faq,&lt;span class="w"&gt; &lt;/span&gt;tutorial,&lt;span class="w"&gt; &lt;/span&gt;news,&lt;span class="w"&gt; &lt;/span&gt;sample,&lt;span class="w"&gt; &lt;/span&gt;profiles,&lt;span class="w"&gt; &lt;/span&gt;deploying,&lt;span class="w"&gt; &lt;/span&gt;gpg,&lt;span class="w"&gt;
    &lt;/span&gt;mixed-source,&lt;span class="w"&gt; &lt;/span&gt;templates,&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;copying.
&lt;/pre&gt;
&lt;div class="section" id="project"&gt;
&lt;h3&gt;1. project 생성&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;myproject
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;project.clj&lt;/tt&gt; 에 프로젝트에 관련된 내용들을 작성한다.&lt;ul&gt;
&lt;li&gt;필요한 것들이 있다면 여기다가 차곡차곡 넣어준다.&lt;/li&gt;
&lt;li&gt;그리고 이곳에 &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; 으로 사용할 코드의 위치를 작성해 줘야된다.&lt;ul&gt;
&lt;li&gt;키워드는 &lt;tt class="docutils literal"&gt;:main&lt;/tt&gt; 이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;2. 의존하는 라이브러리 다운로드&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;deps
&lt;/pre&gt;
&lt;p&gt;위에서 작성해준 패키지들을 받아와서 실행해준다. 그러니 왠만해서는 설치하고 하자.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;3. 코드 작성&lt;/h3&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;src/myproject/core.clj&lt;/tt&gt; 가 있다. 이곳에다가 코드를 작성해주면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;4. 실행&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;run
&lt;/pre&gt;
&lt;p&gt;쉽게 실행해서 나오는 것을 볼 수 있다. 뭐 간단하네...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;5. 패키징&lt;/h3&gt;
&lt;p&gt;역시 Java라고 해야될까... jar 로 만들어두면 멀티 플랫폼에서도 작동이 가능하다는
것이지. 그리고 그것을 묶어서 보여준다. 나중에가서 설정을 좀 해줘야되는 부분이
발생하겠지만, 지금은 그렇게까지는 나올 필요가 없으니...&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;uberjar
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h3&gt;6. 라이브러리 검색&lt;/h3&gt;
&lt;p&gt;필요한 라이브러리들을 검색 하는건데... 검색하는게 더 빠를듯... 너무 많이
나온다. 그리고 가끔 인덱스를 업데이트를 해주긴 해야되는데... 오래걸려...
너무 오래...&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;search&lt;span class="w"&gt; &lt;/span&gt;ring
&lt;/pre&gt;
&lt;p&gt;불편하게... 페이지별로 나오니. 이름은 정확히 입력하자. 그리고 동일한 페키지
이름으로 버전들이 쭉~~ 나오니 그것도하나 염두해둘 것... 버전 정보는 명령어를
하나더 쳐서 확인하게 해야지... 저렇게 다 보여줄 필요가 있나...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h3&gt;7. 패치 설정&lt;/h3&gt;
&lt;p&gt;자동으로 잡아준다. 그래도 추가해야된다면 &lt;tt class="docutils literal"&gt;proejct.clj&lt;/tt&gt; 에 키워드
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;:extra-classpath-dirs&lt;/span&gt;&lt;/tt&gt; 를 사용하여 리스트 형식으로 추가해주면 된다.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h3&gt;8. 인터프리터 실행&lt;/h3&gt;
&lt;p&gt;인터프리터를 실행해서 작성한 내요이 맞는지 확인이 가능하다.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
lein&lt;span class="w"&gt; &lt;/span&gt;repl
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-11"&gt;
&lt;h2&gt;참고 사이트!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://english4u.kr/clojure-memo/index.html"&gt;Clojure 강좌 - 김영태&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;emacs로 되어있는 부부만 제외했...&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="Develop"></category><category term="clojure"></category><category term="개발 환경"></category><category term="lein"></category></entry><entry><title>oh-my-vim 설치후 오류 (OSX)</title><link href="https://ujuc.github.io/2015/02/26/oh-my-vim-error-osx/" rel="alternate"></link><published>2015-02-26T00:00:00+09:00</published><updated>2015-04-01T21:14:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-26:/2015/02/26/oh-my-vim-error-osx/</id><summary type="html">&lt;p class="first last"&gt;oh-my-vim 설치하고나면 오류가 난다. 그것때문에 작성한글이다. 혹시나
동일한 것이 있으면 수정합세...&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/liangxianzhe/oh-my-vim"&gt;oh-my-vim&lt;/a&gt; 으로 vim 플러그인 설정에 관련된 기본 프로그램을 바꿨다 (이것저것
변경하고 있긴하다만...). 달라진게 없다. 좀 더 화려해지고 플러그인들로 인해서
IDE급으로 에디터가 변경됐을 뿐이다. 단지 80라인 와랩이 필요했을뿐인데...&lt;/p&gt;
&lt;p&gt;암튼 그렇게 쓰다보니 실행할때마다 에러가 뜬다.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
neocomplete does work this version of Vim.
It requires &amp;quot;if_lua&amp;quot; enabled Vim(7.3.885 or above).
&lt;/pre&gt;
&lt;p&gt;혹시나 해서 검색을 해봤다. 매번 실행할 때마다 엔터 3번은 너무 오래걸려서...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Shougo/neocomplete.vim/issues/237"&gt;neocomplete.vim - Vim version and lua&lt;/a&gt; 에서는 실행후 &lt;tt class="docutils literal"&gt;:version&lt;/tt&gt; 으로 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 가
&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 인지 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt; 인지 확인을 하라고 말을 한다.&lt;/p&gt;
&lt;p&gt;여기서는 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-lua&lt;/span&gt;&lt;/tt&gt; 면 &lt;tt class="docutils literal"&gt;lua&lt;/tt&gt; 사용 옵션이 빠져있는 것이 되기에 vim 설치시 그에 대한
옵션을 설정해줘야된다는 말을...&lt;/p&gt;
&lt;p&gt;OSX 사용자들에게만 나온는 것같은데... Linux에 대한 오류가 없는 걸보면...&lt;/p&gt;
&lt;p&gt;암튼 그것을 수정하는 방법은 &lt;tt class="docutils literal"&gt;brew&lt;/tt&gt; 로 설치할때 옵션을 걸어주고 설치하면 된다.
물론 설치했다면, 다시 설치하면된다. 난 삭제하고 다시 설치... (적다보니... 자동화
스크립트에 작성해둔거 변경을 해줘야겠다...)&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
$&lt;span class="w"&gt; &lt;/span&gt;brew&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;vim&lt;span class="w"&gt; &lt;/span&gt;--with-cscope&lt;span class="w"&gt; &lt;/span&gt;--with-lua&lt;span class="w"&gt; &lt;/span&gt;--override-system-vim
&lt;/pre&gt;
&lt;p&gt;설치해주면된다. 그러면 자연스럽게 넘어가고 에러는 밑으로 나올꺼니 엔터칠 일이
줄었다.!!!&lt;/p&gt;
</content><category term="Develop"></category><category term="vim"></category><category term="setting"></category></entry><entry><title>Pycharm에서 iPython notebook 사용</title><link href="https://ujuc.github.io/2015/02/23/using-ipython-notebook-on-pycharm/" rel="alternate"></link><published>2015-02-23T00:00:00+09:00</published><updated>2015-04-01T21:07:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-23:/2015/02/23/using-ipython-notebook-on-pycharm/</id><summary type="html">&lt;p class="first last"&gt;Pycharm이 4.0으로 판올림되면서 iPython notebook을 사용할 수 있도록
되었다. 아직 불편한감이 없지않아 있음.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Pycharm iPython notebook 지원은 4.0에서부터 지원하기 시작했다. 아직 버전업이
안됐으니 작년인듯...&lt;/p&gt;
&lt;p&gt;iPython을 설치하고 Pycharm에서 설치하려고 봤더니 제대로 돌아가질 않는다.
그렇다고 오류가 보이지도 않아서 직접 터미널에서 쳤더니...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;패키지가 없어서 안된다!!!&lt;/strong&gt; 라는 비명을 볼 수 있었다.&lt;/p&gt;
&lt;p&gt;설치해줘야되는 패키지는 &lt;tt class="docutils literal"&gt;pyzmq&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tornado&lt;/tt&gt;, (&lt;tt class="docutils literal"&gt;certifi&lt;/tt&gt; 는 &lt;tt class="docutils literal"&gt;torando&lt;/tt&gt; 설치시 같이
설치가되니 넘어간다.). 편한 방법으로 설치해주고 작동시키면 돌아가는 것을 확인할
수 있다만...&lt;/p&gt;
&lt;p&gt;Pycharm의 iPython notebook 입력기 UI가 너무 안좋다. 그냥 서버를 띄우고 Web에서
작동하는 것이 입력하기도 쉽고 값들을 확인하면서 작성하기가 더 쉽게 되어있으니
사용자가 알아서... 나는 안쓸꺼임...&lt;/p&gt;
&lt;p&gt;아마 업데이트 하면... 괜찮아질꺼야... 그럴꺼야...&lt;/p&gt;
</content><category term="Develop"></category><category term="pycharm"></category><category term="ipython"></category><category term="notebook"></category></entry><entry><title>gitworkflows(7)에대한 이야기</title><link href="https://ujuc.github.io/2015/02/02/gitworkflows7/" rel="alternate"></link><published>2015-02-02T00:00:00+09:00</published><updated>2015-03-31T00:13:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2015-02-02:/2015/02/02/gitworkflows7/</id><summary type="html">&lt;p class="first last"&gt;Git workflow 7 에대한 이야기&lt;/p&gt;
</summary><content type="html">&lt;p&gt;페이스북의 &lt;a class="reference external" href="https://www.facebook.com/groups/kgugs"&gt;Korea Git User Group&lt;/a&gt; 에 &lt;tt class="docutils literal"&gt;gitworkflows&lt;/tt&gt; 에 대한 내용을
이야기하면서 슬라이드 &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; 를 하나 올려주셨다.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.slideshare.net/ktateish/the-gitworkflows7-illustrated"&gt;The gitworkflows(7) illustrated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;정말 슬라이드를 이렇게까지 만들어주는건 정말 좋은듯. 특히 발표 당시에 그것을
못들었다고 해도 이 슬라이드만 보고도 알 수 있어서 더 좋음. 물론 발표용이라면
이것보다는 간단히 구성하는게 맞겠지만...&lt;/p&gt;
&lt;p&gt;그렇다고 이걸 쓰고 싶지는 않다. 뭔가 복잡하다. 이게 어디서 좋은거지 라는
생각이든다.&lt;/p&gt;
&lt;p&gt;브런치 전략은 &lt;a class="reference external" href="http://danielkummer.github.io/git-flow-cheatsheet/index.ko_KR.html"&gt;git-flow&lt;/a&gt; 가 가장 쉽게 접근 할 수 잇는듯...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://git-scm.com/docs/gitworkflows/1.8.2.1"&gt;gitworkflows(7) Manual Page&lt;/a&gt; &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt; 를 확인하도록하자.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;원문이 일어로 보인다. &lt;a class="reference external" href="(http://www.slideshare.net/ktateish/gitworkflows7)"&gt;図解gitworkflows(7)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;문서가 1.8.2.1 이전과 이후로 많은 부분이 변경된 것으로 보인다. 그만큼
길어졌고 추가된 기능들이 많은것을 볼수 있으니, 관련해서 한번 찾아보는 것이
필요.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="Develop"></category><category term="git"></category><category term="workflow"></category></entry><entry><title>[Google Cloud Platfrom] Google Cloud Endpoints</title><link href="https://ujuc.github.io/2014/11/14/google-cloud-platform-google-cloud-endpoints/" rel="alternate"></link><published>2014-11-14T15:05:00+09:00</published><updated>2016-03-01T00:38:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-11-14:/2014/11/14/google-cloud-platform-google-cloud-endpoints/</id><summary type="html">&lt;p&gt;Google Cloud Endpoints 간략하게 확인하기.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;App의 API를 구성하기 쉽도록 제공하는 서비스&lt;/li&gt;
&lt;li&gt;Remote Procedure Call(RPC)를 이용하여 작업을 진행할 수 있도록 구성.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2가지 방법이 존재&lt;ul&gt;
&lt;li&gt;RPC의 &lt;code&gt;message&lt;/code&gt; 클래스를 이용하는 방법.&lt;/li&gt;
&lt;li&gt;RPC를 통하지 않고 직접 작업하는 방법. &lt;/li&gt;
&lt;li&gt;사용은 RPC를 통하지 않는 방법이 간단하긴하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;예제&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-helloendpoints-python"&gt;appengine-endpoints-helloendpoints-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;RPC &lt;code&gt;message&lt;/code&gt; 클래스를 이용하도록 되어있음.&lt;/li&gt;
&lt;li&gt;랩핑하는 것에 대한 내용이 포함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-angular-todos-python"&gt;appengine-endpoints-angular-todos-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;RPC &lt;code&gt;message&lt;/code&gt; 클래스를 사용하지 않음.&lt;/li&gt;
&lt;li&gt;Angular.js를 이용하도록 예제가 되어있어서 확인해보면 될듯함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-endpoints-tictactoe-python"&gt;appengine-endpoints-tictactoe-python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;게임 예제로 보이나 아직 테스트해보지 않음.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="_3"&gt;필요 패키지&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/GoogleCloudPlatform/endpoints-proto-datastore"&gt;endpoints-proto-datastore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ProtoRPC 를 사용하지 않아도 된다고 함. &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;지금은 NDB만 지원. 추후 DB지원은 모르겠음.&lt;/li&gt;
&lt;li&gt;DB를 사용하려면 전부 분해하고 설정하는 것이 필요할 것으로 보임.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api"&gt;API 구성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/_ah/spi/.*&lt;/code&gt; URL은 &lt;code&gt;app.yaml&lt;/code&gt; 파일에 하나만 가능함.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러 API를 사용하고 싶으면 &lt;code&gt;main.py&lt;/code&gt; 에 일반 예제들처럼 API클래스를 생성하고 다음과 같이 설정해주면됨.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.yaml&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_ah&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;spi&lt;/span&gt;&lt;span class="o"&gt;/.*&lt;/span&gt;
  &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;

&lt;span class="c1"&gt;# main.py&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;App1_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;App2_api&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하나의 API에 여러 클래스를 두고 싶다면 아래의 방법으로 구성&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# API를 종류별로 나눔 &lt;/span&gt;
&lt;span class="n"&gt;test_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;test1_api_v1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;v1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# API를 처리할 Class구성&lt;/span&gt;
&lt;span class="nd"&gt;@test_api_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test_api_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bye&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;todo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="nd"&gt;@test1_api_v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plan&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_server&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Plan&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="api_1"&gt;API 등록확인&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;project-id.appspot.com/_ah/api/explorer&lt;/code&gt; 로 접근하여 확인.&lt;/li&gt;
&lt;li&gt;업로드되어 표시되는 시간이 오래걸리니(최소 5분은 걸리는듯.) 올라갔는지 확인을 하려면 Google Developers Console에서 로그로 확인하면된다.&lt;/li&gt;
&lt;li&gt;올라갔다면 아래와 같이 표시된다.&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;https://1-dot-project-id.appspot.com/_ah/api/test@v1.0&lt;span class="w"&gt; &lt;/span&gt;Saved
https://1-dot-project-id.appspot.com/_ah/api/test1@v1.0&lt;span class="w"&gt; &lt;/span&gt;Saved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;http://endpoints-proto-datastore.appspot.com/&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Develop"></category><category term="google"></category><category term="cloud"></category><category term="gcp"></category><category term="google cloud platform"></category><category term="google cloud endpoint"></category></entry><entry><title>Paramiko</title><link href="https://ujuc.github.io/2014/04/07/python-paramiko/" rel="alternate"></link><published>2014-04-07T01:56:00+09:00</published><updated>2016-03-03T22:00:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-04-07:/2014/04/07/python-paramiko/</id><summary type="html">&lt;p&gt;Python ssh 모듈인 paramiko에 대한 내용을 작성함.&lt;/p&gt;</summary><content type="html">&lt;p&gt;한글로된 글이 없어서 우선 내가 알아낸 곳과 사용한 곳까지 작성을 해둘려고한다.&lt;/p&gt;
&lt;h1 id="paramiko"&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.6+, 3.3+에서 사용할 수 있는 SSHv2 구현체이다.&lt;/li&gt;
&lt;li&gt;물론 Client, Server를 둘다 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;저 레벨 암호화를 위해서 &lt;a href="http://pycrypto.org/"&gt;PyCrypro&lt;/a&gt;(이부분은 Python C 확장으로 구현)를 제외한 나머지 부분들은 전부 Python으로만 구현되어있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;사용&lt;/h2&gt;
&lt;h3 id="1"&gt;1. 사용 예제&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="2-host-keys"&gt;2. Host Keys&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;첫 접근시 받아오는 Host Keys가 있다. 이것을 받아서 저장하던 날려먹던 상관은 하지 않지만 있어야지 접근이 가능하다.&lt;/li&gt;
&lt;li&gt;처음 &lt;code&gt;ssh&lt;/code&gt;로 접근시 무의식적으로 &lt;code&gt;yes&lt;/code&gt;를 누르는 그것!!&lt;/li&gt;
&lt;li&gt;그러다보니 여기서도 그것에 관련된 내용을 사용할 수 있다. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_missing_host_key_policy(policy)&lt;/code&gt;를 이용하여 host keys를 받아 저장할 것인지 아닌지를 판단하게 되는데. 기본값은 &lt;code&gt;RejectPolicy&lt;/code&gt;로 되어있으며, &lt;code&gt;yes&lt;/code&gt;를 받아와야한다면 &lt;code&gt;AutoAddPolicy&lt;/code&gt;를 사용하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;paramiko&lt;/span&gt;

&lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSHClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_missing_host_key_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paramiko&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AutoAddPolicy&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ujuc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;물론 Public key를 이용해서 비밀번호 없이 접근이 가능하도록 할 수 있을듯 한데 그건 좀 확인이 필요할듯.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3"&gt;3. 실행&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;실행 명령어 &lt;code&gt;exec_command&lt;/code&gt;를 실행하게되면, 값을 3개를 &lt;code&gt;tuple&lt;/code&gt;로 받아온다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt;이다.&lt;br&gt;
*명령어에 대한 값들을 받아와 확인할때는 아래와 같이 작성을 하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;만약 &lt;code&gt;sudo&lt;/code&gt;명령어가 필요한 경우,&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exec_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sudo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lol&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;위와 같이하여 작성을 하도록 한다.&lt;/li&gt;
&lt;li&gt;그리고 &lt;code&gt;write&lt;/code&gt;다음에는 &lt;code&gt;flush&lt;/code&gt;를 꼭 해줘야 작동을 하니 그점은 주의하도록 한다. 관련 내용은 &lt;a href="http://docs.paramiko.org/en/latest/api/file.html#paramiko.file.BufferedFile.write"&gt;여기&lt;/a&gt;에 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4"&gt;4. 연결 끊기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;작업이 끝났으면 연결을 끊어야된다.&lt;/li&gt;
&lt;li&gt;그냥 &lt;code&gt;close()&lt;/code&gt;를 불러오면 알아서 끊어준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-sftp"&gt;5. SFTP 사용.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어찌보면 &lt;code&gt;ssh&lt;/code&gt;를 사용하면서 편했던 것이 &lt;code&gt;sftp&lt;/code&gt;의 사용이다. 간단한 사용방법과 &lt;code&gt;ssh&lt;/code&gt;가 설치가되어있으면 따로 &lt;code&gt;ftp&lt;/code&gt;를 생성하지 않더라도 간단한 파일을 주고 받을 수 있도록 되어있기 때문이다.&lt;/li&gt;
&lt;li&gt;먼저 &lt;code&gt;ssh&lt;/code&gt;로 접속한 다음, &lt;code&gt;open_sftp()&lt;/code&gt;후 파일을 가져올때는 &lt;code&gt;get('localfile.py', 'remotefile.py')&lt;/code&gt;를 이용하고, 올려둘때는 &lt;code&gt;put('localfile.py', 'remotefile.py')&lt;/code&gt;를 사용하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;참고 자료&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.paramiko.org/"&gt;Paramiko Homepage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.paramiko.org/en/latest/index.html"&gt;Docs paramiko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://jessenoller.com/blog/2009/02/05/ssh-programming-with-paramiko-completely-different"&gt;SSH Programming With Paramiko | Completely Different&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://segfault.in/2010/03/paramiko-ssh-and-sftp-with-python/"&gt;Paramiko: SSH and SFTP With Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="python"></category><category term="paramiko"></category><category term="ssh"></category><category term="lib"></category></entry><entry><title>pylint 간략 사용법</title><link href="https://ujuc.github.io/2014/02/23/pylint/" rel="alternate"></link><published>2014-02-23T11:14:35+09:00</published><updated>2018-03-11T11:14:35+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2014-02-23:/2014/02/23/pylint/</id><summary type="html">&lt;p&gt;PyLint 간략 사용법에 대해서 작성한다.&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.pylint.org"&gt;pylint 홈페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_1"&gt;설치&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pylint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="_2"&gt;사용&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pylint filename.py
pylint-gui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;GUI를 사용하게 되면 쉽게 확인이 가능하다.&lt;/li&gt;
&lt;li&gt;콘솔에서 표기되는 내용들을 탭별로 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;좋은점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IDE를 사용해서 코드를 작성하면 Python PEP8에 작성된 내용과 비슷하게는 되는데 못잡아주는 것도 있어서 이걸 사용하면된다.&lt;/li&gt;
&lt;li&gt;모듈 이름도 가이드해주더라.&lt;/li&gt;
&lt;li&gt;함수내에 뭔짓을 이렇게 많이 하고 있느냐도 물어봐주고&lt;/li&gt;
&lt;li&gt;코드를 작게 줄일 수 있도로 도와주는 역활도 함.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;귀찮다&amp;hellip;&lt;/li&gt;
&lt;li&gt;자동화가 필요하다&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Develop"></category><category term="python"></category><category term="lint"></category><category term="pylint"></category><category term="code convention"></category></entry><entry><title>Python setup.py unilnstall 방법</title><link href="https://ujuc.github.io/2013/11/22/python_setup.py_unilnstall_bang-beob/" rel="alternate"></link><published>2013-11-22T11:22:23+09:00</published><updated>2018-03-11T11:22:23+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-11-22:/2013/11/22/python_setup.py_unilnstall_bang-beob/</id><summary type="html">&lt;p&gt;setup.py를 이용하여 uninstall 하는 방법에 대해서 간략 정리.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/1550226/python-setup-py-uninstall"&gt;Python setup.py uninstall&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;삭제하는 방법은 모든걸 지워 버려야된다는 것.&lt;/p&gt;
&lt;p&gt;우선 &lt;code&gt;setup.py&lt;/code&gt;로 설치하는 경로를 파일로 받는다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;setup.,py&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--record&lt;span class="w"&gt; &lt;/span&gt;files.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그러고 난 뒤 그 내용에 있는 것들을 모두 다 지워주면 되는데. 이때, 폴더 내부만 삭제할뿐 생성된 파일이 삭제되지 않으니 유의해서 삭제할 수 있도록 조정해주면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;files.txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;xargs&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;-rf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Develop"></category><category term="python"></category><category term="setup.py"></category><category term="setup"></category><category term="tool"></category></entry><entry><title>PCIutils</title><link href="https://ujuc.github.io/2013/02/21/pciutils/" rel="alternate"></link><published>2013-02-21T12:00:45+09:00</published><updated>2018-03-11T12:00:45+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-02-21:/2013/02/21/pciutils/</id><summary type="html">&lt;p&gt;&lt;code&gt;pciutils&lt;/code&gt; 패키지에 대해서 알아본다.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://mj.ucw.cz/sw/pciutils/"&gt;홈페이지&lt;/a&gt; 에서 말하는 건 아래의 영문내용!&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The PCI Utilities are a collection of programs for inspecting and manipulating configuration of PCI devices, all based on a common portable library libpci which offers access to the PCI configuration space on a variety of operating systems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;PCI 구성을 위한 것도 이것이 해주고, PCI 관련된 프로그램 모음들도 가지고있는. 그런 페키지 pciuils 여기서 정해주지 않으면 아무리 컴퓨터에 좋은걸 끼웠거나… 이전에 사용하지 않았던 제품을 끼웠다고 해서 리눅스에서 먹어주는 것은 아니다.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pci-ids.ucw.cz/v2.2/pci.ids"&gt;4월 9일자 pci.ids&lt;/a&gt; 를 검색해보면 아마.. 지원하는 부품들 안에 자신이 사용하는 보드나 이름들이 없다면… 우리 리눅스 버전업을 그만두자.ㅡ.ㅡ…&lt;/p&gt;
&lt;p&gt;PCI 슬롯에서 못읽어들이는데 어쩔수 있냐…..&lt;/p&gt;
&lt;p&gt;뭐 따로 받아서 저것을 추가 해준다면야 사용이 가능하겠지만…………&lt;br&gt;
 왠지 외국에서는 해줄 것같은데.. 우리나라에서는…………&lt;/p&gt;
&lt;p&gt;&lt;em&gt;만약에 추가가 안되어있으면, 내가 추가하면 되겠네?&lt;/em&gt;라는 생각이 문득들어…&lt;br&gt;
찾아봤다. &lt;code&gt;/usr/share/misc/pci.ids&lt;/code&gt; 여기에 있다. 그런데.. 이것만 바꿔주면 되는 것일까??&lt;/p&gt;
&lt;p&gt;음.. 또 찾았다. 어디냐면..&lt;/p&gt;
&lt;p&gt;pciutils 최신버전을 다운받아서 풀었더니 &lt;code&gt;update_pciids.sh&lt;/code&gt;가 있다.ㅡ.ㅡ&lt;br&gt;
그냥 이걸 실행시켜주면 알아서 설치가 될듯한데..&lt;/p&gt;</content><category term="Develop"></category><category term="pci"></category><category term="linux"></category></entry><entry><title>Screen 명령어를 통해서 Serial 통신</title><link href="https://ujuc.github.io/2013/01/09/screen_myeong-ryeong-eo-reur_tong-hae-seo_serial_tong-sin/" rel="alternate"></link><published>2013-01-09T11:39:40+09:00</published><updated>2018-03-11T11:39:40+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2013-01-09:/2013/01/09/screen_myeong-ryeong-eo-reur_tong-hae-seo_serial_tong-sin/</id><summary type="html">&lt;p&gt;screen으로 serial 통신을 하는 프로그램으로 사용하자.&lt;/p&gt;</summary><content type="html">&lt;p&gt;발단은 Coolterm이라는 Serial 통신 프로그램에서 Vi의 값을 변경할 수 없는 상황이 발생하여…&lt;/p&gt;
&lt;p&gt;여기 저기 찾다가. &lt;code&gt;Screen&lt;/code&gt;을 이용하여 Serial 통신을 할 수 있다는 포스팅을 찾아서 해보니.. 괜찮다.. 복잡하게 설정을 하지 않아도 되는 상황에서는 이것을 이용하는 편이 가장 편할 듯. &lt;code&gt;minicom&lt;/code&gt;도 필요없다.&lt;/p&gt;
&lt;p&gt;명령어 사용법 : &lt;code&gt;screen ‘디바이스 위치’ ‘전송속도’&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# Mac
screen /dev/tty.XXX 115200
# Linux
screen /dev/ttyXXX 115200
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;종료할때는 &lt;Crtl&gt;+&lt;A&gt; &amp;lt;Crtl+&amp;lt;&amp;gt;로 종료할 수 있다.&lt;/p&gt;</content><category term="Develop"></category><category term="screen"></category><category term="serial communication"></category></entry><entry><title>Eclipse + AVR Plug-in Development Environment Setting</title><link href="https://ujuc.github.io/2012/10/24/eclipse_+_arm_plug-in_development_environment_setting/" rel="alternate"></link><published>2012-10-24T11:34:15+09:00</published><updated>2018-03-11T11:34:00+09:00</updated><author><name>ujuc</name></author><id>tag:ujuc.github.io,2012-10-24:/2012/10/24/eclipse_+_arm_plug-in_development_environment_setting/</id><summary type="html">&lt;p&gt;Eclipse를 이용해서 AVR 코딩할 수 있는 환경 만들기.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Eclipse로 AVR 프로그램을 코딩할 수 있다는 소리를 듣고서 곧장 검색을 해서 필요한 것들을 깔았었다.&lt;br&gt;
그런데 뭔가 프로젝트에 x표가 나타나서 신경쓰이게 하던것을 한 블로그에서 찾았다!!!!&lt;/p&gt;
&lt;p&gt;그래서 이렇게 남긴다. 까먹을까봐서..&lt;/p&gt;
&lt;p&gt;&lt;a href="http://avr-eclipse.sourceforge.net/wiki/index.php/The_AVR_Eclipse_Plugin"&gt;공식 홈페이지&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;리눅스에서는 기본적으로 컴파일러는 gcc를 이용해서 작동을 시키게 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yaourt -S gcc-avr avr-libc avrdude binutils-avr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;을 설치해줬다. Arch Linux에서는 이렇게 해주고 더 필요한 패키지들이 있으면,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yaourt -Ss avr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;로 해줘 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;Eclipse를 설치 해주는데 이때 Eclipse는 C/C++용으로 설치해준다.&lt;br&gt;
그리고서 프로젝트 만드는 것은&lt;/p&gt;
&lt;p&gt;&lt;a href="http://hoyoung2.blogspot.com/2010/07/avr-developement-environment-setting.html"&gt;Don’t panic! WinAVR + Eclipse + AVR Plug-in Developement Environment Setting&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;에서 확인하면 끝…&lt;/p&gt;</content><category term="Develop"></category><category term="avr"></category><category term="eclipse"></category><category term="development environment"></category><category term="environment"></category><category term="arch linux"></category><category term="개발 환경"></category></entry></feed>